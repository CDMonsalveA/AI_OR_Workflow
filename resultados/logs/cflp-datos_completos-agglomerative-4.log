Welcome to the CBC MILP Solver 
Version: 2.10.3 
Build Date: Dec 15 2019 

command line - /home/cdmonsalvea/AI_OR_Workflow/.venv/lib/python3.10/site-packages/pulp/solverdir/cbc/linux/64/cbc /tmp/5a4999c9b65e43d09061d9a5d82951a9-pulp.mps -sec 3600 -timeMode elapsed -branch -printingOptions all -solution /tmp/5a4999c9b65e43d09061d9a5d82951a9-pulp.sol (default strategy 1)
At line 2 NAME          MODEL
At line 3 ROWS
At line 165 COLUMNS
At line 19606 RHS
At line 19767 BOUNDS
At line 19848 ENDATA
Problem MODEL has 160 rows, 6480 columns and 12880 elements
Coin0008I MODEL read with 0 errors
seconds was changed from 1e+100 to 3600
Option for timeMode changed from cpu to elapsed
Continuous objective value is 1.41579e+08 - 0.01 seconds
Cgl0004I processed model has 160 rows, 6480 columns (80 integer (80 of which binary)) and 12880 elements
Cbc0038I Initial state - 80 integers unsatisfied sum - 15.1135
Cbc0038I Pass   1: suminf.    0.00000 (0) obj. 1.30425e+09 iterations 80
Cbc0038I Solution found of 1.30425e+09
Cbc0038I Relaxing continuous gives 8.40684e+08
Cbc0038I Before mini branch and bound, 0 integers at bound fixed and 6241 continuous
Cbc0038I Full problem 160 rows 6480 columns, reduced to 154 rows 227 columns
Cbc0038I Mini branch and bound improved solution from 8.40684e+08 to 3.79392e+08 (0.07 seconds)
Cbc0038I Freeing continuous variables gives a solution of 3.70946e+08
Cbc0038I Round again with cutoff of 3.4801e+08
Cbc0038I Pass   2: suminf.    3.97606 (21) obj. 3.4801e+08 iterations 142
Cbc0038I Pass   3: suminf.    3.54922 (20) obj. 3.4801e+08 iterations 11
Cbc0038I Pass   4: suminf.    0.28805 (1) obj. 3.4801e+08 iterations 73
Cbc0038I Pass   5: suminf.    0.23604 (1) obj. 3.4801e+08 iterations 16
Cbc0038I Pass   6: suminf.    1.21653 (4) obj. 3.4801e+08 iterations 109
Cbc0038I Pass   7: suminf.    0.81554 (3) obj. 3.4801e+08 iterations 3
Cbc0038I Pass   8: suminf.    0.33558 (1) obj. 3.4801e+08 iterations 19
Cbc0038I Pass   9: suminf.    0.30527 (1) obj. 3.4801e+08 iterations 10
Cbc0038I Pass  10: suminf.    1.06492 (4) obj. 3.4801e+08 iterations 92
Cbc0038I Pass  11: suminf.    0.33544 (1) obj. 3.4801e+08 iterations 32
Cbc0038I Pass  12: suminf.    0.27528 (1) obj. 3.4801e+08 iterations 10
Cbc0038I Pass  13: suminf.    0.59780 (2) obj. 3.4801e+08 iterations 63
Cbc0038I Pass  14: suminf.    0.34991 (1) obj. 3.4801e+08 iterations 11
Cbc0038I Pass  15: suminf.    0.29385 (1) obj. 3.4801e+08 iterations 14
Cbc0038I Pass  16: suminf.    1.08364 (3) obj. 3.4801e+08 iterations 51
Cbc0038I Pass  17: suminf.    0.60459 (2) obj. 3.4801e+08 iterations 11
Cbc0038I Pass  18: suminf.    0.35627 (1) obj. 3.4801e+08 iterations 23
Cbc0038I Pass  19: suminf.    0.27860 (1) obj. 3.4801e+08 iterations 14
Cbc0038I Pass  20: suminf.    0.36203 (2) obj. 3.4801e+08 iterations 70
Cbc0038I Pass  21: suminf.    0.35070 (1) obj. 3.4801e+08 iterations 17
Cbc0038I Pass  22: suminf.    0.29761 (1) obj. 3.4801e+08 iterations 17
Cbc0038I Pass  23: suminf.    0.56994 (2) obj. 3.4801e+08 iterations 81
Cbc0038I Pass  24: suminf.    0.37609 (1) obj. 3.4801e+08 iterations 28
Cbc0038I Pass  25: suminf.    0.21092 (1) obj. 3.4801e+08 iterations 18
Cbc0038I Pass  26: suminf.    1.35476 (4) obj. 3.4801e+08 iterations 82
Cbc0038I Pass  27: suminf.    0.85549 (3) obj. 3.4801e+08 iterations 8
Cbc0038I Pass  28: suminf.    0.31446 (1) obj. 3.4801e+08 iterations 15
Cbc0038I Pass  29: suminf.    0.27795 (1) obj. 3.4801e+08 iterations 12
Cbc0038I Pass  30: suminf.    0.20625 (1) obj. 3.4801e+08 iterations 68
Cbc0038I Pass  31: suminf.    0.35127 (1) obj. 3.4801e+08 iterations 16
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 0 integers at bound fixed and 6104 continuous
Cbc0038I Full problem 160 rows 6480 columns, reduced to 154 rows 365 columns
Cbc0038I Mini branch and bound improved solution from 3.70946e+08 to 3.17173e+08 (0.21 seconds)
Cbc0038I Freeing continuous variables gives a solution of 3.12801e+08
Cbc0038I Round again with cutoff of 2.78557e+08
Cbc0038I Pass  31: suminf.    5.73254 (31) obj. 2.78557e+08 iterations 13
Cbc0038I Pass  32: suminf.    4.73649 (27) obj. 2.78557e+08 iterations 18
Cbc0038I Pass  33: suminf.    2.22238 (15) obj. 2.78557e+08 iterations 84
Cbc0038I Pass  34: suminf.    2.22238 (15) obj. 2.78557e+08 iterations 0
Cbc0038I Pass  35: suminf.    2.22172 (10) obj. 2.78557e+08 iterations 49
Cbc0038I Pass  36: suminf.    2.22172 (10) obj. 2.78557e+08 iterations 0
Cbc0038I Pass  37: suminf.    2.65647 (13) obj. 2.78557e+08 iterations 30
Cbc0038I Pass  38: suminf.    2.65647 (13) obj. 2.78557e+08 iterations 0
Cbc0038I Pass  39: suminf.    4.58492 (17) obj. 2.78557e+08 iterations 25
Cbc0038I Pass  40: suminf.    4.40593 (18) obj. 2.78557e+08 iterations 2
Cbc0038I Pass  41: suminf.    4.84368 (20) obj. 2.78557e+08 iterations 11
Cbc0038I Pass  42: suminf.    4.62436 (21) obj. 2.78557e+08 iterations 2
Cbc0038I Pass  43: suminf.    4.36610 (18) obj. 2.78557e+08 iterations 18
Cbc0038I Pass  44: suminf.    4.15778 (18) obj. 2.78557e+08 iterations 4
Cbc0038I Pass  45: suminf.    5.00163 (19) obj. 2.78557e+08 iterations 15
Cbc0038I Pass  46: suminf.    4.77392 (19) obj. 2.78557e+08 iterations 1
Cbc0038I Pass  47: suminf.    4.99105 (18) obj. 2.78557e+08 iterations 8
Cbc0038I Pass  48: suminf.    4.63548 (19) obj. 2.78557e+08 iterations 2
Cbc0038I Pass  49: suminf.    5.00163 (19) obj. 2.78557e+08 iterations 4
Cbc0038I Pass  50: suminf.    3.57679 (13) obj. 2.78557e+08 iterations 52
Cbc0038I Pass  51: suminf.    4.04948 (16) obj. 2.78557e+08 iterations 25
Cbc0038I Pass  52: suminf.    4.04948 (16) obj. 2.78557e+08 iterations 0
Cbc0038I Pass  53: suminf.    4.92243 (17) obj. 2.78557e+08 iterations 18
Cbc0038I Pass  54: suminf.    4.79458 (18) obj. 2.78557e+08 iterations 1
Cbc0038I Pass  55: suminf.    5.01588 (18) obj. 2.78557e+08 iterations 10
Cbc0038I Pass  56: suminf.    4.70089 (17) obj. 2.78557e+08 iterations 2
Cbc0038I Pass  57: suminf.    4.82530 (18) obj. 2.78557e+08 iterations 7
Cbc0038I Pass  58: suminf.    4.59758 (18) obj. 2.78557e+08 iterations 1
Cbc0038I Pass  59: suminf.    5.01588 (18) obj. 2.78557e+08 iterations 4
Cbc0038I Pass  60: suminf.    3.05126 (17) obj. 2.78557e+08 iterations 76
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 0 integers at bound fixed and 6226 continuous
Cbc0038I Full problem 160 rows 6480 columns, reduced to 121 rows 204 columns
Cbc0038I Mini branch and bound did not improve solution (0.33 seconds)
Cbc0038I After 0.33 seconds - Feasibility pump exiting with objective of 3.12801e+08 - took 0.30 seconds
Cbc0012I Integer solution of 3.1280107e+08 found by feasibility pump after 0 iterations and 0 nodes (0.33 seconds)
Cbc0012I Integer solution of 3.0777547e+08 found by DiveCoefficient after 183 iterations and 0 nodes (0.50 seconds)
Cbc0031I 102 added rows had average density of 120.7451
Cbc0013I At root node, 102 cuts changed objective from 1.4157892e+08 to 3.0504367e+08 in 9 passes
Cbc0014I Cut generator 0 (Probing) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.027 seconds - new frequency is -100
Cbc0014I Cut generator 1 (Gomory) - 101 row cuts average 107.7 elements, 0 column cuts (0 active)  in 0.010 seconds - new frequency is -100
Cbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.001 seconds - new frequency is -100
Cbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100
Cbc0014I Cut generator 4 (MixedIntegerRounding2) - 2 row cuts average 240.0 elements, 0 column cuts (0 active)  in 0.007 seconds - new frequency is -100
Cbc0014I Cut generator 5 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.027 seconds - new frequency is -100
Cbc0014I Cut generator 6 (TwoMirCuts) - 130 row cuts average 134.1 elements, 0 column cuts (0 active)  in 0.013 seconds - new frequency is 1
Cbc0010I After 0 nodes, 1 on tree, 3.0777547e+08 best solution, best possible 3.0504367e+08 (0.51 seconds)
Cbc0012I Integer solution of 3.0761195e+08 found by DiveCoefficient after 190 iterations and 1 nodes (0.53 seconds)
Cbc0012I Integer solution of 3.0731113e+08 found by DiveCoefficient after 225 iterations and 8 nodes (0.71 seconds)
Cbc0012I Integer solution of 3.0696035e+08 found by DiveCoefficient after 243 iterations and 12 nodes (0.75 seconds)
Cbc0012I Integer solution of 3.0656541e+08 found by rounding after 247 iterations and 14 nodes (0.75 seconds)
Cbc0001I Search completed - best objective 306565413.8377564, took 345 iterations and 28 nodes (0.87 seconds)
Cbc0032I Strong branching done 224 times (639 iterations), fathomed 4 nodes and fixed 8 variables
Cbc0035I Maximum depth 11, 3 variables fixed on reduced cost
Cuts at root node changed objective from 1.41579e+08 to 3.05044e+08
Probing was tried 9 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.027 seconds)
Gomory was tried 9 times and created 101 cuts of which 0 were active after adding rounds of cuts (0.010 seconds)
Knapsack was tried 9 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.001 seconds)
Clique was tried 9 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)
MixedIntegerRounding2 was tried 9 times and created 2 cuts of which 0 were active after adding rounds of cuts (0.007 seconds)
FlowCover was tried 9 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.027 seconds)
TwoMirCuts was tried 33 times and created 134 cuts of which 0 were active after adding rounds of cuts (0.019 seconds)
ZeroHalf was tried 1 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)

Result - Optimal solution found

Objective value:                306565413.83775640
Enumerated nodes:               28
Total iterations:               345
Time (CPU seconds):             0.88
Time (Wallclock seconds):       0.88

Option for printingOptions changed from normal to all
Total time (CPU seconds):       0.89   (Wallclock seconds):       0.89

