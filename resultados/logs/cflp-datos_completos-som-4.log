Welcome to the CBC MILP Solver 
Version: 2.10.3 
Build Date: Dec 15 2019 

command line - /home/cdmonsalvea/AI_OR_Workflow/.venv/lib/python3.10/site-packages/pulp/solverdir/cbc/linux/64/cbc /tmp/056711f93cd143cd8cf20baf08025690-pulp.mps -sec 3600 -timeMode elapsed -branch -printingOptions all -solution /tmp/056711f93cd143cd8cf20baf08025690-pulp.sol (default strategy 1)
At line 2 NAME          MODEL
At line 3 ROWS
At line 117 COLUMNS
At line 9694 RHS
At line 9807 BOUNDS
At line 9864 ENDATA
Problem MODEL has 112 rows, 3192 columns and 6328 elements
Coin0008I MODEL read with 0 errors
seconds was changed from 1e+100 to 3600
Option for timeMode changed from cpu to elapsed
Continuous objective value is 6.92608e+07 - 0.00 seconds
Cgl0004I processed model has 112 rows, 3192 columns (56 integer (56 of which binary)) and 6328 elements
Cbc0038I Initial state - 56 integers unsatisfied sum - 10.6744
Cbc0038I Pass   1: suminf.    0.00000 (0) obj. 4.59162e+08 iterations 56
Cbc0038I Solution found of 4.59162e+08
Cbc0038I Relaxing continuous gives 3.54527e+08
Cbc0038I Before mini branch and bound, 0 integers at bound fixed and 3025 continuous
Cbc0038I Full problem 112 rows 3192 columns, reduced to 107 rows 157 columns
Cbc0038I Mini branch and bound improved solution from 3.54527e+08 to 2.17595e+08 (0.03 seconds)
Cbc0038I Freeing continuous variables gives a solution of 2.10519e+08
Cbc0038I Round again with cutoff of 1.96393e+08
Cbc0038I Pass   2: suminf.    2.45684 (19) obj. 1.96393e+08 iterations 81
Cbc0038I Pass   3: suminf.    1.54445 (11) obj. 1.96393e+08 iterations 60
Cbc0038I Pass   4: suminf.    1.46723 (12) obj. 1.96393e+08 iterations 8
Cbc0038I Pass   5: suminf.    0.67420 (4) obj. 1.96393e+08 iterations 32
Cbc0038I Pass   6: suminf.    0.65746 (4) obj. 1.96393e+08 iterations 3
Cbc0038I Pass   7: suminf.    0.41365 (2) obj. 1.96393e+08 iterations 19
Cbc0038I Pass   8: suminf.    0.41149 (2) obj. 1.96393e+08 iterations 2
Cbc0038I Pass   9: suminf.    0.38182 (1) obj. 1.96393e+08 iterations 5
Cbc0038I Pass  10: suminf.    0.35128 (1) obj. 1.96393e+08 iterations 4
Cbc0038I Pass  11: suminf.    0.52609 (3) obj. 1.96393e+08 iterations 34
Cbc0038I Pass  12: suminf.    0.47225 (2) obj. 1.96393e+08 iterations 10
Cbc0038I Pass  13: suminf.    0.42090 (2) obj. 1.96393e+08 iterations 4
Cbc0038I Pass  14: suminf.    0.38700 (1) obj. 1.96393e+08 iterations 11
Cbc0038I Pass  15: suminf.    0.31559 (1) obj. 1.96393e+08 iterations 7
Cbc0038I Pass  16: suminf.    0.72267 (4) obj. 1.96393e+08 iterations 45
Cbc0038I Pass  17: suminf.    0.62938 (4) obj. 1.96393e+08 iterations 14
Cbc0038I Pass  18: suminf.    0.47163 (4) obj. 1.96393e+08 iterations 3
Cbc0038I Pass  19: suminf.    0.54806 (5) obj. 1.96393e+08 iterations 13
Cbc0038I Pass  20: suminf.    0.43009 (5) obj. 1.96393e+08 iterations 2
Cbc0038I Pass  21: suminf.    1.00924 (4) obj. 1.96393e+08 iterations 10
Cbc0038I Pass  22: suminf.    0.33339 (1) obj. 1.96393e+08 iterations 6
Cbc0038I Pass  23: suminf.    0.38043 (1) obj. 1.96393e+08 iterations 5
Cbc0038I Pass  24: suminf.    1.36480 (6) obj. 1.96393e+08 iterations 34
Cbc0038I Pass  25: suminf.    1.32029 (8) obj. 1.96393e+08 iterations 5
Cbc0038I Pass  26: suminf.    0.38031 (1) obj. 1.96393e+08 iterations 29
Cbc0038I Pass  27: suminf.    0.33363 (1) obj. 1.96393e+08 iterations 6
Cbc0038I Pass  28: suminf.    0.94281 (9) obj. 1.96393e+08 iterations 52
Cbc0038I Pass  29: suminf.    1.00895 (4) obj. 1.96393e+08 iterations 18
Cbc0038I Pass  30: suminf.    0.80896 (3) obj. 1.96393e+08 iterations 5
Cbc0038I Pass  31: suminf.    0.39390 (2) obj. 1.96393e+08 iterations 17
Cbc0038I Rounding solution of 2.09727e+08 is better than previous of 2.10519e+08

Cbc0038I Before mini branch and bound, 0 integers at bound fixed and 2965 continuous
Cbc0038I Full problem 112 rows 3192 columns, reduced to 91 rows 204 columns
Cbc0038I Mini branch and bound improved solution from 2.09727e+08 to 1.90475e+08 (0.11 seconds)
Cbc0038I Freeing continuous variables gives a solution of 1.88532e+08
Cbc0038I Round again with cutoff of 1.64678e+08
Cbc0038I Pass  31: suminf.    3.32988 (27) obj. 1.64678e+08 iterations 11
Cbc0038I Pass  32: suminf.    1.82848 (15) obj. 1.64678e+08 iterations 53
Cbc0038I Pass  33: suminf.    1.30351 (13) obj. 1.64678e+08 iterations 12
Cbc0038I Pass  34: suminf.    1.68040 (13) obj. 1.64678e+08 iterations 30
Cbc0038I Pass  35: suminf.    1.68040 (13) obj. 1.64678e+08 iterations 0
Cbc0038I Pass  36: suminf.    3.73464 (17) obj. 1.64678e+08 iterations 32
Cbc0038I Pass  37: suminf.    3.73464 (17) obj. 1.64678e+08 iterations 0
Cbc0038I Pass  38: suminf.    4.62406 (18) obj. 1.64678e+08 iterations 19
Cbc0038I Pass  39: suminf.    4.30210 (18) obj. 1.64678e+08 iterations 4
Cbc0038I Pass  40: suminf.    4.47053 (18) obj. 1.64678e+08 iterations 6
Cbc0038I Pass  41: suminf.    4.46514 (18) obj. 1.64678e+08 iterations 2
Cbc0038I Pass  42: suminf.    4.77986 (18) obj. 1.64678e+08 iterations 4
Cbc0038I Pass  43: suminf.    4.77447 (18) obj. 1.64678e+08 iterations 2
Cbc0038I Pass  44: suminf.    4.47053 (18) obj. 1.64678e+08 iterations 4
Cbc0038I Pass  45: suminf.    2.26057 (14) obj. 1.64678e+08 iterations 36
Cbc0038I Pass  46: suminf.    2.26057 (14) obj. 1.64678e+08 iterations 0
Cbc0038I Pass  47: suminf.    4.25098 (17) obj. 1.64678e+08 iterations 17
Cbc0038I Pass  48: suminf.    3.42458 (17) obj. 1.64678e+08 iterations 4
Cbc0038I Pass  49: suminf.    4.02847 (18) obj. 1.64678e+08 iterations 5
Cbc0038I Pass  50: suminf.    4.02847 (18) obj. 1.64678e+08 iterations 0
Cbc0038I Pass  51: suminf.    3.95085 (17) obj. 1.64678e+08 iterations 4
Cbc0038I Pass  52: suminf.    3.95085 (17) obj. 1.64678e+08 iterations 0
Cbc0038I Pass  53: suminf.    3.98304 (17) obj. 1.64678e+08 iterations 3
Cbc0038I Pass  54: suminf.    3.65408 (17) obj. 1.64678e+08 iterations 2
Cbc0038I Pass  55: suminf.    3.88405 (17) obj. 1.64678e+08 iterations 3
Cbc0038I Pass  56: suminf.    2.79558 (16) obj. 1.64678e+08 iterations 31
Cbc0038I Pass  57: suminf.    2.79558 (16) obj. 1.64678e+08 iterations 0
Cbc0038I Pass  58: suminf.    3.28732 (17) obj. 1.64678e+08 iterations 12
Cbc0038I Pass  59: suminf.    3.28732 (17) obj. 1.64678e+08 iterations 0
Cbc0038I Pass  60: suminf.    4.01750 (17) obj. 1.64678e+08 iterations 4
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 0 integers at bound fixed and 3026 continuous
Cbc0038I Full problem 112 rows 3192 columns, reduced to 68 rows 118 columns
Cbc0038I Mini branch and bound did not improve solution (0.19 seconds)
Cbc0038I After 0.19 seconds - Feasibility pump exiting with objective of 1.88532e+08 - took 0.16 seconds
Cbc0012I Integer solution of 1.8853196e+08 found by feasibility pump after 0 iterations and 0 nodes (0.19 seconds)
Cbc0012I Integer solution of 1.8299759e+08 found by DiveCoefficient after 242 iterations and 0 nodes (0.40 seconds)
Cbc0031I 79 added rows had average density of 114.10127
Cbc0013I At root node, 79 cuts changed objective from 69260785 to 1.8249561e+08 in 24 passes
Cbc0014I Cut generator 0 (Probing) - 1 row cuts average 56.0 elements, 0 column cuts (0 active)  in 0.034 seconds - new frequency is -100
Cbc0014I Cut generator 1 (Gomory) - 115 row cuts average 164.7 elements, 0 column cuts (0 active)  in 0.010 seconds - new frequency is -100
Cbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.002 seconds - new frequency is -100
Cbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100
Cbc0014I Cut generator 4 (MixedIntegerRounding2) - 9 row cuts average 261.4 elements, 0 column cuts (0 active)  in 0.012 seconds - new frequency is -100
Cbc0014I Cut generator 5 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.060 seconds - new frequency is -100
Cbc0014I Cut generator 6 (TwoMirCuts) - 114 row cuts average 138.2 elements, 0 column cuts (0 active)  in 0.009 seconds - new frequency is 1
Cbc0010I After 0 nodes, 1 on tree, 1.8299759e+08 best solution, best possible 1.8249561e+08 (0.41 seconds)
Cbc0001I Search completed - best objective 182997594.0116495, took 356 iterations and 8 nodes (0.50 seconds)
Cbc0032I Strong branching done 66 times (414 iterations), fathomed 5 nodes and fixed 3 variables
Cbc0035I Maximum depth 2, 3 variables fixed on reduced cost
Cuts at root node changed objective from 6.92608e+07 to 1.82496e+08
Probing was tried 24 times and created 1 cuts of which 0 were active after adding rounds of cuts (0.034 seconds)
Gomory was tried 24 times and created 115 cuts of which 0 were active after adding rounds of cuts (0.010 seconds)
Knapsack was tried 24 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.002 seconds)
Clique was tried 24 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)
MixedIntegerRounding2 was tried 24 times and created 9 cuts of which 0 were active after adding rounds of cuts (0.012 seconds)
FlowCover was tried 24 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.060 seconds)
TwoMirCuts was tried 32 times and created 114 cuts of which 0 were active after adding rounds of cuts (0.010 seconds)
ZeroHalf was tried 1 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)

Result - Optimal solution found

Objective value:                182997594.01164955
Enumerated nodes:               8
Total iterations:               356
Time (CPU seconds):             0.45
Time (Wallclock seconds):       0.50

Option for printingOptions changed from normal to all
Total time (CPU seconds):       0.46   (Wallclock seconds):       0.51

