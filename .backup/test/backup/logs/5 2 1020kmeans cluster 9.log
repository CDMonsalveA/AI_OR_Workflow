Welcome to the CBC MILP Solver 
Version: 2.10.3 
Build Date: Dec 15 2019 

command line - /home/cdmonsalvea/tesis/AI_OR_Workflow/.venv/lib/python3.10/site-packages/pulp/solverdir/cbc/linux/64/cbc /tmp/0dde9f412ac34b2198c36a8487abb92e-pulp.mps -sec 3600 -threads 12 -timeMode elapsed -branch -printingOptions all -solution /tmp/0dde9f412ac34b2198c36a8487abb92e-pulp.sol (default strategy 1)
At line 2 NAME          MODEL
At line 3 ROWS
At line 533 COLUMNS
At line 2998 RHS
At line 3527 BOUNDS
At line 4034 ENDATA
Problem MODEL has 528 rows, 506 columns and 1936 elements
Coin0008I MODEL read with 0 errors
seconds was changed from 1e+100 to 3600
threads was changed from 0 to 12
Option for timeMode changed from cpu to elapsed
Continuous objective value is 1.71865e+07 - 0.02 seconds
Cgl0003I 0 fixed, 0 tightened bounds, 62 strengthened rows, 0 substitutions
Cgl0004I processed model has 528 rows, 506 columns (22 integer (22 of which binary)) and 1958 elements
Cbc0038I Initial state - 5 integers unsatisfied sum - 1.35533
Cbc0038I Pass   1: suminf.    0.18640 (1) obj. 2.58925e+07 iterations 81
Cbc0038I Solution found of 3.76204e+07
Cbc0038I Relaxing continuous gives 3.5647e+07
Cbc0038I Before mini branch and bound, 17 integers at bound fixed and 446 continuous
Cbc0038I Full problem 528 rows 506 columns, reduced to 42 rows 30 columns
Cbc0038I Mini branch and bound improved solution from 3.5647e+07 to 3.21077e+07 (0.20 seconds)
Cbc0038I Round again with cutoff of 3.14548e+07
Cbc0038I Pass   2: suminf.    0.18640 (1) obj. 2.58925e+07 iterations 0
Cbc0038I Pass   3: suminf.    0.30401 (1) obj. 3.14548e+07 iterations 120
Cbc0038I Pass   4: suminf.    0.32079 (1) obj. 3.14548e+07 iterations 107
Cbc0038I Pass   5: suminf.    0.32079 (1) obj. 3.14548e+07 iterations 0
Cbc0038I Pass   6: suminf.    0.03835 (1) obj. 2.76391e+07 iterations 92
Cbc0038I Pass   7: suminf.    0.42386 (1) obj. 3.14548e+07 iterations 96
Cbc0038I Pass   8: suminf.    0.45065 (1) obj. 3.14548e+07 iterations 45
Cbc0038I Pass   9: suminf.    0.00000 (0) obj. 3.14548e+07 iterations 94
Cbc0038I Solution found of 3.14548e+07
Cbc0038I Relaxing continuous gives 2.79889e+07
Cbc0038I Before mini branch and bound, 13 integers at bound fixed and 418 continuous
Cbc0038I Full problem 528 rows 506 columns, reduced to 76 rows 68 columns
Cbc0038I Mini branch and bound improved solution from 2.79889e+07 to 2.7828e+07 (0.27 seconds)
Cbc0038I Round again with cutoff of 2.73783e+07
Cbc0038I Pass  10: suminf.    0.18640 (1) obj. 2.58925e+07 iterations 0
Cbc0038I Pass  11: suminf.    0.36800 (1) obj. 2.73783e+07 iterations 85
Cbc0038I Pass  12: suminf.    0.21988 (1) obj. 2.73783e+07 iterations 46
Cbc0038I Pass  13: suminf.    0.21988 (1) obj. 2.73783e+07 iterations 3
Cbc0038I Pass  14: suminf.    0.03835 (1) obj. 2.73783e+07 iterations 80
Cbc0038I Pass  15: suminf.    0.17458 (1) obj. 2.73783e+07 iterations 95
Cbc0038I Pass  16: suminf.    0.61161 (2) obj. 2.73783e+07 iterations 78
Cbc0038I Pass  17: suminf.    0.16596 (1) obj. 2.73783e+07 iterations 112
Cbc0038I Pass  18: suminf.    0.03835 (1) obj. 2.6252e+07 iterations 128
Cbc0038I Pass  19: suminf.    0.37827 (2) obj. 2.73783e+07 iterations 199
Cbc0038I Pass  20: suminf.    0.37827 (2) obj. 2.73783e+07 iterations 25
Cbc0038I Pass  21: suminf.    0.09292 (1) obj. 2.73783e+07 iterations 93
Cbc0038I Pass  22: suminf.    0.48544 (2) obj. 2.73783e+07 iterations 44
Cbc0038I Pass  23: suminf.    0.09292 (1) obj. 2.73783e+07 iterations 48
Cbc0038I Pass  24: suminf.    0.03835 (1) obj. 2.71296e+07 iterations 131
Cbc0038I Pass  25: suminf.    0.16596 (1) obj. 2.73783e+07 iterations 179
Cbc0038I Pass  26: suminf.    0.03835 (1) obj. 2.6252e+07 iterations 107
Cbc0038I Pass  27: suminf.    1.28876 (4) obj. 2.73783e+07 iterations 198
Cbc0038I Pass  28: suminf.    0.46360 (2) obj. 2.73783e+07 iterations 42
Cbc0038I Pass  29: suminf.    0.10898 (1) obj. 2.73783e+07 iterations 128
Cbc0038I Pass  30: suminf.    0.35853 (2) obj. 2.73783e+07 iterations 57
Cbc0038I Pass  31: suminf.    0.10898 (1) obj. 2.73783e+07 iterations 54
Cbc0038I Pass  32: suminf.    0.33754 (2) obj. 2.73783e+07 iterations 57
Cbc0038I Pass  33: suminf.    0.33754 (2) obj. 2.73783e+07 iterations 1
Cbc0038I Pass  34: suminf.    0.33749 (2) obj. 2.73783e+07 iterations 88
Cbc0038I Pass  35: suminf.    0.03835 (1) obj. 2.66661e+07 iterations 109
Cbc0038I Pass  36: suminf.    0.10914 (1) obj. 2.73783e+07 iterations 138
Cbc0038I Pass  37: suminf.    0.42526 (1) obj. 2.73783e+07 iterations 53
Cbc0038I Pass  38: suminf.    0.03835 (1) obj. 2.73783e+07 iterations 156
Cbc0038I Pass  39: suminf.    0.12539 (1) obj. 2.73783e+07 iterations 174
Cbc0038I Rounding solution of 2.78248e+07 is better than previous of 2.7828e+07

Cbc0038I Before mini branch and bound, 7 integers at bound fixed and 374 continuous
Cbc0038I Full problem 528 rows 506 columns, reduced to 146 rows 124 columns
Cbc0038I Mini branch and bound improved solution from 2.78248e+07 to 2.74726e+07 (0.79 seconds)
Cbc0038I Round again with cutoff of 2.68386e+07
Cbc0038I Pass  39: suminf.    0.18640 (1) obj. 2.58925e+07 iterations 0
Cbc0038I Pass  40: suminf.    0.32007 (1) obj. 2.68386e+07 iterations 85
Cbc0038I Pass  41: suminf.    0.69409 (2) obj. 2.68386e+07 iterations 89
Cbc0038I Pass  42: suminf.    0.03835 (1) obj. 2.61795e+07 iterations 115
Cbc0038I Pass  43: suminf.    0.11857 (1) obj. 2.68386e+07 iterations 142
Cbc0038I Pass  44: suminf.    0.91258 (3) obj. 2.68386e+07 iterations 68
Cbc0038I Pass  45: suminf.    0.43029 (2) obj. 2.68386e+07 iterations 3
Cbc0038I Pass  46: suminf.    0.66775 (2) obj. 2.68386e+07 iterations 39
Cbc0038I Pass  47: suminf.    0.12624 (1) obj. 2.68386e+07 iterations 87
Cbc0038I Pass  48: suminf.    0.03835 (1) obj. 2.61461e+07 iterations 90
Cbc0038I Pass  49: suminf.    0.36718 (2) obj. 2.68386e+07 iterations 210
Cbc0038I Pass  50: suminf.    0.36718 (2) obj. 2.68386e+07 iterations 4
Cbc0038I Pass  51: suminf.    0.35864 (2) obj. 2.68386e+07 iterations 75
Cbc0038I Pass  52: suminf.    0.34467 (2) obj. 2.68386e+07 iterations 66
Cbc0038I Pass  53: suminf.    0.03835 (1) obj. 2.68386e+07 iterations 53
Cbc0038I Pass  54: suminf.    0.09546 (1) obj. 2.68386e+07 iterations 108
Cbc0038I Pass  55: suminf.    1.30488 (4) obj. 2.68386e+07 iterations 44
Cbc0038I Pass  56: suminf.    1.09812 (3) obj. 2.68386e+07 iterations 51
Cbc0038I Pass  57: suminf.    1.09396 (4) obj. 2.68386e+07 iterations 16
Cbc0038I Pass  58: suminf.    0.18640 (1) obj. 2.68386e+07 iterations 85
Cbc0038I Pass  59: suminf.    0.29409 (1) obj. 2.68386e+07 iterations 92
Cbc0038I Pass  60: suminf.    0.25900 (2) obj. 2.68386e+07 iterations 71
Cbc0038I Pass  61: suminf.    0.22020 (2) obj. 2.68386e+07 iterations 17
Cbc0038I Pass  62: suminf.    0.40262 (1) obj. 2.68386e+07 iterations 67
Cbc0038I Pass  63: suminf.    0.40262 (1) obj. 2.68386e+07 iterations 0
Cbc0038I Pass  64: suminf.    0.03835 (1) obj. 2.60217e+07 iterations 170
Cbc0038I Pass  65: suminf.    0.11997 (1) obj. 2.68386e+07 iterations 154
Cbc0038I Pass  66: suminf.    0.50741 (2) obj. 2.68386e+07 iterations 53
Cbc0038I Pass  67: suminf.    0.51490 (2) obj. 2.68386e+07 iterations 69
Cbc0038I Pass  68: suminf.    0.40644 (1) obj. 2.68386e+07 iterations 31
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 3 integers at bound fixed and 357 continuous
Cbc0038I Full problem 528 rows 506 columns, reduced to 168 rows 146 columns
Cbc0038I Mini branch and bound did not improve solution (1.18 seconds)
Cbc0038I After 1.18 seconds - Feasibility pump exiting with objective of 2.74726e+07 - took 0.86 seconds
Cbc0012I Integer solution of 27472598 found by feasibility pump after 0 iterations and 0 nodes (1.18 seconds)
Cbc0012I Integer solution of 27255613 found by DiveCoefficient after 0 iterations and 0 nodes (1.19 seconds)
Cbc0038I Full problem 528 rows 506 columns, reduced to 185 rows 205 columns
Cbc0031I 13 added rows had average density of 443
Cbc0013I At root node, 13 cuts changed objective from 25579416 to 25704176 in 78 passes
Cbc0014I Cut generator 0 (Probing) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.053 seconds - new frequency is -100
Cbc0014I Cut generator 1 (Gomory) - 483 row cuts average 506.0 elements, 0 column cuts (0 active)  in 0.141 seconds - new frequency is -100
Cbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.058 seconds - new frequency is -100
Cbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.004 seconds - new frequency is -100
Cbc0014I Cut generator 4 (MixedIntegerRounding2) - 65 row cuts average 162.1 elements, 0 column cuts (0 active)  in 0.093 seconds - new frequency is 1
Cbc0014I Cut generator 5 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.178 seconds - new frequency is -100
Cbc0014I Cut generator 6 (TwoMirCuts) - 30 row cuts average 413.2 elements, 0 column cuts (0 active)  in 0.040 seconds - new frequency is -100
Cbc0010I After 0 nodes, 1 on tree, 27255613 best solution, best possible 25704176 (3.94 seconds)
Cbc0010I After 1000 nodes, 288 on tree, 27255613 best solution, best possible 25736814 (5.56 seconds)
Cbc0010I After 2000 nodes, 208 on tree, 27255613 best solution, best possible 25736814 (6.28 seconds)
Cbc0010I After 3000 nodes, 109 on tree, 27255613 best solution, best possible 25898739 (7.24 seconds)
Cbc0010I After 4000 nodes, 4 on tree, 27255613 best solution, best possible 25898739 (8.20 seconds)
Cbc0010I After 5000 nodes, 131 on tree, 27255613 best solution, best possible 25902424 (9.35 seconds)
Cbc0010I After 6000 nodes, 31 on tree, 27255613 best solution, best possible 26032807 (10.63 seconds)
Cbc0030I Thread 0 used 580 times,  waiting to start 2.9136441,  2763 locks, 0.075300455 locked, 0.49523926 waiting for locks
Cbc0030I Thread 1 used 531 times,  waiting to start 3.5259724,  2527 locks, 0.042663097 locked, 0.40570784 waiting for locks
Cbc0030I Thread 2 used 521 times,  waiting to start 3.0303659,  2489 locks, 0.050010443 locked, 0.34636617 waiting for locks
Cbc0030I Thread 3 used 519 times,  waiting to start 3.4330366,  2465 locks, 0.065826416 locked, 0.47403216 waiting for locks
Cbc0030I Thread 4 used 508 times,  waiting to start 3.8752022,  2437 locks, 0.044548273 locked, 0.47221732 waiting for locks
Cbc0030I Thread 5 used 471 times,  waiting to start 3.6719377,  2237 locks, 0.072984219 locked, 0.51160741 waiting for locks
Cbc0030I Thread 6 used 517 times,  waiting to start 3.2340541,  2460 locks, 0.033296108 locked, 0.35511589 waiting for locks
Cbc0030I Thread 7 used 479 times,  waiting to start 3.0751762,  2275 locks, 0.071744442 locked, 0.43509769 waiting for locks
Cbc0030I Thread 8 used 471 times,  waiting to start 3.4240389,  2219 locks, 0.042671442 locked, 0.40554523 waiting for locks
Cbc0030I Thread 9 used 565 times,  waiting to start 3.5072525,  2683 locks, 0.039016247 locked, 0.53535151 waiting for locks
Cbc0030I Thread 10 used 556 times,  waiting to start 3.9408407,  2631 locks, 0.090227127 locked, 0.4420011 waiting for locks
Cbc0030I Thread 11 used 498 times,  waiting to start 3.0673916,  2369 locks, 0.051745653 locked, 0.21179557 waiting for locks
Cbc0030I Main thread 5.4231005 waiting for threads,  12455 locks, 0.0093853474 locked, 0.64138436 waiting for locks
Cbc0001I Search completed - best objective 27255613.10466889, took 70975 iterations and 6216 nodes (11.73 seconds)
Cbc0032I Strong branching done 5804 times (43477 iterations), fathomed 1560 nodes and fixed 194 variables
Cbc0035I Maximum depth 19, 986 variables fixed on reduced cost
Cuts at root node changed objective from 2.55794e+07 to 2.57042e+07
Probing was tried 1014 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.688 seconds)
Gomory was tried 1014 times and created 6279 cuts of which 0 were active after adding rounds of cuts (1.830 seconds)
Knapsack was tried 1014 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.753 seconds)
Clique was tried 1014 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.051 seconds)
MixedIntegerRounding2 was tried 2023 times and created 846 cuts of which 0 were active after adding rounds of cuts (3.658 seconds)
FlowCover was tried 1014 times and created 0 cuts of which 0 were active after adding rounds of cuts (2.311 seconds)
TwoMirCuts was tried 1014 times and created 390 cuts of which 0 were active after adding rounds of cuts (0.523 seconds)
ZeroHalf was tried 13 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)

Result - Optimal solution found

Objective value:                27255613.10466889
Enumerated nodes:               6216
Total iterations:               70975
Time (CPU seconds):             31.82
Time (Wallclock seconds):       11.80

Option for printingOptions changed from normal to all
Total time (CPU seconds):       31.83   (Wallclock seconds):       11.83

