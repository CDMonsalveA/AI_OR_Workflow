Welcome to the CBC MILP Solver 
Version: 2.10.3 
Build Date: Dec 15 2019 

command line - /home/cdmonsalvea/AI_OR_Workflow/.venv/lib/python3.10/site-packages/pulp/solverdir/cbc/linux/64/cbc /tmp/a207bd6432f14fd788eb143efc9b22b1-pulp.mps -sec 3600 -timeMode elapsed -branch -printingOptions all -solution /tmp/a207bd6432f14fd788eb143efc9b22b1-pulp.sol (default strategy 1)
At line 2 NAME          MODEL
At line 3 ROWS
At line 155 COLUMNS
At line 17256 RHS
At line 17407 BOUNDS
At line 17483 ENDATA
Problem MODEL has 150 rows, 5700 columns and 11325 elements
Coin0008I MODEL read with 0 errors
seconds was changed from 1e+100 to 3600
Option for timeMode changed from cpu to elapsed
Continuous objective value is 2.26751e+07 - 0.01 seconds
Cgl0004I processed model has 150 rows, 5700 columns (75 integer (75 of which binary)) and 11325 elements
Cbc0038I Initial state - 75 integers unsatisfied sum - 7.25859
Cbc0038I Pass   1: suminf.    0.14595 (1) obj. 4.75146e+08 iterations 74
Cbc0038I Pass   2: suminf.    0.14595 (1) obj. 4.75146e+08 iterations 0
Cbc0038I Solution found of 4.7925e+08
Cbc0038I Relaxing continuous gives 4.14698e+08
Cbc0038I Before mini branch and bound, 0 integers at bound fixed and 5476 continuous
Cbc0038I Full problem 150 rows 5700 columns, reduced to 149 rows 222 columns
Cbc0038I Mini branch and bound improved solution from 4.14698e+08 to 1.94709e+08 (0.11 seconds)
Cbc0038I Freeing continuous variables gives a solution of 1.58938e+08
Cbc0038I Round again with cutoff of 1.45312e+08
Cbc0038I Pass   3: suminf.    3.57595 (24) obj. 1.45312e+08 iterations 36
Cbc0038I Pass   4: suminf.    2.74357 (21) obj. 1.45312e+08 iterations 16
Cbc0038I Pass   5: suminf.    0.77953 (11) obj. 1.45312e+08 iterations 59
Cbc0038I Pass   6: suminf.    0.66369 (10) obj. 1.45312e+08 iterations 56
Cbc0038I Pass   7: suminf.    2.13898 (29) obj. 1.45312e+08 iterations 61
Cbc0038I Pass   8: suminf.    2.89396 (28) obj. 1.45312e+08 iterations 34
Cbc0038I Pass   9: suminf.    2.30513 (26) obj. 1.45312e+08 iterations 13
Cbc0038I Pass  10: suminf.    3.02080 (28) obj. 1.45312e+08 iterations 15
Cbc0038I Pass  11: suminf.    2.70426 (26) obj. 1.45312e+08 iterations 6
Cbc0038I Pass  12: suminf.    2.92403 (27) obj. 1.45312e+08 iterations 8
Cbc0038I Pass  13: suminf.    2.56308 (25) obj. 1.45312e+08 iterations 7
Cbc0038I Pass  14: suminf.    2.95755 (28) obj. 1.45312e+08 iterations 9
Cbc0038I Pass  15: suminf.    3.04463 (27) obj. 1.45312e+08 iterations 80
Cbc0038I Pass  16: suminf.    2.94184 (26) obj. 1.45312e+08 iterations 3
Cbc0038I Pass  17: suminf.    2.64363 (27) obj. 1.45312e+08 iterations 25
Cbc0038I Pass  18: suminf.    2.54275 (27) obj. 1.45312e+08 iterations 5
Cbc0038I Pass  19: suminf.    2.70863 (28) obj. 1.45312e+08 iterations 10
Cbc0038I Pass  20: suminf.    2.64874 (28) obj. 1.45312e+08 iterations 1
Cbc0038I Pass  21: suminf.    2.70863 (28) obj. 1.45312e+08 iterations 1
Cbc0038I Pass  22: suminf.    3.15996 (29) obj. 1.45312e+08 iterations 68
Cbc0038I Pass  23: suminf.    2.75177 (25) obj. 1.45312e+08 iterations 7
Cbc0038I Pass  24: suminf.    2.69518 (27) obj. 1.45312e+08 iterations 17
Cbc0038I Pass  25: suminf.    2.66322 (28) obj. 1.45312e+08 iterations 1
Cbc0038I Pass  26: suminf.    2.82221 (27) obj. 1.45312e+08 iterations 18
Cbc0038I Pass  27: suminf.    2.73797 (28) obj. 1.45312e+08 iterations 1
Cbc0038I Pass  28: suminf.    2.66322 (28) obj. 1.45312e+08 iterations 1
Cbc0038I Pass  29: suminf.    3.13530 (28) obj. 1.45312e+08 iterations 65
Cbc0038I Pass  30: suminf.    3.13530 (28) obj. 1.45312e+08 iterations 0
Cbc0038I Pass  31: suminf.    2.87508 (27) obj. 1.45312e+08 iterations 27
Cbc0038I Pass  32: suminf.    2.39740 (24) obj. 1.45312e+08 iterations 9
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 0 integers at bound fixed and 5443 continuous
Cbc0038I Full problem 150 rows 5700 columns, reduced to 111 rows 215 columns
Cbc0038I Mini branch and bound improved solution from 1.58938e+08 to 1.56968e+08 (0.23 seconds)
Cbc0038I Freeing continuous variables gives a solution of 1.44925e+08
Cbc0038I Round again with cutoff of 1.20475e+08
Cbc0038I Pass  32: suminf.    3.99365 (29) obj. 1.20475e+08 iterations 5
Cbc0038I Pass  33: suminf.    3.16319 (27) obj. 1.20475e+08 iterations 14
Cbc0038I Pass  34: suminf.    1.63787 (23) obj. 1.20475e+08 iterations 88
Cbc0038I Pass  35: suminf.    3.27608 (37) obj. 1.20475e+08 iterations 76
Cbc0038I Pass  36: suminf.    3.13196 (38) obj. 1.20475e+08 iterations 2
Cbc0038I Pass  37: suminf.    2.89504 (35) obj. 1.20475e+08 iterations 13
Cbc0038I Pass  38: suminf.    2.42692 (33) obj. 1.20475e+08 iterations 9
Cbc0038I Pass  39: suminf.    2.89504 (35) obj. 1.20475e+08 iterations 7
Cbc0038I Pass  40: suminf.    2.56098 (33) obj. 1.20475e+08 iterations 7
Cbc0038I Pass  41: suminf.    3.02448 (35) obj. 1.20475e+08 iterations 14
Cbc0038I Pass  42: suminf.    2.98249 (36) obj. 1.20475e+08 iterations 1
Cbc0038I Pass  43: suminf.    2.98802 (35) obj. 1.20475e+08 iterations 3
Cbc0038I Pass  44: suminf.    2.94603 (36) obj. 1.20475e+08 iterations 1
Cbc0038I Pass  45: suminf.    3.04790 (35) obj. 1.20475e+08 iterations 2
Cbc0038I Pass  46: suminf.    3.88510 (38) obj. 1.20475e+08 iterations 69
Cbc0038I Pass  47: suminf.    3.88510 (38) obj. 1.20475e+08 iterations 0
Cbc0038I Pass  48: suminf.    3.59621 (35) obj. 1.20475e+08 iterations 20
Cbc0038I Pass  49: suminf.    3.11468 (33) obj. 1.20475e+08 iterations 9
Cbc0038I Pass  50: suminf.    3.57270 (36) obj. 1.20475e+08 iterations 9
Cbc0038I Pass  51: suminf.    3.49525 (37) obj. 1.20475e+08 iterations 1
Cbc0038I Pass  52: suminf.    3.69411 (37) obj. 1.20475e+08 iterations 11
Cbc0038I Pass  53: suminf.    3.50653 (35) obj. 1.20475e+08 iterations 47
Cbc0038I Pass  54: suminf.    2.88155 (31) obj. 1.20475e+08 iterations 11
Cbc0038I Pass  55: suminf.    3.44328 (35) obj. 1.20475e+08 iterations 14
Cbc0038I Pass  56: suminf.    3.05986 (35) obj. 1.20475e+08 iterations 9
Cbc0038I Pass  57: suminf.    3.20975 (35) obj. 1.20475e+08 iterations 7
Cbc0038I Pass  58: suminf.    2.95130 (33) obj. 1.20475e+08 iterations 8
Cbc0038I Pass  59: suminf.    3.20975 (35) obj. 1.20475e+08 iterations 5
Cbc0038I Pass  60: suminf.    3.57183 (37) obj. 1.20475e+08 iterations 70
Cbc0038I Pass  61: suminf.    3.52832 (38) obj. 1.20475e+08 iterations 1
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 0 integers at bound fixed and 5464 continuous
Cbc0038I Full problem 150 rows 5700 columns, reduced to 107 rows 188 columns
Cbc0038I Mini branch and bound did not improve solution (0.34 seconds)
Cbc0038I After 0.34 seconds - Feasibility pump exiting with objective of 1.44925e+08 - took 0.31 seconds
Cbc0012I Integer solution of 1.4492456e+08 found by feasibility pump after 0 iterations and 0 nodes (0.34 seconds)
Cbc0012I Integer solution of 1.3961211e+08 found by DiveCoefficient after 387 iterations and 0 nodes (1.11 seconds)
Cbc0031I 104 added rows had average density of 127.72115
Cbc0013I At root node, 104 cuts changed objective from 22675092 to 1.103919e+08 in 50 passes
Cbc0014I Cut generator 0 (Probing) - 3 row cuts average 75.0 elements, 0 column cuts (0 active)  in 0.183 seconds - new frequency is -100
Cbc0014I Cut generator 1 (Gomory) - 183 row cuts average 205.1 elements, 0 column cuts (0 active)  in 0.094 seconds - new frequency is -100
Cbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.006 seconds - new frequency is -100
Cbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.002 seconds - new frequency is -100
Cbc0014I Cut generator 4 (MixedIntegerRounding2) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.045 seconds - new frequency is -100
Cbc0014I Cut generator 5 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.185 seconds - new frequency is -100
Cbc0014I Cut generator 6 (TwoMirCuts) - 125 row cuts average 131.4 elements, 0 column cuts (0 active)  in 0.022 seconds - new frequency is 1
Cbc0010I After 0 nodes, 1 on tree, 1.3961211e+08 best solution, best possible 1.103919e+08 (1.13 seconds)
Cbc0012I Integer solution of 1.3525573e+08 found by DiveCoefficient after 390 iterations and 1 nodes (1.17 seconds)
Cbc0012I Integer solution of 1.342397e+08 found by DiveCoefficient after 407 iterations and 5 nodes (1.44 seconds)
Cbc0012I Integer solution of 1.3383591e+08 found by DiveCoefficient after 415 iterations and 6 nodes (1.53 seconds)
Cbc0012I Integer solution of 1.3379075e+08 found by DiveCoefficient after 420 iterations and 7 nodes (1.58 seconds)
Cbc0012I Integer solution of 1.336482e+08 found by DiveCoefficient after 436 iterations and 13 nodes (1.69 seconds)
Cbc0012I Integer solution of 1.3343809e+08 found by DiveCoefficient after 441 iterations and 16 nodes (1.77 seconds)
Cbc0038I Full problem 150 rows 5700 columns, reduced to 118 rows 3252 columns - 3 fixed gives 118, 3249 - still too large
Cbc0038I Full problem 150 rows 5700 columns, reduced to 118 rows 3249 columns - too large
Cbc0012I Integer solution of 1.3182707e+08 found by rounding after 592 iterations and 60 nodes (2.10 seconds)
Cbc0012I Integer solution of 1.2914372e+08 found by rounding after 594 iterations and 61 nodes (2.10 seconds)
Cbc0004I Integer solution of 1.2664295e+08 found after 596 iterations and 62 nodes (2.11 seconds)
Cbc0016I Integer solution of 1.262342e+08 found by strong branching after 649 iterations and 70 nodes (2.14 seconds)
Cbc0004I Integer solution of 1.2572858e+08 found after 677 iterations and 78 nodes (2.17 seconds)
Cbc0038I Full problem 150 rows 5700 columns, reduced to 123 rows 3635 columns - 2 fixed gives 123, 3633 - still too large
Cbc0038I Full problem 150 rows 5700 columns, reduced to 123 rows 3633 columns - too large
Cbc0010I After 100 nodes, 31 on tree, 1.2572858e+08 best solution, best possible 1.103919e+08 (2.27 seconds)
Cbc0010I After 200 nodes, 50 on tree, 1.2572858e+08 best solution, best possible 1.103919e+08 (2.49 seconds)
Cbc0038I Full problem 150 rows 5700 columns, reduced to 118 rows 2528 columns - 2 fixed gives 118, 2526 - still too large
Cbc0038I Full problem 150 rows 5700 columns, reduced to 118 rows 2526 columns - too large
Cbc0010I After 300 nodes, 49 on tree, 1.2572858e+08 best solution, best possible 1.103919e+08 (2.66 seconds)
Cbc0038I Full problem 150 rows 5700 columns, reduced to 115 rows 2066 columns
Cbc0010I After 400 nodes, 48 on tree, 1.2572858e+08 best solution, best possible 1.103919e+08 (2.84 seconds)
Cbc0038I Full problem 150 rows 5700 columns, reduced to 112 rows 1901 columns
Cbc0010I After 500 nodes, 67 on tree, 1.2572858e+08 best solution, best possible 1.103919e+08 (3.03 seconds)
Cbc0038I Full problem 150 rows 5700 columns, reduced to 110 rows 1789 columns
Cbc0010I After 600 nodes, 90 on tree, 1.2572858e+08 best solution, best possible 1.103919e+08 (3.23 seconds)
Cbc0012I Integer solution of 1.2501927e+08 found by rounding after 3181 iterations and 613 nodes (3.25 seconds)
Cbc0016I Integer solution of 1.2477096e+08 found by strong branching after 3702 iterations and 685 nodes (3.53 seconds)
Cbc0038I Full problem 150 rows 5700 columns, reduced to 110 rows 1799 columns
Cbc0010I After 700 nodes, 77 on tree, 1.2477096e+08 best solution, best possible 1.103919e+08 (3.60 seconds)
Cbc0038I Full problem 150 rows 5700 columns, reduced to 113 rows 1969 columns
Cbc0010I After 800 nodes, 74 on tree, 1.2477096e+08 best solution, best possible 1.103919e+08 (3.87 seconds)
Cbc0038I Full problem 150 rows 5700 columns, reduced to 116 rows 2167 columns
Cbc0010I After 900 nodes, 52 on tree, 1.2477096e+08 best solution, best possible 1.103919e+08 (4.18 seconds)
Cbc0010I After 1000 nodes, 74 on tree, 1.2477096e+08 best solution, best possible 1.103919e+08 (4.50 seconds)
Cbc0010I After 1100 nodes, 64 on tree, 1.2477096e+08 best solution, best possible 1.103919e+08 (4.93 seconds)
Cbc0010I After 1200 nodes, 45 on tree, 1.2477096e+08 best solution, best possible 1.103919e+08 (5.60 seconds)
Cbc0010I After 1300 nodes, 36 on tree, 1.2477096e+08 best solution, best possible 1.103919e+08 (6.35 seconds)
Cbc0010I After 1400 nodes, 29 on tree, 1.2477096e+08 best solution, best possible 1.103919e+08 (7.14 seconds)
Cbc0010I After 1500 nodes, 19 on tree, 1.2477096e+08 best solution, best possible 1.103919e+08 (8.01 seconds)
Cbc0010I After 1600 nodes, 23 on tree, 1.2477096e+08 best solution, best possible 1.103919e+08 (8.74 seconds)
Cbc0010I After 1700 nodes, 25 on tree, 1.2477096e+08 best solution, best possible 1.103919e+08 (9.48 seconds)
Cbc0012I Integer solution of 1.247279e+08 found by rounding after 10988 iterations and 1702 nodes (9.49 seconds)
Cbc0038I Full problem 150 rows 5700 columns, reduced to 106 rows 1546 columns
Cbc0010I After 1800 nodes, 35 on tree, 1.247279e+08 best solution, best possible 1.103919e+08 (10.27 seconds)
Cbc0010I After 1900 nodes, 48 on tree, 1.247279e+08 best solution, best possible 1.103919e+08 (10.90 seconds)
Cbc0010I After 2000 nodes, 48 on tree, 1.247279e+08 best solution, best possible 1.103919e+08 (11.46 seconds)
Cbc0010I After 2100 nodes, 42 on tree, 1.247279e+08 best solution, best possible 1.103919e+08 (12.07 seconds)
Cbc0010I After 2200 nodes, 36 on tree, 1.247279e+08 best solution, best possible 1.103919e+08 (12.60 seconds)
Cbc0010I After 2300 nodes, 13 on tree, 1.247279e+08 best solution, best possible 1.103919e+08 (13.10 seconds)
Cbc0038I Full problem 150 rows 5700 columns, reduced to 108 rows 1630 columns
Cbc0010I After 2400 nodes, 67 on tree, 1.247279e+08 best solution, best possible 1.103919e+08 (13.76 seconds)
Cbc0016I Integer solution of 1.231049e+08 found by strong branching after 15619 iterations and 2406 nodes (13.79 seconds)
Cbc0010I After 2500 nodes, 81 on tree, 1.231049e+08 best solution, best possible 1.103919e+08 (14.17 seconds)
Cbc0016I Integer solution of 1.2289349e+08 found by strong branching after 16141 iterations and 2506 nodes (14.19 seconds)
Cbc0010I After 2600 nodes, 100 on tree, 1.2289349e+08 best solution, best possible 1.103919e+08 (14.58 seconds)
Cbc0012I Integer solution of 1.2285043e+08 found by rounding after 17207 iterations and 2697 nodes (15.06 seconds)
Cbc0010I After 2700 nodes, 124 on tree, 1.2285043e+08 best solution, best possible 1.103919e+08 (15.07 seconds)
Cbc0012I Integer solution of 1.2267352e+08 found by rounding after 17796 iterations and 2791 nodes (15.59 seconds)
Cbc0010I After 2800 nodes, 140 on tree, 1.2267352e+08 best solution, best possible 1.103919e+08 (15.60 seconds)
Cbc0004I Integer solution of 1.2245643e+08 found after 17908 iterations and 2813 nodes (15.66 seconds)
Cbc0010I After 2900 nodes, 136 on tree, 1.2245643e+08 best solution, best possible 1.103919e+08 (16.22 seconds)
Cbc0010I After 3000 nodes, 144 on tree, 1.2245643e+08 best solution, best possible 1.103919e+08 (16.90 seconds)
Cbc0010I After 3100 nodes, 132 on tree, 1.2245643e+08 best solution, best possible 1.103919e+08 (17.54 seconds)
Cbc0010I After 3200 nodes, 127 on tree, 1.2245643e+08 best solution, best possible 1.103919e+08 (18.33 seconds)
Cbc0010I After 3300 nodes, 115 on tree, 1.2245643e+08 best solution, best possible 1.103919e+08 (18.90 seconds)
Cbc0010I After 3400 nodes, 88 on tree, 1.2245643e+08 best solution, best possible 1.103919e+08 (19.43 seconds)
Cbc0010I After 3500 nodes, 50 on tree, 1.2245643e+08 best solution, best possible 1.103919e+08 (19.86 seconds)
Cbc0010I After 3600 nodes, 9 on tree, 1.2245643e+08 best solution, best possible 1.103919e+08 (20.21 seconds)
Cbc0038I Full problem 150 rows 5700 columns, reduced to 124 rows 2630 columns - 2 fixed gives 124, 2628 - still too large
Cbc0038I Full problem 150 rows 5700 columns, reduced to 124 rows 2628 columns - too large
Cbc0010I After 3700 nodes, 46 on tree, 1.2245643e+08 best solution, best possible 1.103919e+08 (20.98 seconds)
Cbc0010I After 3800 nodes, 86 on tree, 1.2245643e+08 best solution, best possible 1.103919e+08 (21.79 seconds)
Cbc0010I After 3900 nodes, 118 on tree, 1.2245643e+08 best solution, best possible 1.103919e+08 (22.57 seconds)
Cbc0012I Integer solution of 1.2213235e+08 found by DiveCoefficient after 25024 iterations and 3901 nodes (22.61 seconds)
Cbc0010I After 4000 nodes, 116 on tree, 1.2213235e+08 best solution, best possible 1.103919e+08 (23.26 seconds)
Cbc0010I After 4100 nodes, 109 on tree, 1.2213235e+08 best solution, best possible 1.103919e+08 (23.68 seconds)
Cbc0010I After 4200 nodes, 98 on tree, 1.2213235e+08 best solution, best possible 1.103919e+08 (24.20 seconds)
Cbc0010I After 4300 nodes, 86 on tree, 1.2213235e+08 best solution, best possible 1.103919e+08 (24.66 seconds)
Cbc0004I Integer solution of 1.2208929e+08 found after 28297 iterations and 4326 nodes (24.80 seconds)
Cbc0010I After 4400 nodes, 56 on tree, 1.2208929e+08 best solution, best possible 1.103919e+08 (25.10 seconds)
Cbc0010I After 4500 nodes, 14 on tree, 1.2208929e+08 best solution, best possible 1.103919e+08 (25.46 seconds)
Cbc0010I After 4600 nodes, 40 on tree, 1.2208929e+08 best solution, best possible 1.103919e+08 (26.39 seconds)
Cbc0010I After 4700 nodes, 37 on tree, 1.2208929e+08 best solution, best possible 1.103919e+08 (27.02 seconds)
Cbc0038I Full problem 150 rows 5700 columns, reduced to 123 rows 1999 columns
Cbc0010I After 4800 nodes, 13 on tree, 1.2208929e+08 best solution, best possible 1.103919e+08 (27.68 seconds)
Cbc0010I After 4900 nodes, 59 on tree, 1.2208929e+08 best solution, best possible 1.103919e+08 (28.35 seconds)
Cbc0010I After 5000 nodes, 99 on tree, 1.2208929e+08 best solution, best possible 1.103919e+08 (28.97 seconds)
Cbc0010I After 5100 nodes, 94 on tree, 1.2208929e+08 best solution, best possible 1.103919e+08 (29.38 seconds)
Cbc0004I Integer solution of 1.2131446e+08 found after 33606 iterations and 5126 nodes (29.49 seconds)
Cbc0010I After 5200 nodes, 92 on tree, 1.2131446e+08 best solution, best possible 1.103919e+08 (29.92 seconds)
Cbc0010I After 5300 nodes, 98 on tree, 1.2131446e+08 best solution, best possible 1.103919e+08 (30.56 seconds)
Cbc0010I After 5400 nodes, 88 on tree, 1.2131446e+08 best solution, best possible 1.103919e+08 (31.24 seconds)
Cbc0010I After 5500 nodes, 64 on tree, 1.2131446e+08 best solution, best possible 1.103919e+08 (31.86 seconds)
Cbc0004I Integer solution of 1.2127141e+08 found after 36715 iterations and 5560 nodes (32.12 seconds)
Cbc0010I After 5600 nodes, 26 on tree, 1.2127141e+08 best solution, best possible 1.103919e+08 (32.30 seconds)
Cbc0010I After 5700 nodes, 28 on tree, 1.2127141e+08 best solution, best possible 1.103919e+08 (33.07 seconds)
Cbc0010I After 5800 nodes, 27 on tree, 1.2127141e+08 best solution, best possible 1.103919e+08 (33.82 seconds)
Cbc0010I After 5900 nodes, 21 on tree, 1.2127141e+08 best solution, best possible 1.103919e+08 (34.50 seconds)
Cbc0010I After 6000 nodes, 6 on tree, 1.2127141e+08 best solution, best possible 1.103919e+08 (35.17 seconds)
Cbc0038I Full problem 150 rows 5700 columns, reduced to 122 rows 1943 columns
Cbc0010I After 6100 nodes, 27 on tree, 1.2127141e+08 best solution, best possible 1.103919e+08 (36.00 seconds)
Cbc0010I After 6200 nodes, 62 on tree, 1.2127141e+08 best solution, best possible 1.103919e+08 (36.82 seconds)
Cbc0010I After 6300 nodes, 45 on tree, 1.2127141e+08 best solution, best possible 1.103919e+08 (37.43 seconds)
Cbc0010I After 6400 nodes, 8 on tree, 1.2127141e+08 best solution, best possible 1.103919e+08 (37.97 seconds)
Cbc0010I After 6500 nodes, 16 on tree, 1.2127141e+08 best solution, best possible 1.103919e+08 (38.84 seconds)
Cbc0010I After 6600 nodes, 19 on tree, 1.2127141e+08 best solution, best possible 1.103919e+08 (39.49 seconds)
Cbc0010I After 6700 nodes, 14 on tree, 1.2127141e+08 best solution, best possible 1.103919e+08 (40.32 seconds)
Cbc0010I After 6800 nodes, 10 on tree, 1.2127141e+08 best solution, best possible 1.103919e+08 (41.19 seconds)
Cbc0010I After 6900 nodes, 15 on tree, 1.2127141e+08 best solution, best possible 1.103919e+08 (41.98 seconds)
Cbc0010I After 7000 nodes, 10 on tree, 1.2127141e+08 best solution, best possible 1.103919e+08 (42.75 seconds)
Cbc0010I After 7100 nodes, 13 on tree, 1.2127141e+08 best solution, best possible 1.103919e+08 (43.56 seconds)
Cbc0038I Full problem 150 rows 5700 columns, reduced to 115 rows 1555 columns
Cbc0010I After 7200 nodes, 2 on tree, 1.2127141e+08 best solution, best possible 1.103919e+08 (44.34 seconds)
Cbc0010I After 7300 nodes, 47 on tree, 1.2127141e+08 best solution, best possible 1.1228295e+08 (45.14 seconds)
Cbc0010I After 7400 nodes, 53 on tree, 1.2127141e+08 best solution, best possible 1.1228295e+08 (45.56 seconds)
Cbc0010I After 7500 nodes, 42 on tree, 1.2127141e+08 best solution, best possible 1.1228295e+08 (45.99 seconds)
Cbc0010I After 7600 nodes, 14 on tree, 1.2127141e+08 best solution, best possible 1.1228295e+08 (46.49 seconds)
Cbc0010I After 7700 nodes, 5 on tree, 1.2127141e+08 best solution, best possible 1.1228295e+08 (47.01 seconds)
Cbc0010I After 7800 nodes, 39 on tree, 1.2127141e+08 best solution, best possible 1.1228295e+08 (47.77 seconds)
Cbc0010I After 7900 nodes, 32 on tree, 1.2127141e+08 best solution, best possible 1.1228295e+08 (48.43 seconds)
Cbc0010I After 8000 nodes, 15 on tree, 1.2127141e+08 best solution, best possible 1.1228295e+08 (49.06 seconds)
Cbc0010I After 8100 nodes, 22 on tree, 1.2127141e+08 best solution, best possible 1.1228295e+08 (50.03 seconds)
Cbc0010I After 8200 nodes, 7 on tree, 1.2127141e+08 best solution, best possible 1.1228295e+08 (51.06 seconds)
Cbc0010I After 8300 nodes, 6 on tree, 1.2127141e+08 best solution, best possible 1.1228295e+08 (51.96 seconds)
Cbc0038I Full problem 150 rows 5700 columns, reduced to 123 rows 1939 columns
Cbc0010I After 8400 nodes, 10 on tree, 1.2127141e+08 best solution, best possible 1.1464087e+08 (53.09 seconds)
Cbc0010I After 8500 nodes, 6 on tree, 1.2127141e+08 best solution, best possible 1.1464087e+08 (53.92 seconds)
Cbc0010I After 8600 nodes, 10 on tree, 1.2127141e+08 best solution, best possible 1.1464087e+08 (54.72 seconds)
Cbc0010I After 8700 nodes, 2 on tree, 1.2127141e+08 best solution, best possible 1.1683991e+08 (55.55 seconds)
Cbc0001I Search completed - best objective 121271407.2962824, took 59966 iterations and 8725 nodes (55.76 seconds)
Cbc0032I Strong branching done 32800 times (116994 iterations), fathomed 1116 nodes and fixed 6182 variables
Cbc0035I Maximum depth 40, 214 variables fixed on reduced cost
Cuts at root node changed objective from 2.26751e+07 to 1.10392e+08
Probing was tried 50 times and created 3 cuts of which 0 were active after adding rounds of cuts (0.183 seconds)
Gomory was tried 50 times and created 183 cuts of which 0 were active after adding rounds of cuts (0.094 seconds)
Knapsack was tried 50 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.006 seconds)
Clique was tried 50 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.002 seconds)
MixedIntegerRounding2 was tried 50 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.045 seconds)
FlowCover was tried 50 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.185 seconds)
TwoMirCuts was tried 6357 times and created 125 cuts of which 0 were active after adding rounds of cuts (1.047 seconds)
ZeroHalf was tried 1 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)

Result - Optimal solution found

Objective value:                121271407.29628235
Enumerated nodes:               8725
Total iterations:               59966
Time (CPU seconds):             55.51
Time (Wallclock seconds):       55.77

Option for printingOptions changed from normal to all
Total time (CPU seconds):       55.52   (Wallclock seconds):       55.78

