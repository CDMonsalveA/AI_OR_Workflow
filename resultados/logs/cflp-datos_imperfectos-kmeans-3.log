Welcome to the CBC MILP Solver 
Version: 2.10.3 
Build Date: Dec 15 2019 

command line - /home/cdmonsalvea/AI_OR_Workflow/.venv/lib/python3.10/site-packages/pulp/solverdir/cbc/linux/64/cbc /tmp/e344e02f3b9542d79bbb40c42c902e64-pulp.mps -sec 3600 -timeMode elapsed -branch -printingOptions all -solution /tmp/e344e02f3b9542d79bbb40c42c902e64-pulp.sol (default strategy 1)
At line 2 NAME          MODEL
At line 3 ROWS
At line 137 COLUMNS
At line 13404 RHS
At line 13537 BOUNDS
At line 13604 ENDATA
Problem MODEL has 132 rows, 4422 columns and 8778 elements
Coin0008I MODEL read with 0 errors
seconds was changed from 1e+100 to 3600
Option for timeMode changed from cpu to elapsed
Continuous objective value is 6.56058e+07 - 0.00 seconds
Cgl0004I processed model has 132 rows, 4422 columns (66 integer (66 of which binary)) and 8778 elements
Cbc0038I Initial state - 66 integers unsatisfied sum - 12.1905
Cbc0038I Pass   1: suminf.    0.02715 (1) obj. 6.75021e+08 iterations 66
Cbc0038I Solution found of 6.76845e+08
Cbc0038I Relaxing continuous gives 5.02166e+08
Cbc0038I Before mini branch and bound, 0 integers at bound fixed and 4225 continuous
Cbc0038I Full problem 132 rows 4422 columns, reduced to 127 rows 187 columns
Cbc0038I Mini branch and bound improved solution from 5.02166e+08 to 2.35875e+08 (0.04 seconds)
Cbc0038I Freeing continuous variables gives a solution of 2.24937e+08
Cbc0038I Round again with cutoff of 2.09004e+08
Cbc0038I Pass   2: suminf.    3.29871 (24) obj. 2.09004e+08 iterations 134
Cbc0038I Pass   3: suminf.    2.84284 (23) obj. 2.09004e+08 iterations 5
Cbc0038I Pass   4: suminf.    0.93118 (7) obj. 2.09004e+08 iterations 88
Cbc0038I Pass   5: suminf.    0.53194 (2) obj. 2.09004e+08 iterations 41
Cbc0038I Pass   6: suminf.    0.87662 (2) obj. 2.09004e+08 iterations 9
Cbc0038I Pass   7: suminf.    0.53543 (2) obj. 2.09004e+08 iterations 4
Cbc0038I Pass   8: suminf.    0.52277 (2) obj. 2.09004e+08 iterations 52
Cbc0038I Pass   9: suminf.    0.49703 (3) obj. 2.09004e+08 iterations 4
Cbc0038I Pass  10: suminf.    0.51047 (2) obj. 2.09004e+08 iterations 13
Cbc0038I Pass  11: suminf.    0.49514 (2) obj. 2.09004e+08 iterations 2
Cbc0038I Pass  12: suminf.    0.86633 (2) obj. 2.09004e+08 iterations 9
Cbc0038I Pass  13: suminf.    0.59687 (2) obj. 2.09004e+08 iterations 64
Cbc0038I Pass  14: suminf.    0.44520 (4) obj. 2.09004e+08 iterations 6
Cbc0038I Pass  15: suminf.    0.06690 (1) obj. 2.09004e+08 iterations 7
Cbc0038I Pass  16: suminf.    0.40402 (1) obj. 2.09004e+08 iterations 7
Cbc0038I Pass  17: suminf.    0.91496 (4) obj. 2.09004e+08 iterations 52
Cbc0038I Pass  18: suminf.    0.91496 (4) obj. 2.09004e+08 iterations 0
Cbc0038I Pass  19: suminf.    0.81445 (3) obj. 2.09004e+08 iterations 7
Cbc0038I Pass  20: suminf.    0.76797 (3) obj. 2.09004e+08 iterations 1
Cbc0038I Pass  21: suminf.    0.77043 (2) obj. 2.09004e+08 iterations 7
Cbc0038I Pass  22: suminf.    0.67295 (2) obj. 2.09004e+08 iterations 5
Cbc0038I Pass  23: suminf.    1.12002 (5) obj. 2.09004e+08 iterations 32
Cbc0038I Pass  24: suminf.    0.47621 (1) obj. 2.09004e+08 iterations 14
Cbc0038I Pass  25: suminf.    0.43127 (1) obj. 2.09004e+08 iterations 6
Cbc0038I Pass  26: suminf.    0.00773 (1) obj. 2.09004e+08 iterations 53
Cbc0038I Pass  27: suminf.    0.00000 (0) obj. 2.09004e+08 iterations 5
Cbc0038I Solution found of 2.09004e+08
Cbc0038I Relaxing continuous gives 2.08424e+08
Cbc0038I Before mini branch and bound, 0 integers at bound fixed and 4168 continuous
Cbc0038I Full problem 132 rows 4422 columns, reduced to 119 rows 236 columns
Cbc0038I Mini branch and bound improved solution from 2.08424e+08 to 1.89471e+08 (0.14 seconds)
Cbc0038I Freeing continuous variables gives a solution of 1.86895e+08
Cbc0038I Round again with cutoff of 1.62638e+08
Cbc0038I Pass  28: suminf.    4.77878 (32) obj. 1.62638e+08 iterations 8
Cbc0038I Pass  29: suminf.    4.29424 (33) obj. 1.62638e+08 iterations 10
Cbc0038I Pass  30: suminf.    3.79215 (20) obj. 1.62638e+08 iterations 87
Cbc0038I Pass  31: suminf.    3.79215 (20) obj. 1.62638e+08 iterations 0
Cbc0038I Pass  32: suminf.    4.09854 (21) obj. 1.62638e+08 iterations 26
Cbc0038I Pass  33: suminf.    4.09854 (21) obj. 1.62638e+08 iterations 0
Cbc0038I Pass  34: suminf.    4.83237 (20) obj. 1.62638e+08 iterations 24
Cbc0038I Pass  35: suminf.    4.83237 (20) obj. 1.62638e+08 iterations 0
Cbc0038I Pass  36: suminf.    4.93090 (19) obj. 1.62638e+08 iterations 19
Cbc0038I Pass  37: suminf.    4.92881 (18) obj. 1.62638e+08 iterations 1
Cbc0038I Pass  38: suminf.    4.44559 (18) obj. 1.62638e+08 iterations 4
Cbc0038I Pass  39: suminf.    4.44559 (18) obj. 1.62638e+08 iterations 0
Cbc0038I Pass  40: suminf.    4.92881 (18) obj. 1.62638e+08 iterations 5
Cbc0038I Pass  41: suminf.    4.04865 (18) obj. 1.62638e+08 iterations 43
Cbc0038I Pass  42: suminf.    3.98934 (17) obj. 1.62638e+08 iterations 1
Cbc0038I Pass  43: suminf.    4.99075 (20) obj. 1.62638e+08 iterations 15
Cbc0038I Pass  44: suminf.    4.99075 (20) obj. 1.62638e+08 iterations 0
Cbc0038I Pass  45: suminf.    4.97189 (21) obj. 1.62638e+08 iterations 9
Cbc0038I Pass  46: suminf.    4.97189 (21) obj. 1.62638e+08 iterations 0
Cbc0038I Pass  47: suminf.    5.24837 (21) obj. 1.62638e+08 iterations 7
Cbc0038I Pass  48: suminf.    5.24837 (21) obj. 1.62638e+08 iterations 0
Cbc0038I Pass  49: suminf.    5.65379 (21) obj. 1.62638e+08 iterations 4
Cbc0038I Pass  50: suminf.    5.11153 (21) obj. 1.62638e+08 iterations 3
Cbc0038I Pass  51: suminf.    5.24837 (21) obj. 1.62638e+08 iterations 4
Cbc0038I Pass  52: suminf.    6.43180 (24) obj. 1.62638e+08 iterations 19
Cbc0038I Pass  53: suminf.    6.43180 (24) obj. 1.62638e+08 iterations 0
Cbc0038I Pass  54: suminf.    6.00660 (23) obj. 1.62638e+08 iterations 8
Cbc0038I Pass  55: suminf.    6.00660 (23) obj. 1.62638e+08 iterations 0
Cbc0038I Pass  56: suminf.    5.65986 (23) obj. 1.62638e+08 iterations 5
Cbc0038I Pass  57: suminf.    5.65986 (23) obj. 1.62638e+08 iterations 0
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 0 integers at bound fixed and 4232 continuous
Cbc0038I Full problem 132 rows 4422 columns, reduced to 84 rows 134 columns
Cbc0038I Mini branch and bound did not improve solution (0.25 seconds)
Cbc0038I After 0.25 seconds - Feasibility pump exiting with objective of 1.86895e+08 - took 0.21 seconds
Cbc0012I Integer solution of 1.8689544e+08 found by feasibility pump after 0 iterations and 0 nodes (0.25 seconds)
Cbc0012I Integer solution of 1.8541521e+08 found by DiveCoefficient after 833 iterations and 0 nodes (1.39 seconds)
Cbc0031I 95 added rows had average density of 119.8
Cbc0013I At root node, 95 cuts changed objective from 65605781 to 1.7285058e+08 in 100 passes
Cbc0014I Cut generator 0 (Probing) - 1 row cuts average 66.0 elements, 0 column cuts (0 active)  in 0.209 seconds - new frequency is -100
Cbc0014I Cut generator 1 (Gomory) - 290 row cuts average 167.4 elements, 0 column cuts (0 active)  in 0.101 seconds - new frequency is -100
Cbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.009 seconds - new frequency is -100
Cbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.002 seconds - new frequency is -100
Cbc0014I Cut generator 4 (MixedIntegerRounding2) - 3 row cuts average 198.7 elements, 0 column cuts (0 active)  in 0.077 seconds - new frequency is -100
Cbc0014I Cut generator 5 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.340 seconds - new frequency is -100
Cbc0014I Cut generator 6 (TwoMirCuts) - 132 row cuts average 134.8 elements, 0 column cuts (0 active)  in 0.024 seconds - new frequency is 1
Cbc0010I After 0 nodes, 1 on tree, 1.8541521e+08 best solution, best possible 1.7285058e+08 (1.41 seconds)
Cbc0012I Integer solution of 1.8482076e+08 found by DiveCoefficient after 865 iterations and 1 nodes (1.46 seconds)
Cbc0012I Integer solution of 1.8454404e+08 found by DiveCoefficient after 885 iterations and 3 nodes (1.57 seconds)
Cbc0012I Integer solution of 1.8441541e+08 found by DiveCoefficient after 905 iterations and 5 nodes (1.65 seconds)
Cbc0012I Integer solution of 1.8428152e+08 found by DiveCoefficient after 925 iterations and 6 nodes (1.68 seconds)
Cbc0012I Integer solution of 1.8407677e+08 found by DiveCoefficient after 928 iterations and 7 nodes (1.71 seconds)
Cbc0012I Integer solution of 1.8303516e+08 found by DiveCoefficient after 944 iterations and 9 nodes (1.77 seconds)
Cbc0012I Integer solution of 1.822666e+08 found by DiveCoefficient after 967 iterations and 11 nodes (1.79 seconds)
Cbc0004I Integer solution of 1.800157e+08 found after 1014 iterations and 25 nodes (1.86 seconds)
Cbc0038I Full problem 132 rows 4422 columns, reduced to 107 rows 2723 columns - 1 fixed gives 107, 2722 - still too large
Cbc0038I Full problem 132 rows 4422 columns, reduced to 107 rows 2722 columns - too large
Cbc0004I Integer solution of 1.7998167e+08 found after 1335 iterations and 66 nodes (2.10 seconds)
Cbc0016I Integer solution of 1.7988273e+08 found by strong branching after 1404 iterations and 73 nodes (2.14 seconds)
Cbc0016I Integer solution of 1.7985321e+08 found by strong branching after 1412 iterations and 73 nodes (2.15 seconds)
Cbc0038I Full problem 132 rows 4422 columns, reduced to 110 rows 2924 columns - 1 fixed gives 110, 2923 - still too large
Cbc0038I Full problem 132 rows 4422 columns, reduced to 110 rows 2923 columns - too large
Cbc0012I Integer solution of 1.797807e+08 found by DiveCoefficient after 1563 iterations and 93 nodes (2.28 seconds)
Cbc0010I After 100 nodes, 8 on tree, 1.797807e+08 best solution, best possible 1.7285058e+08 (2.33 seconds)
Cbc0004I Integer solution of 1.7928167e+08 found after 1677 iterations and 113 nodes (2.39 seconds)
Cbc0004I Integer solution of 1.7911918e+08 found after 1813 iterations and 131 nodes (2.49 seconds)
Cbc0012I Integer solution of 1.788872e+08 found by DiveCoefficient after 2098 iterations and 160 nodes (2.77 seconds)
Cbc0012I Integer solution of 1.7885184e+08 found by DiveCoefficient after 2146 iterations and 165 nodes (2.81 seconds)
Cbc0012I Integer solution of 1.787126e+08 found by DiveCoefficient after 2151 iterations and 166 nodes (2.82 seconds)
Cbc0004I Integer solution of 1.7863755e+08 found after 2176 iterations and 173 nodes (2.84 seconds)
Cbc0012I Integer solution of 1.7850458e+08 found by DiveCoefficient after 2337 iterations and 195 nodes (2.97 seconds)
Cbc0010I After 200 nodes, 12 on tree, 1.7850458e+08 best solution, best possible 1.7285058e+08 (2.99 seconds)
Cbc0004I Integer solution of 1.7847506e+08 found after 2360 iterations and 201 nodes (2.99 seconds)
Cbc0012I Integer solution of 1.7804436e+08 found by DiveCoefficient after 2557 iterations and 220 nodes (3.13 seconds)
Cbc0012I Integer solution of 1.7754533e+08 found by DiveCoefficient after 2653 iterations and 233 nodes (3.24 seconds)
Cbc0012I Integer solution of 1.7741236e+08 found by DiveCoefficient after 2705 iterations and 241 nodes (3.26 seconds)
Cbc0012I Integer solution of 1.7738284e+08 found by DiveCoefficient after 2750 iterations and 246 nodes (3.31 seconds)
Cbc0038I Full problem 132 rows 4422 columns, reduced to 111 rows 2296 columns - 1 fixed gives 111, 2295 - still too large
Cbc0038I Full problem 132 rows 4422 columns, reduced to 111 rows 2295 columns - too large
Cbc0010I After 300 nodes, 4 on tree, 1.7738284e+08 best solution, best possible 1.74877e+08 (3.79 seconds)
Cbc0001I Search completed - best objective 177382839.6296355, took 3503 iterations and 308 nodes (3.87 seconds)
Cbc0032I Strong branching done 1542 times (8499 iterations), fathomed 26 nodes and fixed 185 variables
Cbc0035I Maximum depth 19, 40 variables fixed on reduced cost
Cuts at root node changed objective from 6.56058e+07 to 1.72851e+08
Probing was tried 100 times and created 1 cuts of which 0 were active after adding rounds of cuts (0.209 seconds)
Gomory was tried 100 times and created 290 cuts of which 0 were active after adding rounds of cuts (0.101 seconds)
Knapsack was tried 100 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.009 seconds)
Clique was tried 100 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.002 seconds)
MixedIntegerRounding2 was tried 100 times and created 3 cuts of which 0 were active after adding rounds of cuts (0.077 seconds)
FlowCover was tried 100 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.340 seconds)
TwoMirCuts was tried 315 times and created 144 cuts of which 0 were active after adding rounds of cuts (0.051 seconds)
ZeroHalf was tried 1 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)

Result - Optimal solution found

Objective value:                177382839.62963548
Enumerated nodes:               308
Total iterations:               3503
Time (CPU seconds):             3.49
Time (Wallclock seconds):       3.88

Option for printingOptions changed from normal to all
Total time (CPU seconds):       3.50   (Wallclock seconds):       3.90

