Welcome to the CBC MILP Solver 
Version: 2.10.3 
Build Date: Dec 15 2019 

command line - /home/cdmonsalvea/AI_OR_Workflow/.venv/lib/python3.10/site-packages/pulp/solverdir/cbc/linux/64/cbc /tmp/7d5a20f04fbe49009de661daee309f23-pulp.mps -sec 600 -threads 12 -timeMode elapsed -branch -printingOptions all -solution /tmp/7d5a20f04fbe49009de661daee309f23-pulp.sol (default strategy 1)
At line 2 NAME          MODEL
At line 3 ROWS
At line 265 COLUMNS
At line 85156 RHS
At line 85417 BOUNDS
At line 102448 ENDATA
Problem MODEL has 260 rows, 17030 columns and 33930 elements
Coin0008I MODEL read with 0 errors
seconds was changed from 1e+100 to 600
threads was changed from 0 to 12
Option for timeMode changed from cpu to elapsed
Continuous objective value is 1.3 - 0.01 seconds
Cgl0004I processed model has 260 rows, 17030 columns (17030 integer (17030 of which binary)) and 33930 elements
Cbc0038I Initial state - 130 integers unsatisfied sum - 1
Cbc0038I Pass   1: suminf.    1.00000 (130) obj. 1.3 iterations 0
Cbc0038I Pass   2: suminf.    0.86923 (113) obj. 23.23 iterations 17
Cbc0038I Pass   3: suminf.    0.71538 (93) obj. 49.03 iterations 20
Cbc0038I Pass   4: suminf.    0.56154 (73) obj. 74.83 iterations 20
Cbc0038I Pass   5: suminf.    0.33846 (44) obj. 112.24 iterations 29
Cbc0038I Pass   6: suminf.    0.17692 (23) obj. 139.33 iterations 21
Cbc0038I Pass   7: suminf.    0.08462 (11) obj. 154.81 iterations 12
Cbc0038I Solution found of 169
Cbc0038I Before mini branch and bound, 16900 integers at bound fixed and 0 continuous
Cbc0038I Full problem 260 rows 17030 columns, reduced to 0 rows 0 columns
Cbc0038I Mini branch and bound did not improve solution (0.28 seconds)
Cbc0038I Round again with cutoff of 152.23
Cbc0038I Pass   8: suminf.    1.00000 (130) obj. 1.3 iterations 0
Cbc0038I Pass   9: suminf.    0.87692 (114) obj. 21.94 iterations 16
Cbc0038I Pass  10: suminf.    0.73077 (95) obj. 46.45 iterations 19
Cbc0038I Pass  11: suminf.    0.52308 (68) obj. 81.28 iterations 27
Cbc0038I Pass  12: suminf.    0.39231 (51) obj. 103.21 iterations 17
Cbc0038I Pass  13: suminf.    0.21538 (28) obj. 132.88 iterations 23
Cbc0038I Pass  14: suminf.    0.10001 (14) obj. 152.23 iterations 27
Cbc0038I Pass  15: suminf.    0.10001 (14) obj. 152.23 iterations 0
Cbc0038I Pass  16: suminf.    0.10001 (14) obj. 152.23 iterations 12
Cbc0038I Pass  17: suminf.    0.10001 (14) obj. 152.23 iterations 0
Cbc0038I Pass  18: suminf.    0.95808 (13) obj. 152.23 iterations 25
Cbc0038I Pass  19: suminf.    0.19887 (12) obj. 152.23 iterations 5
Cbc0038I Pass  20: suminf.    0.18348 (11) obj. 152.23 iterations 13
Cbc0038I Pass  21: suminf.    0.18348 (11) obj. 152.23 iterations 0
Cbc0038I Pass  22: suminf.    0.18348 (11) obj. 152.23 iterations 9
Cbc0038I Pass  23: suminf.    0.18348 (11) obj. 152.23 iterations 0
Cbc0038I Pass  24: suminf.    0.18348 (11) obj. 152.23 iterations 11
Cbc0038I Pass  25: suminf.    0.78466 (13) obj. 152.23 iterations 55
Cbc0038I Pass  26: suminf.    0.13077 (11) obj. 152.213 iterations 85
Cbc0038I Pass  27: suminf.    0.14366 (11) obj. 152.23 iterations 78
Cbc0038I Pass  28: suminf.    0.10000 (10) obj. 152.173 iterations 76
Cbc0038I Pass  29: suminf.    0.14366 (10) obj. 152.23 iterations 74
Cbc0038I Pass  30: suminf.    0.58947 (13) obj. 152.23 iterations 61
Cbc0038I Pass  31: suminf.    0.10769 (11) obj. 152.2 iterations 90
Cbc0038I Pass  32: suminf.    0.13066 (11) obj. 152.23 iterations 90
Cbc0038I Pass  33: suminf.    1.10513 (15) obj. 152.23 iterations 89
Cbc0038I Pass  34: suminf.    0.15385 (13) obj. 152.023 iterations 116
Cbc0038I Pass  35: suminf.    0.31311 (13) obj. 152.23 iterations 123
Cbc0038I Pass  36: suminf.    0.13846 (13) obj. 152.003 iterations 125
Cbc0038I Pass  37: suminf.    0.31311 (13) obj. 152.23 iterations 115
Cbc0038I Rounding solution of 127.123 is better than previous of 169

Cbc0038I Before mini branch and bound, 16770 integers at bound fixed and 0 continuous
Cbc0038I Full problem 260 rows 17030 columns, reduced to 59 rows 119 columns
Cbc0038I Mini branch and bound improved solution from 127.123 to 119.772 (0.51 seconds)
Cbc0038I Round again with cutoff of 96.0777
Cbc0038I Pass  37: suminf.    1.00000 (130) obj. 1.3 iterations 0
Cbc0038I Pass  38: suminf.    0.81538 (106) obj. 32.26 iterations 24
Cbc0038I Pass  39: suminf.    0.60000 (78) obj. 68.38 iterations 28
Cbc0038I Pass  40: suminf.    0.50000 (65) obj. 85.15 iterations 13
Cbc0038I Pass  41: suminf.    0.90591 (57) obj. 96.0777 iterations 25
Cbc0038I Pass  42: suminf.    0.43846 (57) obj. 95.47 iterations 1
Cbc0038I Pass  43: suminf.    0.90591 (57) obj. 96.0777 iterations 10
Cbc0038I Pass  44: suminf.    0.43846 (57) obj. 95.47 iterations 1
Cbc0038I Pass  45: suminf.    0.90591 (57) obj. 96.0777 iterations 8
Cbc0038I Pass  46: suminf.    0.43846 (57) obj. 95.47 iterations 1
Cbc0038I Pass  47: suminf.    0.90591 (57) obj. 96.0777 iterations 1
Cbc0038I Pass  48: suminf.    0.51040 (58) obj. 96.0777 iterations 13
Cbc0038I Pass  49: suminf.    0.51040 (58) obj. 96.0777 iterations 3
Cbc0038I Pass  50: suminf.    0.51040 (58) obj. 96.0777 iterations 7
Cbc0038I Pass  51: suminf.    0.51040 (58) obj. 96.0777 iterations 1
Cbc0038I Pass  52: suminf.    0.49502 (57) obj. 96.0777 iterations 7
Cbc0038I Pass  53: suminf.    0.49502 (57) obj. 96.0777 iterations 0
Cbc0038I Pass  54: suminf.    0.49502 (57) obj. 96.0777 iterations 6
Cbc0038I Pass  55: suminf.    0.49502 (57) obj. 96.0777 iterations 1
Cbc0038I Pass  56: suminf.    0.49502 (57) obj. 96.0777 iterations 6
Cbc0038I Pass  57: suminf.    0.71193 (54) obj. 96.0777 iterations 11
Cbc0038I Pass  58: suminf.    0.71193 (54) obj. 96.0777 iterations 7
Cbc0038I Pass  59: suminf.    0.71193 (54) obj. 96.0777 iterations 7
Cbc0038I Pass  60: suminf.    0.71193 (54) obj. 96.0777 iterations 0
Cbc0038I Pass  61: suminf.    0.71193 (54) obj. 96.0777 iterations 7
Cbc0038I Pass  62: suminf.    0.74435 (51) obj. 96.0777 iterations 36
Cbc0038I Pass  63: suminf.    0.74435 (51) obj. 96.0777 iterations 15
Cbc0038I Pass  64: suminf.    0.72896 (51) obj. 96.0777 iterations 10
Cbc0038I Pass  65: suminf.    0.72896 (51) obj. 96.0777 iterations 0
Cbc0038I Pass  66: suminf.    0.75973 (51) obj. 96.0777 iterations 11
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 16875 integers at bound fixed and 0 continuous
Cbc0038I Mini branch and bound did not improve solution (0.68 seconds)
Cbc0038I After 0.68 seconds - Feasibility pump exiting with objective of 119.772 - took 0.49 seconds
Cbc0012I Integer solution of 119.77212 found by feasibility pump after 0 iterations and 0 nodes (0.68 seconds)
Cbc0012I Integer solution of 26.152331 found by DiveCoefficient after 19053 iterations and 0 nodes (11.25 seconds)
Cbc0031I 1190 added rows had average density of 15.164706
Cbc0013I At root node, 1190 cuts changed objective from 1.3 to 23.54363 in 34 passes
Cbc0014I Cut generator 0 (Probing) - 1163 row cuts average 3.6 elements, 0 column cuts (323 active)  in 1.841 seconds - new frequency is 1
Cbc0014I Cut generator 1 (Gomory) - 294 row cuts average 215.5 elements, 0 column cuts (0 active)  in 0.866 seconds - new frequency is 1
Cbc0014I Cut generator 2 (Knapsack) - 2663 row cuts average 2.0 elements, 0 column cuts (0 active)  in 0.154 seconds - new frequency is 1
Cbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.036 seconds - new frequency is -100
Cbc0014I Cut generator 4 (MixedIntegerRounding2) - 1502 row cuts average 8.9 elements, 0 column cuts (0 active)  in 0.150 seconds - new frequency is 1
Cbc0014I Cut generator 5 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.012 seconds - new frequency is -100
Cbc0014I Cut generator 6 (TwoMirCuts) - 220 row cuts average 126.7 elements, 0 column cuts (0 active)  in 0.264 seconds - new frequency is -100
Cbc0010I After 0 nodes, 1 on tree, 26.152331 best solution, best possible 23.54363 (12.18 seconds)
Cbc0012I Integer solution of 24.853577 found by DiveCoefficient after 19583 iterations and 2 nodes (13.09 seconds)
Cbc0012I Integer solution of 24.853577 found by heuristic after 19440 iterations and 1 nodes (13.36 seconds)
Cbc0012I Integer solution of 24.850183 found by DiveCoefficient after 19747 iterations and 2 nodes (13.58 seconds)
Cbc0012I Integer solution of 24.850183 found by heuristic after 20140 iterations and 2 nodes (13.58 seconds)
Cbc0004I Integer solution of 23.571262 found after 20404 iterations and 3 nodes (13.80 seconds)
Cbc0012I Integer solution of 23.571262 found by heuristic after 20447 iterations and 3 nodes (13.80 seconds)
Cbc0004I Integer solution of 23.554427 found after 20713 iterations and 4 nodes (13.96 seconds)
Cbc0012I Integer solution of 23.554427 found by heuristic after 20791 iterations and 5 nodes (13.96 seconds)
Cbc0004I Integer solution of 24.381671 found after 22401 iterations and 4 nodes (14.84 seconds)
Cbc0030I Thread 0 used 4 times,  waiting to start 0.7214191, 4.05806 cpu time, 31 locks, 0.0061612129 locked, 9.059906e-06 waiting for locks
Cbc0030I Thread 1 used 3 times,  waiting to start 1.8716252, 2.346957 cpu time, 21 locks, 0.0055482388 locked, 2.8610229e-06 waiting for locks
Cbc0030I Thread 2 used 1 times,  waiting to start 1.6298101, 2.344485 cpu time, 12 locks, 0.0054142475 locked, 1.001358e-05 waiting for locks
Cbc0030I Thread 3 used 0 times,  waiting to start 2.874795, 0 cpu time, 0 locks, 0 locked, 0 waiting for locks
Cbc0030I Thread 4 used 0 times,  waiting to start 2.851939, 0 cpu time, 0 locks, 0 locked, 0 waiting for locks
Cbc0030I Thread 5 used 0 times,  waiting to start 2.8283539, 0 cpu time, 0 locks, 0 locked, 0 waiting for locks
Cbc0030I Thread 6 used 0 times,  waiting to start 2.8016891, 0 cpu time, 0 locks, 0 locked, 0 waiting for locks
Cbc0030I Thread 7 used 0 times,  waiting to start 2.7759819, 0 cpu time, 0 locks, 0 locked, 0 waiting for locks
Cbc0030I Thread 8 used 0 times,  waiting to start 2.7505789, 0 cpu time, 0 locks, 0 locked, 0 waiting for locks
Cbc0030I Thread 9 used 0 times,  waiting to start 2.724987, 0 cpu time, 0 locks, 0 locked, 0 waiting for locks
Cbc0030I Thread 10 used 0 times,  waiting to start 2.6971431, 0 cpu time, 0 locks, 0 locked, 0 waiting for locks
Cbc0030I Thread 11 used 0 times,  waiting to start 2.6715269, 0 cpu time, 0 locks, 0 locked, 0 waiting for locks
Cbc0030I Main thread 2.100142 waiting for threads,  25 locks, 3.4809113e-05 locked, 4.7683716e-06 waiting for locks
Cbc0001I Search completed - best objective 23.55442718285944, took 23191 iterations and 8 nodes (14.94 seconds)
Cbc0032I Strong branching done 312 times (20011 iterations), fathomed 0 nodes and fixed 0 variables
Cbc0035I Maximum depth 2, 18811 variables fixed on reduced cost
Cuts at root node changed objective from 1.3 to 23.5436
Probing was tried 459 times and created 15270 cuts of which 4199 were active after adding rounds of cuts (24.021 seconds)
Gomory was tried 459 times and created 3822 cuts of which 0 were active after adding rounds of cuts (11.360 seconds)
Knapsack was tried 459 times and created 35291 cuts of which 0 were active after adding rounds of cuts (2.128 seconds)
Clique was tried 442 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.469 seconds)
MixedIntegerRounding2 was tried 459 times and created 19618 cuts of which 0 were active after adding rounds of cuts (2.048 seconds)
FlowCover was tried 442 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.155 seconds)
TwoMirCuts was tried 442 times and created 2860 cuts of which 0 were active after adding rounds of cuts (3.427 seconds)
ZeroHalf was tried 13 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.007 seconds)
ImplicationCuts was tried 17 times and created 279 cuts of which 0 were active after adding rounds of cuts (0.044 seconds)

Result - Optimal solution found

Objective value:                23.55442718
Enumerated nodes:               8
Total iterations:               23191
Time (CPU seconds):             16.66
Time (Wallclock seconds):       14.98

Option for printingOptions changed from normal to all
Total time (CPU seconds):       16.68   (Wallclock seconds):       15.02

