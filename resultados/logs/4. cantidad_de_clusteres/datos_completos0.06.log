Welcome to the CBC MILP Solver 
Version: 2.10.3 
Build Date: Dec 15 2019 

command line - /home/cdmonsalvea/AI_OR_Workflow/.venv/lib/python3.10/site-packages/pulp/solverdir/cbc/linux/64/cbc /tmp/76229e98e38f422ca705bf966f6d9b84-pulp.mps -sec 60 -threads 12 -timeMode elapsed -branch -printingOptions all -solution /tmp/76229e98e38f422ca705bf966f6d9b84-pulp.sol (default strategy 1)
At line 2 NAME          MODEL
At line 3 ROWS
At line 55 COLUMNS
At line 3256 RHS
At line 3307 BOUNDS
At line 3958 ENDATA
Problem MODEL has 50 rows, 650 columns and 1275 elements
Coin0008I MODEL read with 0 errors
seconds was changed from 1e+100 to 60
threads was changed from 0 to 12
Option for timeMode changed from cpu to elapsed
Continuous objective value is 1.05862 - 0.00 seconds
Cgl0004I processed model has 50 rows, 650 columns (650 integer (650 of which binary)) and 1275 elements
Cbc0038I Initial state - 25 integers unsatisfied sum - 1
Cbc0038I Pass   1: suminf.    1.00000 (25) obj. 1.05862 iterations 0
Cbc0038I Pass   2: suminf.    0.48000 (12) obj. 14.2702 iterations 13
Cbc0038I Solution found of 26.4655
Cbc0038I Before mini branch and bound, 625 integers at bound fixed and 0 continuous
Cbc0038I Full problem 50 rows 650 columns, reduced to 0 rows 0 columns
Cbc0038I Mini branch and bound did not improve solution (0.01 seconds)
Cbc0038I Round again with cutoff of 23.9248
Cbc0038I Pass   3: suminf.    1.00000 (25) obj. 1.05862 iterations 0
Cbc0038I Pass   4: suminf.    0.24000 (6) obj. 20.3679 iterations 19
Cbc0038I Pass   5: suminf.    0.56001 (3) obj. 23.9248 iterations 9
Cbc0038I Pass   6: suminf.    0.56001 (3) obj. 23.9248 iterations 0
Cbc0038I Pass   7: suminf.    0.56001 (3) obj. 23.9248 iterations 1
Cbc0038I Pass   8: suminf.    0.56001 (3) obj. 23.9248 iterations 0
Cbc0038I Pass   9: suminf.    0.56001 (3) obj. 23.9248 iterations 1
Cbc0038I Pass  10: suminf.    0.80039 (5) obj. 23.9248 iterations 45
Cbc0038I Pass  11: suminf.    0.25494 (4) obj. 23.9248 iterations 8
Cbc0038I Pass  12: suminf.    0.25494 (3) obj. 23.9248 iterations 4
Cbc0038I Pass  13: suminf.    0.25494 (3) obj. 23.9248 iterations 0
Cbc0038I Pass  14: suminf.    0.25494 (3) obj. 23.9248 iterations 1
Cbc0038I Pass  15: suminf.    0.25494 (3) obj. 23.9248 iterations 0
Cbc0038I Pass  16: suminf.    0.25494 (3) obj. 23.9248 iterations 1
Cbc0038I Pass  17: suminf.    0.62605 (2) obj. 23.9248 iterations 48
Cbc0038I Solution found of 23.7542
Cbc0038I Before mini branch and bound, 582 integers at bound fixed and 0 continuous
Cbc0038I Full problem 50 rows 650 columns, reduced to 23 rows 46 columns
Cbc0038I Mini branch and bound improved solution from 23.7542 to 16.027 (0.02 seconds)
Cbc0038I Round again with cutoff of 13.0333
Cbc0038I Pass  18: suminf.    1.00000 (25) obj. 1.05862 iterations 0
Cbc0038I Pass  19: suminf.    0.72838 (14) obj. 13.0333 iterations 12
Cbc0038I Pass  20: suminf.    0.72838 (14) obj. 13.0333 iterations 0
Cbc0038I Pass  21: suminf.    0.72838 (14) obj. 13.0333 iterations 8
Cbc0038I Pass  22: suminf.    0.72838 (14) obj. 13.0333 iterations 0
Cbc0038I Pass  23: suminf.    0.72838 (14) obj. 13.0333 iterations 1
Cbc0038I Pass  24: suminf.    0.72838 (14) obj. 13.0333 iterations 0
Cbc0038I Pass  25: suminf.    0.72838 (14) obj. 13.0333 iterations 1
Cbc0038I Pass  26: suminf.    0.92664 (12) obj. 13.0333 iterations 25
Cbc0038I Pass  27: suminf.    0.92664 (12) obj. 13.0333 iterations 9
Cbc0038I Pass  28: suminf.    1.03336 (12) obj. 13.0333 iterations 4
Cbc0038I Pass  29: suminf.    0.60000 (12) obj. 12.5746 iterations 11
Cbc0038I Pass  30: suminf.    1.03336 (12) obj. 13.0333 iterations 9
Cbc0038I Pass  31: suminf.    0.86210 (13) obj. 13.0333 iterations 41
Cbc0038I Pass  32: suminf.    0.64000 (13) obj. 12.7982 iterations 18
Cbc0038I Pass  33: suminf.    0.86210 (13) obj. 13.0333 iterations 22
Cbc0038I Pass  34: suminf.    0.64000 (13) obj. 12.7982 iterations 19
Cbc0038I Pass  35: suminf.    1.15256 (12) obj. 13.0333 iterations 60
Cbc0038I Pass  36: suminf.    0.60000 (10) obj. 12.9141 iterations 26
Cbc0038I Pass  37: suminf.    0.71259 (10) obj. 13.0333 iterations 23
Cbc0038I Pass  38: suminf.    0.80446 (10) obj. 13.0333 iterations 47
Cbc0038I Pass  39: suminf.    0.56000 (10) obj. 12.7745 iterations 23
Cbc0038I Pass  40: suminf.    0.80446 (9) obj. 13.0333 iterations 30
Cbc0038I Pass  41: suminf.    0.56000 (9) obj. 12.7745 iterations 22
Cbc0038I Pass  42: suminf.    0.80446 (9) obj. 13.0333 iterations 25
Cbc0038I Pass  43: suminf.    0.66271 (9) obj. 13.0333 iterations 45
Cbc0038I Pass  44: suminf.    0.52000 (8) obj. 12.8823 iterations 32
Cbc0038I Pass  45: suminf.    0.66271 (8) obj. 13.0333 iterations 34
Cbc0038I Pass  46: suminf.    0.53247 (10) obj. 13.0333 iterations 32
Cbc0038I Pass  47: suminf.    0.52000 (9) obj. 13.0201 iterations 24
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 544 integers at bound fixed and 0 continuous
Cbc0038I Full problem 50 rows 650 columns, reduced to 40 rows 99 columns
Cbc0038I Mini branch and bound improved solution from 16.027 to 12.9339 (0.05 seconds)
Cbc0038I Round again with cutoff of 9.37134
Cbc0038I Pass  47: suminf.    1.00000 (25) obj. 1.05862 iterations 0
Cbc0038I Pass  48: suminf.    0.85241 (17) obj. 9.37134 iterations 9
Cbc0038I Pass  49: suminf.    0.68000 (17) obj. 9.18883 iterations 1
Cbc0038I Pass  50: suminf.    0.85241 (17) obj. 9.37134 iterations 8
Cbc0038I Pass  51: suminf.    0.68000 (17) obj. 9.18883 iterations 1
Cbc0038I Pass  52: suminf.    1.13346 (12) obj. 9.37134 iterations 26
Cbc0038I Pass  53: suminf.    0.56000 (10) obj. 9.27814 iterations 14
Cbc0038I Pass  54: suminf.    0.71196 (11) obj. 9.37134 iterations 15
Cbc0038I Pass  55: suminf.    0.71196 (11) obj. 9.37134 iterations 0
Cbc0038I Pass  56: suminf.    0.64804 (10) obj. 9.37134 iterations 7
Cbc0038I Pass  57: suminf.    0.56000 (10) obj. 9.27814 iterations 16
Cbc0038I Pass  58: suminf.    1.25507 (16) obj. 9.37134 iterations 29
Cbc0038I Pass  59: suminf.    0.68000 (14) obj. 9.31898 iterations 12
Cbc0038I Pass  60: suminf.    0.72946 (12) obj. 9.37134 iterations 18
Cbc0038I Pass  61: suminf.    0.68000 (12) obj. 9.31898 iterations 16
Cbc0038I Pass  62: suminf.    0.72946 (12) obj. 9.37134 iterations 12
Cbc0038I Pass  63: suminf.    1.01552 (11) obj. 9.37134 iterations 30
Cbc0038I Pass  64: suminf.    0.76000 (10) obj. 9.10085 iterations 21
Cbc0038I Pass  65: suminf.    1.01552 (10) obj. 9.37134 iterations 19
Cbc0038I Pass  66: suminf.    0.76000 (10) obj. 9.10085 iterations 20
Cbc0038I Pass  67: suminf.    1.49522 (13) obj. 9.37134 iterations 68
Cbc0038I Pass  68: suminf.    0.60000 (11) obj. 9.15759 iterations 37
Cbc0038I Pass  69: suminf.    0.80191 (11) obj. 9.37134 iterations 32
Cbc0038I Pass  70: suminf.    0.68000 (11) obj. 9.24228 iterations 28
Cbc0038I Pass  71: suminf.    1.04107 (14) obj. 9.37134 iterations 48
Cbc0038I Pass  72: suminf.    0.68000 (13) obj. 8.9891 iterations 29
Cbc0038I Pass  73: suminf.    1.04107 (13) obj. 9.37134 iterations 21
Cbc0038I Pass  74: suminf.    1.16437 (16) obj. 9.37134 iterations 48
Cbc0038I Pass  75: suminf.    1.16437 (16) obj. 9.37134 iterations 22
Cbc0038I Pass  76: suminf.    1.16437 (16) obj. 9.37134 iterations 8
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 550 integers at bound fixed and 0 continuous
Cbc0038I Full problem 50 rows 650 columns, reduced to 36 rows 88 columns
Cbc0038I Mini branch and bound improved solution from 12.9339 to 12.7007 (0.08 seconds)
Cbc0038I Round again with cutoff of 6.87752
Cbc0038I Pass  76: suminf.    1.00000 (25) obj. 1.05862 iterations 0
Cbc0038I Pass  77: suminf.    1.02332 (20) obj. 6.87752 iterations 6
Cbc0038I Pass  78: suminf.    1.02332 (20) obj. 6.87752 iterations 0
Cbc0038I Pass  79: suminf.    1.02332 (20) obj. 6.87752 iterations 3
Cbc0038I Pass  80: suminf.    1.02332 (20) obj. 6.87752 iterations 0
Cbc0038I Pass  81: suminf.    1.02332 (20) obj. 6.87752 iterations 1
Cbc0038I Pass  82: suminf.    1.02332 (20) obj. 6.87752 iterations 0
Cbc0038I Pass  83: suminf.    1.02332 (20) obj. 6.87752 iterations 1
Cbc0038I Pass  84: suminf.    1.23931 (18) obj. 6.87752 iterations 12
Cbc0038I Pass  85: suminf.    1.23931 (18) obj. 6.87752 iterations 3
Cbc0038I Pass  86: suminf.    1.23931 (18) obj. 6.87752 iterations 4
Cbc0038I Pass  87: suminf.    1.23931 (18) obj. 6.87752 iterations 0
Cbc0038I Pass  88: suminf.    1.15931 (17) obj. 6.87752 iterations 5
Cbc0038I Pass  89: suminf.    1.15931 (17) obj. 6.87752 iterations 0
Cbc0038I Pass  90: suminf.    1.15931 (17) obj. 6.87752 iterations 5
Cbc0038I Pass  91: suminf.    1.15931 (17) obj. 6.87752 iterations 0
Cbc0038I Pass  92: suminf.    1.15931 (17) obj. 6.87752 iterations 3
Cbc0038I Pass  93: suminf.    1.11907 (17) obj. 6.87752 iterations 15
Cbc0038I Pass  94: suminf.    1.11907 (17) obj. 6.87752 iterations 5
Cbc0038I Pass  95: suminf.    0.95907 (16) obj. 6.87752 iterations 5
Cbc0038I Pass  96: suminf.    0.95907 (16) obj. 6.87752 iterations 0
Cbc0038I Pass  97: suminf.    1.03907 (16) obj. 6.87752 iterations 3
Cbc0038I Pass  98: suminf.    1.03907 (16) obj. 6.87752 iterations 0
Cbc0038I Pass  99: suminf.    0.95907 (16) obj. 6.87752 iterations 5
Cbc0038I Pass 100: suminf.    1.06916 (15) obj. 6.87752 iterations 19
Cbc0038I Pass 101: suminf.    0.72000 (15) obj. 6.50789 iterations 11
Cbc0038I Pass 102: suminf.    1.06916 (15) obj. 6.87752 iterations 14
Cbc0038I Pass 103: suminf.    0.76000 (15) obj. 6.55024 iterations 11
Cbc0038I Pass 104: suminf.    0.90684 (14) obj. 6.87752 iterations 31
Cbc0038I Pass 105: suminf.    0.90684 (14) obj. 6.87752 iterations 17
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 590 integers at bound fixed and 0 continuous
Cbc0038I Mini branch and bound did not improve solution (0.09 seconds)
Cbc0038I After 0.09 seconds - Feasibility pump exiting with objective of 12.7007 - took 0.08 seconds
Cbc0012I Integer solution of 12.700682 found by feasibility pump after 0 iterations and 0 nodes (0.09 seconds)
Cbc0012I Integer solution of 8.4600315 found by DiveCoefficient after 449 iterations and 0 nodes (0.18 seconds)
Cbc0031I 119 added rows had average density of 16.184874
Cbc0013I At root node, 119 cuts changed objective from 1.0586207 to 8.4600285 in 10 passes
Cbc0014I Cut generator 0 (Probing) - 351 row cuts average 2.2 elements, 0 column cuts (0 active)  in 0.016 seconds - new frequency is 1
Cbc0014I Cut generator 1 (Gomory) - 90 row cuts average 86.0 elements, 0 column cuts (0 active)  in 0.012 seconds - new frequency is 1
Cbc0014I Cut generator 2 (Knapsack) - 145 row cuts average 2.2 elements, 0 column cuts (0 active)  in 0.006 seconds - new frequency is 1
Cbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100
Cbc0014I Cut generator 4 (MixedIntegerRounding2) - 118 row cuts average 15.9 elements, 0 column cuts (0 active)  in 0.004 seconds - new frequency is 1
Cbc0014I Cut generator 5 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100
Cbc0014I Cut generator 6 (TwoMirCuts) - 139 row cuts average 97.6 elements, 0 column cuts (0 active)  in 0.011 seconds - new frequency is 1
Cbc0014I Cut generator 7 (ZeroHalf) - 56 row cuts average 7.8 elements, 0 column cuts (0 active)  in 0.009 seconds - new frequency is 1
Cbc0030I Thread 0 used 0 times,  waiting to start 0.03361702, 0 cpu time, 0 locks, 0 locked, 0 waiting for locks
Cbc0030I Thread 1 used 0 times,  waiting to start 0.031036854, 0 cpu time, 0 locks, 0 locked, 0 waiting for locks
Cbc0030I Thread 2 used 0 times,  waiting to start 0.028149843, 0 cpu time, 0 locks, 0 locked, 0 waiting for locks
Cbc0030I Thread 3 used 0 times,  waiting to start 0.025452137, 0 cpu time, 0 locks, 0 locked, 0 waiting for locks
Cbc0030I Thread 4 used 0 times,  waiting to start 0.022777081, 0 cpu time, 0 locks, 0 locked, 0 waiting for locks
Cbc0030I Thread 5 used 0 times,  waiting to start 0.019794941, 0 cpu time, 0 locks, 0 locked, 0 waiting for locks
Cbc0030I Thread 6 used 0 times,  waiting to start 0.017141819, 0 cpu time, 0 locks, 0 locked, 0 waiting for locks
Cbc0030I Thread 7 used 0 times,  waiting to start 0.014477968, 0 cpu time, 0 locks, 0 locked, 0 waiting for locks
Cbc0030I Thread 8 used 0 times,  waiting to start 0.011443138, 0 cpu time, 0 locks, 0 locked, 0 waiting for locks
Cbc0030I Thread 9 used 0 times,  waiting to start 0.0083639622, 0 cpu time, 0 locks, 0 locked, 0 waiting for locks
Cbc0030I Thread 10 used 0 times,  waiting to start 0.0052170753, 0 cpu time, 0 locks, 0 locked, 0 waiting for locks
Cbc0030I Thread 11 used 0 times,  waiting to start 0.0020809174, 0 cpu time, 0 locks, 0 locked, 0 waiting for locks
Cbc0030I Main thread 0 waiting for threads,  1 locks, 6.9141388e-06 locked, 9.5367432e-07 waiting for locks
Cbc0001I Search completed - best objective 8.46003145535353, took 449 iterations and 0 nodes (0.23 seconds)
Cbc0035I Maximum depth 0, 0 variables fixed on reduced cost
Cuts at root node changed objective from 1.05862 to 8.46003
Probing was tried 130 times and created 4563 cuts of which 0 were active after adding rounds of cuts (0.210 seconds)
Gomory was tried 130 times and created 1170 cuts of which 0 were active after adding rounds of cuts (0.160 seconds)
Knapsack was tried 130 times and created 1885 cuts of which 0 were active after adding rounds of cuts (0.080 seconds)
Clique was tried 130 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.005 seconds)
MixedIntegerRounding2 was tried 130 times and created 1534 cuts of which 0 were active after adding rounds of cuts (0.051 seconds)
FlowCover was tried 130 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.003 seconds)
TwoMirCuts was tried 130 times and created 1807 cuts of which 0 were active after adding rounds of cuts (0.146 seconds)
ZeroHalf was tried 130 times and created 728 cuts of which 0 were active after adding rounds of cuts (0.113 seconds)

Result - Optimal solution found

Objective value:                8.46003146
Enumerated nodes:               0
Total iterations:               449
Time (CPU seconds):             0.21
Time (Wallclock seconds):       0.23

Option for printingOptions changed from normal to all
Total time (CPU seconds):       0.21   (Wallclock seconds):       0.24

