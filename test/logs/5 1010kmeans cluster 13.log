Welcome to the CBC MILP Solver 
Version: 2.10.3 
Build Date: Dec 15 2019 

command line - /home/cdmonsalvea/tesis/AI_OR_Workflow/.venv/lib/python3.10/site-packages/pulp/solverdir/cbc/linux/64/cbc /tmp/051156d8fd7e439689d023ce80a14db3-pulp.mps -sec 3600 -threads 12 -timeMode elapsed -branch -printingOptions all -solution /tmp/051156d8fd7e439689d023ce80a14db3-pulp.sol (default strategy 1)
At line 2 NAME          MODEL
At line 3 ROWS
At line 125 COLUMNS
At line 646 RHS
At line 767 BOUNDS
At line 878 ENDATA
Problem MODEL has 120 rows, 110 columns and 400 elements
Coin0008I MODEL read with 0 errors
seconds was changed from 1e+100 to 3600
threads was changed from 0 to 12
Option for timeMode changed from cpu to elapsed
Continuous objective value is 9.2993e+06 - 0.00 seconds
Cgl0003I 0 fixed, 0 tightened bounds, 26 strengthened rows, 0 substitutions
Cgl0004I processed model has 119 rows, 110 columns (10 integer (10 of which binary)) and 399 elements
Cbc0038I Initial state - 3 integers unsatisfied sum - 1.25418
Cbc0038I Pass   1: suminf.    0.29005 (1) obj. 2.42715e+07 iterations 25
Cbc0038I Solution found of 3.79166e+07
Cbc0038I Relaxing continuous gives 3.54966e+07
Cbc0038I Before mini branch and bound, 7 integers at bound fixed and 76 continuous
Cbc0038I Full problem 119 rows 110 columns, reduced to 7 rows 8 columns
Cbc0038I Mini branch and bound improved solution from 3.54966e+07 to 3.01106e+07 (0.02 seconds)
Cbc0038I Round again with cutoff of 2.93626e+07
Cbc0038I Pass   2: suminf.    0.29005 (1) obj. 2.42715e+07 iterations 0
Cbc0038I Pass   3: suminf.    0.33003 (1) obj. 2.93626e+07 iterations 32
Cbc0038I Pass   4: suminf.    0.16202 (1) obj. 2.93626e+07 iterations 14
Cbc0038I Pass   5: suminf.    0.00000 (0) obj. 2.89302e+07 iterations 13
Cbc0038I Solution found of 2.89302e+07
Cbc0038I Relaxing continuous gives 2.64259e+07
Cbc0038I Before mini branch and bound, 5 integers at bound fixed and 67 continuous
Cbc0038I Full problem 119 rows 110 columns, reduced to 34 rows 35 columns
Cbc0038I Mini branch and bound improved solution from 2.64259e+07 to 2.59519e+07 (0.04 seconds)
Cbc0038I Round again with cutoff of 2.52876e+07
Cbc0038I Pass   6: suminf.    0.29005 (1) obj. 2.42715e+07 iterations 0
Cbc0038I Pass   7: suminf.    0.44500 (1) obj. 2.52876e+07 iterations 27
Cbc0038I Pass   8: suminf.    0.43204 (1) obj. 2.51601e+07 iterations 36
Cbc0038I Pass   9: suminf.    0.42407 (1) obj. 2.52876e+07 iterations 34
Cbc0038I Pass  10: suminf.    0.43204 (1) obj. 2.52876e+07 iterations 35
Cbc0038I Pass  11: suminf.    0.29005 (1) obj. 2.52876e+07 iterations 2
Cbc0038I Pass  12: suminf.    0.42280 (1) obj. 2.52876e+07 iterations 25
Cbc0038I Pass  13: suminf.    0.29005 (1) obj. 2.46746e+07 iterations 21
Cbc0038I Pass  14: suminf.    0.14807 (1) obj. 2.52876e+07 iterations 9
Cbc0038I Pass  15: suminf.    0.25308 (1) obj. 2.52876e+07 iterations 26
Cbc0038I Pass  16: suminf.    0.14807 (1) obj. 2.43336e+07 iterations 28
Cbc0038I Pass  17: suminf.    0.14807 (1) obj. 2.43336e+07 iterations 0
Cbc0038I Pass  18: suminf.    0.25225 (1) obj. 2.52876e+07 iterations 39
Cbc0038I Pass  19: suminf.    0.00608 (1) obj. 2.32005e+07 iterations 25
Cbc0038I Pass  20: suminf.    0.12510 (1) obj. 2.52876e+07 iterations 32
Cbc0038I Pass  21: suminf.    0.00608 (1) obj. 2.32005e+07 iterations 30
Cbc0038I Pass  22: suminf.    0.12510 (1) obj. 2.52876e+07 iterations 35
Cbc0038I Pass  23: suminf.    0.14807 (1) obj. 2.43336e+07 iterations 27
Cbc0038I Pass  24: suminf.    0.25308 (1) obj. 2.52876e+07 iterations 22
Cbc0038I Pass  25: suminf.    0.14807 (1) obj. 2.43336e+07 iterations 28
Cbc0038I Pass  26: suminf.    0.43227 (1) obj. 2.52876e+07 iterations 22
Cbc0038I Pass  27: suminf.    0.45724 (1) obj. 2.52876e+07 iterations 18
Cbc0038I Pass  28: suminf.    0.43227 (1) obj. 2.52876e+07 iterations 58
Cbc0038I Pass  29: suminf.    0.42440 (1) obj. 2.52876e+07 iterations 8
Cbc0038I Pass  30: suminf.    0.31602 (1) obj. 2.52876e+07 iterations 15
Cbc0038I Pass  31: suminf.    0.42440 (1) obj. 2.52876e+07 iterations 46
Cbc0038I Pass  32: suminf.    0.42440 (1) obj. 2.52876e+07 iterations 0
Cbc0038I Pass  33: suminf.    0.43225 (1) obj. 2.52876e+07 iterations 20
Cbc0038I Pass  34: suminf.    0.44743 (1) obj. 2.52876e+07 iterations 15
Cbc0038I Pass  35: suminf.    0.43225 (1) obj. 2.52876e+07 iterations 20
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 1 integers at bound fixed and 54 continuous
Cbc0038I Full problem 119 rows 110 columns, reduced to 64 rows 55 columns
Cbc0038I Mini branch and bound improved solution from 2.59519e+07 to 2.59045e+07 (0.09 seconds)
Cbc0038I Round again with cutoff of 2.44905e+07
Cbc0038I Pass  35: suminf.    0.29005 (1) obj. 2.42715e+07 iterations 0
Cbc0038I Pass  36: suminf.    0.40040 (1) obj. 2.44905e+07 iterations 25
Cbc0038I Pass  37: suminf.    0.43356 (1) obj. 2.44905e+07 iterations 34
Cbc0038I Pass  38: suminf.    0.46641 (1) obj. 2.44905e+07 iterations 17
Cbc0038I Pass  39: suminf.    0.43356 (1) obj. 2.44905e+07 iterations 45
Cbc0038I Pass  40: suminf.    0.43443 (1) obj. 2.44905e+07 iterations 22
Cbc0038I Pass  41: suminf.    0.49986 (1) obj. 2.44905e+07 iterations 16
Cbc0038I Pass  42: suminf.    0.43443 (1) obj. 2.44905e+07 iterations 31
Cbc0038I Pass  43: suminf.    0.29502 (1) obj. 2.44905e+07 iterations 25
Cbc0038I Pass  44: suminf.    0.30292 (1) obj. 2.44905e+07 iterations 3
Cbc0038I Pass  45: suminf.    0.29502 (1) obj. 2.44905e+07 iterations 6
Cbc0038I Pass  46: suminf.    0.29530 (1) obj. 2.44905e+07 iterations 19
Cbc0038I Pass  47: suminf.    0.29176 (1) obj. 2.44905e+07 iterations 19
Cbc0038I Pass  48: suminf.    0.33511 (1) obj. 2.44905e+07 iterations 12
Cbc0038I Pass  49: suminf.    0.37098 (1) obj. 2.44905e+07 iterations 8
Cbc0038I Pass  50: suminf.    0.29030 (1) obj. 2.44905e+07 iterations 20
Cbc0038I Pass  51: suminf.    0.37098 (1) obj. 2.44905e+07 iterations 16
Cbc0038I Pass  52: suminf.    0.42234 (1) obj. 2.44905e+07 iterations 45
Cbc0038I Pass  53: suminf.    0.35318 (1) obj. 2.44905e+07 iterations 19
Cbc0038I Pass  54: suminf.    0.42234 (1) obj. 2.44905e+07 iterations 27
Cbc0038I Pass  55: suminf.    0.51092 (2) obj. 2.44905e+07 iterations 46
Cbc0038I Pass  56: suminf.    0.21417 (1) obj. 2.44905e+07 iterations 5
Cbc0038I Pass  57: suminf.    0.27901 (1) obj. 2.44905e+07 iterations 25
Cbc0038I Pass  58: suminf.    0.36474 (1) obj. 2.44905e+07 iterations 35
Cbc0038I Pass  59: suminf.    0.42162 (1) obj. 2.44905e+07 iterations 31
Cbc0038I Pass  60: suminf.    0.36474 (1) obj. 2.44905e+07 iterations 16
Cbc0038I Pass  61: suminf.    0.48822 (1) obj. 2.44905e+07 iterations 8
Cbc0038I Pass  62: suminf.    0.43468 (1) obj. 2.44905e+07 iterations 20
Cbc0038I Pass  63: suminf.    0.48822 (1) obj. 2.44905e+07 iterations 18
Cbc0038I Pass  64: suminf.    0.33397 (1) obj. 2.44905e+07 iterations 24
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 0 integers at bound fixed and 46 continuous
Cbc0038I Full problem 119 rows 110 columns, reduced to 73 rows 64 columns
Cbc0038I Mini branch and bound did not improve solution (0.17 seconds)
Cbc0038I After 0.17 seconds - Feasibility pump exiting with objective of 2.59045e+07 - took 0.12 seconds
Cbc0012I Integer solution of 25904469 found by feasibility pump after 0 iterations and 0 nodes (0.17 seconds)
Cbc0038I Full problem 119 rows 110 columns, reduced to 86 rows 77 columns
Cbc0031I 12 added rows had average density of 92.5
Cbc0013I At root node, 12 cuts changed objective from 22630633 to 23175131 in 53 passes
Cbc0014I Cut generator 0 (Probing) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.012 seconds - new frequency is -100
Cbc0014I Cut generator 1 (Gomory) - 242 row cuts average 109.5 elements, 0 column cuts (0 active)  in 0.015 seconds - new frequency is 1
Cbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.007 seconds - new frequency is -100
Cbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.001 seconds - new frequency is -100
Cbc0014I Cut generator 4 (MixedIntegerRounding2) - 28 row cuts average 34.1 elements, 0 column cuts (0 active)  in 0.011 seconds - new frequency is 1
Cbc0014I Cut generator 5 (FlowCover) - 2 row cuts average 3.0 elements, 0 column cuts (0 active)  in 0.017 seconds - new frequency is -100
Cbc0014I Cut generator 6 (TwoMirCuts) - 43 row cuts average 95.4 elements, 0 column cuts (0 active)  in 0.005 seconds - new frequency is 1
Cbc0010I After 0 nodes, 1 on tree, 25904469 best solution, best possible 23175131 (0.49 seconds)
Cbc0012I Integer solution of 25875704 found by rounding after 789 iterations and 3 nodes (0.53 seconds)
Cbc0012I Integer solution of 25875704 found by heuristic after 727 iterations and 2 nodes (0.53 seconds)
Cbc0030I Thread 0 used 15 times,  waiting to start 0.1703639,  83 locks, 0.00066018105 locked, 0.0033268929 waiting for locks
Cbc0030I Thread 1 used 13 times,  waiting to start 0.19830608,  71 locks, 0.00059342384 locked, 0.0074789524 waiting for locks
Cbc0030I Thread 2 used 7 times,  waiting to start 0.22143006,  37 locks, 0.00034213066 locked, 0.00011968613 waiting for locks
Cbc0030I Thread 3 used 6 times,  waiting to start 0.20373988,  30 locks, 0.00015354156 locked, 0.0010445118 waiting for locks
Cbc0030I Thread 4 used 6 times,  waiting to start 0.20998287,  30 locks, 0.0001616478 locked, 4.6014786e-05 waiting for locks
Cbc0030I Thread 5 used 6 times,  waiting to start 0.20130968,  32 locks, 0.00018715858 locked, 0.0057659149 waiting for locks
Cbc0030I Thread 6 used 5 times,  waiting to start 0.20362782,  25 locks, 0.00012660027 locked, 0.0057086945 waiting for locks
Cbc0030I Thread 7 used 5 times,  waiting to start 0.19450474,  27 locks, 0.00013065338 locked, 0.00017905235 waiting for locks
Cbc0030I Thread 8 used 3 times,  waiting to start 0.18951106,  16 locks, 0.0060222149 locked, 4.0531158e-06 waiting for locks
Cbc0030I Thread 9 used 4 times,  waiting to start 0.17082191,  20 locks, 6.6518784e-05 locked, 4.1723251e-05 waiting for locks
Cbc0030I Thread 10 used 2 times,  waiting to start 0.16025186,  11 locks, 7.9631805e-05 locked, 2.3365021e-05 waiting for locks
Cbc0030I Thread 11 used 4 times,  waiting to start 0.10648775,  18 locks, 0.00017595291 locked, 2.8610229e-06 waiting for locks
Cbc0030I Main thread 0.10036826 waiting for threads,  161 locks, 0.00011825562 locked, 0.0004336834 waiting for locks
Cbc0001I Search completed - best objective 25875703.92440001, took 1144 iterations and 76 nodes (0.74 seconds)
Cbc0032I Strong branching done 376 times (3461 iterations), fathomed 35 nodes and fixed 0 variables
Cbc0035I Maximum depth 6, 2 variables fixed on reduced cost
Cuts at root node changed objective from 2.26306e+07 to 2.31751e+07
Probing was tried 689 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.159 seconds)
Gomory was tried 754 times and created 3146 cuts of which 0 were active after adding rounds of cuts (0.254 seconds)
Knapsack was tried 689 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.093 seconds)
Clique was tried 689 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.010 seconds)
MixedIntegerRounding2 was tried 754 times and created 366 cuts of which 0 were active after adding rounds of cuts (0.160 seconds)
FlowCover was tried 689 times and created 26 cuts of which 0 were active after adding rounds of cuts (0.218 seconds)
TwoMirCuts was tried 754 times and created 611 cuts of which 0 were active after adding rounds of cuts (0.082 seconds)
ZeroHalf was tried 13 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)

Result - Optimal solution found

Objective value:                25875703.92440001
Enumerated nodes:               76
Total iterations:               1144
Time (CPU seconds):             0.68
Time (Wallclock seconds):       0.78

Option for printingOptions changed from normal to all
Total time (CPU seconds):       0.68   (Wallclock seconds):       0.78

