Welcome to the CBC MILP Solver 
Version: 2.10.3 
Build Date: Dec 15 2019 

command line - /home/cdmonsalvea/AI_OR_Workflow/.venv/lib/python3.10/site-packages/pulp/solverdir/cbc/linux/64/cbc /tmp/1c6772e0bbfc411b991419a8fac245ac-pulp.mps -sec 3600 -timeMode elapsed -branch -printingOptions all -solution /tmp/1c6772e0bbfc411b991419a8fac245ac-pulp.sol (default strategy 1)
At line 2 NAME          MODEL
At line 3 ROWS
At line 117 COLUMNS
At line 9694 RHS
At line 9807 BOUNDS
At line 9864 ENDATA
Problem MODEL has 112 rows, 3192 columns and 6328 elements
Coin0008I MODEL read with 0 errors
seconds was changed from 1e+100 to 3600
Option for timeMode changed from cpu to elapsed
Continuous objective value is 1.31668e+07 - 0.00 seconds
Cgl0004I processed model has 112 rows, 3192 columns (56 integer (56 of which binary)) and 6328 elements
Cbc0038I Initial state - 56 integers unsatisfied sum - 4.01716
Cbc0038I Pass   1: suminf.    0.25972 (2) obj. 1.92249e+08 iterations 54
Cbc0038I Pass   2: suminf.    0.25972 (2) obj. 1.92249e+08 iterations 0
Cbc0038I Solution found of 1.97664e+08
Cbc0038I Relaxing continuous gives 1.20211e+08
Cbc0038I Before mini branch and bound, 0 integers at bound fixed and 3026 continuous
Cbc0038I Full problem 112 rows 3192 columns, reduced to 105 rows 156 columns
Cbc0038I Mini branch and bound did not improve solution (0.03 seconds)
Cbc0038I Freeing continuous variables gives a solution of 1.20211e+08
Cbc0038I Round again with cutoff of 1.09506e+08
Cbc0038I Pass   3: suminf.    1.25972 (6) obj. 1.09506e+08 iterations 90
Cbc0038I Pass   4: suminf.    1.25972 (6) obj. 1.09506e+08 iterations 0
Cbc0038I Pass   5: suminf.    0.00000 (0) obj. 1.09506e+08 iterations 26
Cbc0038I Solution found of 1.09506e+08
Cbc0038I Relaxing continuous gives 1.08659e+08
Cbc0038I Before mini branch and bound, 0 integers at bound fixed and 3015 continuous
Cbc0038I Full problem 112 rows 3192 columns, reduced to 106 rows 165 columns
Cbc0038I Mini branch and bound improved solution from 1.08659e+08 to 8.22845e+07 (0.10 seconds)
Cbc0038I Freeing continuous variables gives a solution of 7.47126e+07
Cbc0038I Round again with cutoff of 6.24034e+07
Cbc0038I Pass   6: suminf.    1.86996 (21) obj. 6.24034e+07 iterations 41
Cbc0038I Pass   7: suminf.    1.25972 (21) obj. 6.24034e+07 iterations 20
Cbc0038I Pass   8: suminf.    3.37348 (38) obj. 6.24034e+07 iterations 78
Cbc0038I Pass   9: suminf.    3.37348 (38) obj. 6.24034e+07 iterations 0
Cbc0038I Pass  10: suminf.    2.40354 (37) obj. 6.24034e+07 iterations 37
Cbc0038I Pass  11: suminf.    2.32570 (38) obj. 6.24034e+07 iterations 1
Cbc0038I Pass  12: suminf.    2.78650 (37) obj. 6.24034e+07 iterations 13
Cbc0038I Pass  13: suminf.    2.24621 (36) obj. 6.24034e+07 iterations 11
Cbc0038I Pass  14: suminf.    2.78650 (37) obj. 6.24034e+07 iterations 20
Cbc0038I Pass  15: suminf.    2.56614 (36) obj. 6.24034e+07 iterations 3
Cbc0038I Pass  16: suminf.    2.78650 (37) obj. 6.24034e+07 iterations 7
Cbc0038I Pass  17: suminf.    2.73710 (36) obj. 6.24034e+07 iterations 39
Cbc0038I Pass  18: suminf.    2.60668 (35) obj. 6.24034e+07 iterations 4
Cbc0038I Pass  19: suminf.    2.73710 (36) obj. 6.24034e+07 iterations 4
Cbc0038I Pass  20: suminf.    2.61340 (35) obj. 6.24034e+07 iterations 5
Cbc0038I Pass  21: suminf.    2.73710 (36) obj. 6.24034e+07 iterations 6
Cbc0038I Pass  22: suminf.    2.57992 (35) obj. 6.24034e+07 iterations 3
Cbc0038I Pass  23: suminf.    2.66742 (36) obj. 6.24034e+07 iterations 5
Cbc0038I Pass  24: suminf.    2.89833 (37) obj. 6.24034e+07 iterations 38
Cbc0038I Pass  25: suminf.    2.78723 (38) obj. 6.24034e+07 iterations 1
Cbc0038I Pass  26: suminf.    2.77636 (37) obj. 6.24034e+07 iterations 7
Cbc0038I Pass  27: suminf.    2.77636 (37) obj. 6.24034e+07 iterations 15
Cbc0038I Pass  28: suminf.    2.73503 (37) obj. 6.24034e+07 iterations 3
Cbc0038I Pass  29: suminf.    2.77636 (37) obj. 6.24034e+07 iterations 6
Cbc0038I Pass  30: suminf.    2.57992 (35) obj. 6.24034e+07 iterations 4
Cbc0038I Pass  31: suminf.    2.73710 (36) obj. 6.24034e+07 iterations 6
Cbc0038I Pass  32: suminf.    2.79648 (37) obj. 6.24034e+07 iterations 39
Cbc0038I Pass  33: suminf.    2.69000 (37) obj. 6.24034e+07 iterations 3
Cbc0038I Pass  34: suminf.    2.65111 (36) obj. 6.24034e+07 iterations 7
Cbc0038I Pass  35: suminf.    2.31263 (36) obj. 6.24034e+07 iterations 9
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 0 integers at bound fixed and 3024 continuous
Cbc0038I Full problem 112 rows 3192 columns, reduced to 89 rows 140 columns
Cbc0038I Mini branch and bound did not improve solution (0.15 seconds)
Cbc0038I After 0.15 seconds - Feasibility pump exiting with objective of 7.47126e+07 - took 0.10 seconds
Cbc0012I Integer solution of 74712561 found by feasibility pump after 0 iterations and 0 nodes (0.15 seconds)
Cbc0012I Integer solution of 74594488 found by DiveCoefficient after 209 iterations and 0 nodes (0.32 seconds)
Cbc0031I 92 added rows had average density of 112.70652
Cbc0013I At root node, 92 cuts changed objective from 13166778 to 57827778 in 14 passes
Cbc0014I Cut generator 0 (Probing) - 4 row cuts average 56.0 elements, 0 column cuts (0 active)  in 0.030 seconds - new frequency is -100
Cbc0014I Cut generator 1 (Gomory) - 66 row cuts average 79.8 elements, 0 column cuts (0 active)  in 0.017 seconds - new frequency is -100
Cbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.001 seconds - new frequency is -100
Cbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100
Cbc0014I Cut generator 4 (MixedIntegerRounding2) - 2 row cuts average 253.5 elements, 0 column cuts (0 active)  in 0.008 seconds - new frequency is -100
Cbc0014I Cut generator 5 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.028 seconds - new frequency is -100
Cbc0014I Cut generator 6 (TwoMirCuts) - 117 row cuts average 120.2 elements, 0 column cuts (0 active)  in 0.011 seconds - new frequency is 1
Cbc0010I After 0 nodes, 1 on tree, 74594488 best solution, best possible 57827778 (0.34 seconds)
Cbc0012I Integer solution of 74429531 found by DiveCoefficient after 211 iterations and 1 nodes (0.38 seconds)
Cbc0012I Integer solution of 73636679 found by DiveCoefficient after 223 iterations and 3 nodes (0.50 seconds)
Cbc0012I Integer solution of 73171448 found by DiveCoefficient after 237 iterations and 5 nodes (0.63 seconds)
Cbc0012I Integer solution of 72634757 found by DiveCoefficient after 274 iterations and 10 nodes (0.74 seconds)
Cbc0012I Integer solution of 71810771 found by DiveCoefficient after 302 iterations and 15 nodes (0.81 seconds)
Cbc0038I Full problem 112 rows 3192 columns, reduced to 88 rows 1819 columns - 1 fixed gives 88, 1818 - still too large
Cbc0038I Full problem 112 rows 3192 columns, reduced to 88 rows 1818 columns - too large
Cbc0012I Integer solution of 70098211 found by rounding after 674 iterations and 62 nodes (1.02 seconds)
Cbc0012I Integer solution of 67178436 found by rounding after 676 iterations and 63 nodes (1.03 seconds)
Cbc0038I Full problem 112 rows 3192 columns, reduced to 93 rows 2105 columns - 1 fixed gives 93, 2104 - still too large
Cbc0038I Full problem 112 rows 3192 columns, reduced to 93 rows 2104 columns - too large
Cbc0010I After 100 nodes, 42 on tree, 67178436 best solution, best possible 57827778 (1.14 seconds)
Cbc0004I Integer solution of 66946018 found after 1582 iterations and 173 nodes (1.26 seconds)
Cbc0010I After 200 nodes, 69 on tree, 66946018 best solution, best possible 57827778 (1.29 seconds)
Cbc0038I Full problem 112 rows 3192 columns, reduced to 91 rows 1532 columns - 1 fixed gives 91, 1531 - still too large
Cbc0038I Full problem 112 rows 3192 columns, reduced to 91 rows 1531 columns - too large
Cbc0010I After 300 nodes, 88 on tree, 66946018 best solution, best possible 57827778 (1.41 seconds)
Cbc0038I Full problem 112 rows 3192 columns, reduced to 85 rows 1110 columns
Cbc0010I After 400 nodes, 107 on tree, 66946018 best solution, best possible 57827778 (1.52 seconds)
Cbc0010I After 500 nodes, 142 on tree, 66946018 best solution, best possible 57827778 (1.64 seconds)
Cbc0038I Full problem 112 rows 3192 columns, reduced to 86 rows 1195 columns
Cbc0010I After 600 nodes, 173 on tree, 66946018 best solution, best possible 57827778 (1.78 seconds)
Cbc0010I After 700 nodes, 178 on tree, 66946018 best solution, best possible 57827778 (2.03 seconds)
Cbc0004I Integer solution of 66645138 found after 5645 iterations and 766 nodes (2.21 seconds)
Cbc0038I Full problem 112 rows 3192 columns, reduced to 90 rows 1311 columns - 1 fixed gives 90, 1310 - still too large
Cbc0038I Full problem 112 rows 3192 columns, reduced to 90 rows 1310 columns - too large
Cbc0010I After 800 nodes, 159 on tree, 66645138 best solution, best possible 57827778 (2.30 seconds)
Cbc0004I Integer solution of 66456505 found after 6186 iterations and 830 nodes (2.40 seconds)
Cbc0010I After 900 nodes, 149 on tree, 66456505 best solution, best possible 57827778 (2.66 seconds)
Cbc0010I After 1000 nodes, 161 on tree, 66456505 best solution, best possible 57827778 (3.00 seconds)
Cbc0038I Full problem 112 rows 3192 columns, reduced to 94 rows 1127 columns
Cbc0010I After 1100 nodes, 144 on tree, 66456505 best solution, best possible 57827778 (3.30 seconds)
Cbc0038I Full problem 112 rows 3192 columns, reduced to 85 rows 909 columns
Cbc0010I After 1200 nodes, 104 on tree, 66456505 best solution, best possible 57827778 (3.55 seconds)
Cbc0010I After 1300 nodes, 63 on tree, 66456505 best solution, best possible 57827778 (3.97 seconds)
Cbc0038I Full problem 112 rows 3192 columns, reduced to 82 rows 750 columns
Cbc0010I After 1400 nodes, 32 on tree, 66456505 best solution, best possible 57827778 (4.59 seconds)
Cbc0010I After 1500 nodes, 13 on tree, 66456505 best solution, best possible 57827778 (5.33 seconds)
Cbc0010I After 1600 nodes, 12 on tree, 66456505 best solution, best possible 57827778 (5.95 seconds)
Cbc0010I After 1700 nodes, 8 on tree, 66456505 best solution, best possible 57827778 (6.49 seconds)
Cbc0010I After 1800 nodes, 24 on tree, 66456505 best solution, best possible 57827778 (7.02 seconds)
Cbc0010I After 1900 nodes, 16 on tree, 66456505 best solution, best possible 57827778 (7.35 seconds)
Cbc0010I After 2000 nodes, 10 on tree, 66456505 best solution, best possible 57827778 (7.79 seconds)
Cbc0010I After 2100 nodes, 10 on tree, 66456505 best solution, best possible 57827778 (8.30 seconds)
Cbc0010I After 2200 nodes, 12 on tree, 66456505 best solution, best possible 57827778 (8.83 seconds)
Cbc0010I After 2300 nodes, 10 on tree, 66456505 best solution, best possible 57827778 (9.19 seconds)
Cbc0038I Full problem 112 rows 3192 columns, reduced to 96 rows 1185 columns
Cbc0010I After 2400 nodes, 11 on tree, 66456505 best solution, best possible 57827778 (9.75 seconds)
Cbc0010I After 2500 nodes, 10 on tree, 66456505 best solution, best possible 57827778 (10.30 seconds)
Cbc0010I After 2600 nodes, 10 on tree, 66456505 best solution, best possible 57827778 (10.86 seconds)
Cbc0010I After 2700 nodes, 12 on tree, 66456505 best solution, best possible 57827778 (11.44 seconds)
Cbc0010I After 2800 nodes, 2 on tree, 66456505 best solution, best possible 57827778 (12.10 seconds)
Cbc0010I After 2900 nodes, 14 on tree, 66456505 best solution, best possible 60370657 (12.58 seconds)
Cbc0038I Full problem 112 rows 3192 columns, reduced to 99 rows 1227 columns - 3 fixed gives 99, 1224 - still too large
Cbc0038I Full problem 112 rows 3192 columns, reduced to 99 rows 1224 columns - too large
Cbc0010I After 3000 nodes, 9 on tree, 66456505 best solution, best possible 60370657 (13.00 seconds)
Cbc0010I After 3100 nodes, 15 on tree, 66456505 best solution, best possible 60370657 (13.56 seconds)
Cbc0010I After 3200 nodes, 4 on tree, 66456505 best solution, best possible 60370657 (14.12 seconds)
Cbc0001I Search completed - best objective 66456505.47983446, took 38165 iterations and 3244 nodes (14.58 seconds)
Cbc0032I Strong branching done 13118 times (66756 iterations), fathomed 457 nodes and fixed 2049 variables
Cbc0035I Maximum depth 41, 88 variables fixed on reduced cost
Cuts at root node changed objective from 1.31668e+07 to 5.78278e+07
Probing was tried 14 times and created 4 cuts of which 0 were active after adding rounds of cuts (0.030 seconds)
Gomory was tried 14 times and created 66 cuts of which 0 were active after adding rounds of cuts (0.017 seconds)
Knapsack was tried 14 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.001 seconds)
Clique was tried 14 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)
MixedIntegerRounding2 was tried 14 times and created 2 cuts of which 0 were active after adding rounds of cuts (0.008 seconds)
FlowCover was tried 14 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.028 seconds)
TwoMirCuts was tried 2376 times and created 122 cuts of which 0 were active after adding rounds of cuts (0.240 seconds)
ZeroHalf was tried 1 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)

Result - Optimal solution found

Objective value:                66456505.47983446
Enumerated nodes:               3244
Total iterations:               38165
Time (CPU seconds):             14.38
Time (Wallclock seconds):       14.58

Option for printingOptions changed from normal to all
Total time (CPU seconds):       14.39   (Wallclock seconds):       14.59

