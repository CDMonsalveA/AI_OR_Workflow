Welcome to the CBC MILP Solver 
Version: 2.10.3 
Build Date: Dec 15 2019 

command line - /home/cdmonsalvea/AI_OR_Workflow/.venv/lib/python3.10/site-packages/pulp/solverdir/cbc/linux/64/cbc /tmp/ac39215792e34f2fbd95afa4662c5146-pulp.mps -sec 3600 -timeMode elapsed -branch -printingOptions all -solution /tmp/ac39215792e34f2fbd95afa4662c5146-pulp.sol (default strategy 1)
At line 2 NAME          MODEL
At line 3 ROWS
At line 105 COLUMNS
At line 7756 RHS
At line 7857 BOUNDS
At line 7908 ENDATA
Problem MODEL has 100 rows, 2550 columns and 5050 elements
Coin0008I MODEL read with 0 errors
seconds was changed from 1e+100 to 3600
Option for timeMode changed from cpu to elapsed
Continuous objective value is 3.75308e+07 - 0.00 seconds
Cgl0004I processed model has 100 rows, 2550 columns (50 integer (50 of which binary)) and 5050 elements
Cbc0038I Initial state - 50 integers unsatisfied sum - 10.6708
Cbc0038I Pass   1: suminf.    0.36519 (1) obj. 7.27024e+08 iterations 49
Cbc0038I Pass   2: suminf.    0.36519 (1) obj. 7.27024e+08 iterations 0
Cbc0038I Solution found of 7.30617e+08
Cbc0038I Relaxing continuous gives 5.75571e+08
Cbc0038I Before mini branch and bound, 0 integers at bound fixed and 2401 continuous
Cbc0038I Full problem 100 rows 2550 columns, reduced to 97 rows 143 columns
Cbc0038I Mini branch and bound improved solution from 5.75571e+08 to 1.60995e+08 (0.03 seconds)
Cbc0038I Round again with cutoff of 1.48648e+08
Cbc0038I Pass   3: suminf.    4.38679 (19) obj. 1.48648e+08 iterations 65
Cbc0038I Pass   4: suminf.    3.82251 (18) obj. 1.48648e+08 iterations 7
Cbc0038I Pass   5: suminf.    0.59870 (3) obj. 1.48648e+08 iterations 56
Cbc0038I Pass   6: suminf.    0.28062 (3) obj. 1.48648e+08 iterations 12
Cbc0038I Pass   7: suminf.    0.00000 (0) obj. 1.48648e+08 iterations 12
Cbc0038I Solution found of 1.48648e+08
Cbc0038I Relaxing continuous gives 1.46075e+08
Cbc0038I Before mini branch and bound, 0 integers at bound fixed and 2401 continuous
Cbc0038I Full problem 100 rows 2550 columns, reduced to 70 rows 111 columns
Cbc0038I Mini branch and bound improved solution from 1.46075e+08 to 1.42525e+08 (0.09 seconds)
Cbc0038I Freeing continuous variables gives a solution of 1.36507e+08
Cbc0038I Round again with cutoff of 1.16712e+08
Cbc0038I Pass   8: suminf.    4.66827 (25) obj. 1.16712e+08 iterations 9
Cbc0038I Pass   9: suminf.    4.25706 (22) obj. 1.16712e+08 iterations 10
Cbc0038I Pass  10: suminf.    3.07372 (15) obj. 1.16712e+08 iterations 52
Cbc0038I Pass  11: suminf.    4.23143 (17) obj. 1.16712e+08 iterations 34
Cbc0038I Pass  12: suminf.    3.71665 (16) obj. 1.16712e+08 iterations 5
Cbc0038I Pass  13: suminf.    4.12875 (17) obj. 1.16712e+08 iterations 10
Cbc0038I Pass  14: suminf.    4.12875 (17) obj. 1.16712e+08 iterations 0
Cbc0038I Pass  15: suminf.    4.08957 (17) obj. 1.16712e+08 iterations 6
Cbc0038I Pass  16: suminf.    4.08957 (17) obj. 1.16712e+08 iterations 0
Cbc0038I Pass  17: suminf.    4.23143 (17) obj. 1.16712e+08 iterations 4
Cbc0038I Pass  18: suminf.    3.69592 (16) obj. 1.16712e+08 iterations 4
Cbc0038I Pass  19: suminf.    4.23143 (17) obj. 1.16712e+08 iterations 2
Cbc0038I Pass  20: suminf.    3.64164 (16) obj. 1.16712e+08 iterations 22
Cbc0038I Pass  21: suminf.    3.64164 (16) obj. 1.16712e+08 iterations 0
Cbc0038I Pass  22: suminf.    4.23143 (17) obj. 1.16712e+08 iterations 12
Cbc0038I Pass  23: suminf.    3.77511 (16) obj. 1.16712e+08 iterations 4
Cbc0038I Pass  24: suminf.    4.23143 (17) obj. 1.16712e+08 iterations 7
Cbc0038I Pass  25: suminf.    3.69592 (16) obj. 1.16712e+08 iterations 4
Cbc0038I Pass  26: suminf.    4.23143 (17) obj. 1.16712e+08 iterations 2
Cbc0038I Pass  27: suminf.    3.73438 (16) obj. 1.16712e+08 iterations 20
Cbc0038I Pass  28: suminf.    3.61936 (16) obj. 1.16712e+08 iterations 3
Cbc0038I Pass  29: suminf.    3.76088 (16) obj. 1.16712e+08 iterations 4
Cbc0038I Pass  30: suminf.    3.71424 (16) obj. 1.16712e+08 iterations 3
Cbc0038I Pass  31: suminf.    3.85059 (17) obj. 1.16712e+08 iterations 2
Cbc0038I Pass  32: suminf.    3.85059 (17) obj. 1.16712e+08 iterations 0
Cbc0038I Pass  33: suminf.    3.76088 (16) obj. 1.16712e+08 iterations 5
Cbc0038I Pass  34: suminf.    3.69909 (15) obj. 1.16712e+08 iterations 30
Cbc0038I Pass  35: suminf.    3.69909 (15) obj. 1.16712e+08 iterations 0
Cbc0038I Pass  36: suminf.    4.02090 (17) obj. 1.16712e+08 iterations 18
Cbc0038I Pass  37: suminf.    4.02090 (17) obj. 1.16712e+08 iterations 0
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 0 integers at bound fixed and 2411 continuous
Cbc0038I Full problem 100 rows 2550 columns, reduced to 58 rows 91 columns
Cbc0038I Mini branch and bound did not improve solution (0.14 seconds)
Cbc0038I After 0.14 seconds - Feasibility pump exiting with objective of 1.36507e+08 - took 0.11 seconds
Cbc0012I Integer solution of 1.3650742e+08 found by feasibility pump after 0 iterations and 0 nodes (0.14 seconds)
Cbc0012I Integer solution of 1.3055113e+08 found by DiveCoefficient after 76 iterations and 0 nodes (0.19 seconds)
Cbc0031I 65 added rows had average density of 70.769231
Cbc0013I At root node, 65 cuts changed objective from 37530761 to 1.2765022e+08 in 6 passes
Cbc0014I Cut generator 0 (Probing) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.007 seconds - new frequency is -100
Cbc0014I Cut generator 1 (Gomory) - 66 row cuts average 66.7 elements, 0 column cuts (0 active)  in 0.002 seconds - new frequency is 1
Cbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.001 seconds - new frequency is -100
Cbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100
Cbc0014I Cut generator 4 (MixedIntegerRounding2) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.002 seconds - new frequency is -100
Cbc0014I Cut generator 5 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.005 seconds - new frequency is -100
Cbc0014I Cut generator 6 (TwoMirCuts) - 71 row cuts average 74.6 elements, 0 column cuts (0 active)  in 0.003 seconds - new frequency is 1
Cbc0010I After 0 nodes, 1 on tree, 1.3055113e+08 best solution, best possible 1.2765022e+08 (0.19 seconds)
Cbc0012I Integer solution of 1.3039553e+08 found by DiveCoefficient after 78 iterations and 2 nodes (0.20 seconds)
Cbc0012I Integer solution of 1.2882442e+08 found by DiveCoefficient after 78 iterations and 2 nodes (0.20 seconds)
Cbc0012I Integer solution of 1.2765712e+08 found by DiveCoefficient after 79 iterations and 3 nodes (0.21 seconds)
Cbc0001I Search completed - best objective 127657120.8890035, took 89 iterations and 6 nodes (0.21 seconds)
Cbc0032I Strong branching done 20 times (44 iterations), fathomed 1 nodes and fixed 0 variables
Cbc0035I Maximum depth 2, 0 variables fixed on reduced cost
Cuts at root node changed objective from 3.75308e+07 to 1.2765e+08
Probing was tried 6 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.007 seconds)
Gomory was tried 10 times and created 66 cuts of which 0 were active after adding rounds of cuts (0.002 seconds)
Knapsack was tried 6 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.001 seconds)
Clique was tried 6 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)
MixedIntegerRounding2 was tried 6 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.002 seconds)
FlowCover was tried 6 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.005 seconds)
TwoMirCuts was tried 10 times and created 71 cuts of which 0 were active after adding rounds of cuts (0.003 seconds)
ZeroHalf was tried 1 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)

Result - Optimal solution found

Objective value:                127657120.88900355
Enumerated nodes:               6
Total iterations:               89
Time (CPU seconds):             0.19
Time (Wallclock seconds):       0.21

Option for printingOptions changed from normal to all
Total time (CPU seconds):       0.20   (Wallclock seconds):       0.22

