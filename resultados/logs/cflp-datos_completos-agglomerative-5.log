Welcome to the CBC MILP Solver 
Version: 2.10.3 
Build Date: Dec 15 2019 

command line - /home/cdmonsalvea/AI_OR_Workflow/.venv/lib/python3.10/site-packages/pulp/solverdir/cbc/linux/64/cbc /tmp/a14778b49f5e43e9bde754502d20029b-pulp.mps -sec 3600 -timeMode elapsed -branch -printingOptions all -solution /tmp/a14778b49f5e43e9bde754502d20029b-pulp.sol (default strategy 1)
At line 2 NAME          MODEL
At line 3 ROWS
At line 55 COLUMNS
At line 2006 RHS
At line 2057 BOUNDS
At line 2083 ENDATA
Problem MODEL has 50 rows, 650 columns and 1275 elements
Coin0008I MODEL read with 0 errors
seconds was changed from 1e+100 to 3600
Option for timeMode changed from cpu to elapsed
Continuous objective value is 2.75328e+07 - 0.00 seconds
Cgl0004I processed model has 50 rows, 650 columns (25 integer (25 of which binary)) and 1275 elements
Cbc0038I Initial state - 25 integers unsatisfied sum - 7.45718
Cbc0038I Pass   1: suminf.    0.07314 (1) obj. 5.76711e+08 iterations 24
Cbc0038I Solution found of 5.76784e+08
Cbc0038I Relaxing continuous gives 5.23766e+08
Cbc0038I Before mini branch and bound, 0 integers at bound fixed and 576 continuous
Cbc0038I Full problem 50 rows 650 columns, reduced to 47 rows 68 columns
Cbc0038I Mini branch and bound improved solution from 5.23766e+08 to 8.32147e+07 (0.01 seconds)
Cbc0038I Round again with cutoff of 7.76465e+07
Cbc0038I Pass   2: suminf.    3.52425 (12) obj. 7.76465e+07 iterations 38
Cbc0038I Pass   3: suminf.    3.28188 (11) obj. 7.76465e+07 iterations 2
Cbc0038I Pass   4: suminf.    1.09330 (4) obj. 7.76465e+07 iterations 18
Cbc0038I Pass   5: suminf.    0.56958 (2) obj. 7.76465e+07 iterations 9
Cbc0038I Pass   6: suminf.    0.25382 (1) obj. 7.76465e+07 iterations 5
Cbc0038I Pass   7: suminf.    0.30750 (2) obj. 7.76465e+07 iterations 4
Cbc0038I Pass   8: suminf.    0.53736 (3) obj. 7.76465e+07 iterations 7
Cbc0038I Pass   9: suminf.    0.95587 (3) obj. 7.76465e+07 iterations 4
Cbc0038I Pass  10: suminf.    0.95587 (3) obj. 7.76465e+07 iterations 0
Cbc0038I Pass  11: suminf.    0.68620 (2) obj. 7.76465e+07 iterations 3
Cbc0038I Pass  12: suminf.    0.85427 (3) obj. 7.76465e+07 iterations 5
Cbc0038I Pass  13: suminf.    0.69006 (3) obj. 7.76465e+07 iterations 7
Cbc0038I Pass  14: suminf.    0.69006 (3) obj. 7.76465e+07 iterations 0
Cbc0038I Pass  15: suminf.    0.95587 (3) obj. 7.76465e+07 iterations 2
Cbc0038I Pass  16: suminf.    0.95587 (3) obj. 7.76465e+07 iterations 0
Cbc0038I Pass  17: suminf.    0.68620 (2) obj. 7.76465e+07 iterations 3
Cbc0038I Pass  18: suminf.    0.95587 (3) obj. 7.76465e+07 iterations 2
Cbc0038I Pass  19: suminf.    1.09054 (4) obj. 7.76465e+07 iterations 11
Cbc0038I Pass  20: suminf.    0.79261 (4) obj. 7.76465e+07 iterations 2
Cbc0038I Pass  21: suminf.    0.95587 (3) obj. 7.76465e+07 iterations 7
Cbc0038I Pass  22: suminf.    0.95587 (3) obj. 7.76465e+07 iterations 0
Cbc0038I Pass  23: suminf.    0.68620 (2) obj. 7.76465e+07 iterations 3
Cbc0038I Pass  24: suminf.    0.95587 (3) obj. 7.76465e+07 iterations 2
Cbc0038I Pass  25: suminf.    1.24773 (4) obj. 7.76465e+07 iterations 11
Cbc0038I Pass  26: suminf.    0.97056 (3) obj. 7.76465e+07 iterations 1
Cbc0038I Pass  27: suminf.    0.63067 (3) obj. 7.76465e+07 iterations 7
Cbc0038I Pass  28: suminf.    1.88348 (6) obj. 7.76465e+07 iterations 17
Cbc0038I Pass  29: suminf.    1.51772 (5) obj. 7.76465e+07 iterations 1
Cbc0038I Pass  30: suminf.    0.28655 (2) obj. 7.76465e+07 iterations 9
Cbc0038I Pass  31: suminf.    0.65350 (2) obj. 7.76465e+07 iterations 4
Cbc0038I Rounding solution of 7.9968e+07 is better than previous of 8.32147e+07

Cbc0038I Before mini branch and bound, 0 integers at bound fixed and 578 continuous
Cbc0038I Full problem 50 rows 650 columns, reduced to 33 rows 52 columns
Cbc0038I Mini branch and bound improved solution from 7.9968e+07 to 7.92505e+07 (0.02 seconds)
Cbc0038I Round again with cutoff of 6.76238e+07
Cbc0038I Pass  31: suminf.    3.96924 (13) obj. 6.76238e+07 iterations 1
Cbc0038I Pass  32: suminf.    3.67345 (13) obj. 6.76238e+07 iterations 4
Cbc0038I Pass  33: suminf.    1.73026 (7) obj. 6.76238e+07 iterations 28
Cbc0038I Pass  34: suminf.    2.37975 (6) obj. 6.76238e+07 iterations 16
Cbc0038I Pass  35: suminf.    2.14267 (6) obj. 6.76238e+07 iterations 2
Cbc0038I Pass  36: suminf.    1.95533 (6) obj. 6.76238e+07 iterations 7
Cbc0038I Pass  37: suminf.    1.95533 (6) obj. 6.76238e+07 iterations 0
Cbc0038I Pass  38: suminf.    2.45351 (6) obj. 6.76238e+07 iterations 1
Cbc0038I Pass  39: suminf.    1.93525 (5) obj. 6.76238e+07 iterations 2
Cbc0038I Pass  40: suminf.    1.95533 (6) obj. 6.76238e+07 iterations 3
Cbc0038I Pass  41: suminf.    2.46484 (7) obj. 6.76238e+07 iterations 10
Cbc0038I Pass  42: suminf.    2.13197 (6) obj. 6.76238e+07 iterations 1
Cbc0038I Pass  43: suminf.    1.64177 (5) obj. 6.76238e+07 iterations 2
Cbc0038I Pass  44: suminf.    2.03729 (6) obj. 6.76238e+07 iterations 7
Cbc0038I Pass  45: suminf.    2.03729 (6) obj. 6.76238e+07 iterations 0
Cbc0038I Pass  46: suminf.    1.95533 (6) obj. 6.76238e+07 iterations 3
Cbc0038I Pass  47: suminf.    1.95533 (6) obj. 6.76238e+07 iterations 0
Cbc0038I Pass  48: suminf.    2.45351 (6) obj. 6.76238e+07 iterations 1
Cbc0038I Pass  49: suminf.    1.93525 (5) obj. 6.76238e+07 iterations 2
Cbc0038I Pass  50: suminf.    1.95533 (6) obj. 6.76238e+07 iterations 3
Cbc0038I Pass  51: suminf.    2.37445 (6) obj. 6.76238e+07 iterations 6
Cbc0038I Pass  52: suminf.    2.13444 (6) obj. 6.76238e+07 iterations 1
Cbc0038I Pass  53: suminf.    1.95533 (6) obj. 6.76238e+07 iterations 5
Cbc0038I Pass  54: suminf.    1.95533 (6) obj. 6.76238e+07 iterations 0
Cbc0038I Pass  55: suminf.    2.45351 (6) obj. 6.76238e+07 iterations 1
Cbc0038I Pass  56: suminf.    1.93525 (5) obj. 6.76238e+07 iterations 2
Cbc0038I Pass  57: suminf.    1.95533 (6) obj. 6.76238e+07 iterations 3
Cbc0038I Pass  58: suminf.    2.32433 (7) obj. 6.76238e+07 iterations 11
Cbc0038I Pass  59: suminf.    1.95533 (6) obj. 6.76238e+07 iterations 10
Cbc0038I Pass  60: suminf.    1.95533 (6) obj. 6.76238e+07 iterations 0
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 0 integers at bound fixed and 581 continuous
Cbc0038I Full problem 50 rows 650 columns, reduced to 29 rows 45 columns
Cbc0038I Mini branch and bound did not improve solution (0.03 seconds)
Cbc0038I After 0.03 seconds - Feasibility pump exiting with objective of 7.92505e+07 - took 0.03 seconds
Cbc0012I Integer solution of 79250543 found by feasibility pump after 0 iterations and 0 nodes (0.03 seconds)
Cbc0031I 27 added rows had average density of 28.703704
Cbc0013I At root node, 31 cuts changed objective from 27532803 to 79250543 in 6 passes
Cbc0014I Cut generator 0 (Probing) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.002 seconds - new frequency is -100
Cbc0014I Cut generator 1 (Gomory) - 34 row cuts average 38.2 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is 1
Cbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100
Cbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100
Cbc0014I Cut generator 4 (MixedIntegerRounding2) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100
Cbc0014I Cut generator 5 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.001 seconds - new frequency is -100
Cbc0014I Cut generator 6 (TwoMirCuts) - 35 row cuts average 39.3 elements, 0 column cuts (0 active)  in 0.001 seconds - new frequency is 1
Cbc0001I Search completed - best objective 79250543.24987841, took 42 iterations and 0 nodes (0.05 seconds)
Cbc0035I Maximum depth 0, 0 variables fixed on reduced cost
Cuts at root node changed objective from 2.75328e+07 to 7.92505e+07
Probing was tried 6 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.002 seconds)
Gomory was tried 6 times and created 34 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)
Knapsack was tried 6 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)
Clique was tried 6 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)
MixedIntegerRounding2 was tried 6 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)
FlowCover was tried 6 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.001 seconds)
TwoMirCuts was tried 6 times and created 35 cuts of which 0 were active after adding rounds of cuts (0.001 seconds)
ZeroHalf was tried 1 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)

Result - Optimal solution found

Objective value:                79250543.24987841
Enumerated nodes:               0
Total iterations:               42
Time (CPU seconds):             0.05
Time (Wallclock seconds):       0.05

Option for printingOptions changed from normal to all
Total time (CPU seconds):       0.05   (Wallclock seconds):       0.05

