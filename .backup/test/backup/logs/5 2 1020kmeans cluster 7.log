Welcome to the CBC MILP Solver 
Version: 2.10.3 
Build Date: Dec 15 2019 

command line - /home/cdmonsalvea/tesis/AI_OR_Workflow/.venv/lib/python3.10/site-packages/pulp/solverdir/cbc/linux/64/cbc /tmp/9464519a9bcd4faebcc8b57dcbcdf97a-pulp.mps -sec 3600 -threads 12 -timeMode elapsed -branch -printingOptions all -solution /tmp/9464519a9bcd4faebcc8b57dcbcdf97a-pulp.sol (default strategy 1)
At line 2 NAME          MODEL
At line 3 ROWS
At line 104 COLUMNS
At line 528 RHS
At line 628 BOUNDS
At line 719 ENDATA
Problem MODEL has 99 rows, 90 columns and 324 elements
Coin0008I MODEL read with 0 errors
seconds was changed from 1e+100 to 3600
threads was changed from 0 to 12
Option for timeMode changed from cpu to elapsed
Continuous objective value is 7.73276e+06 - 0.00 seconds
Cgl0003I 0 fixed, 0 tightened bounds, 9 strengthened rows, 0 substitutions
Cgl0004I processed model has 99 rows, 90 columns (9 integer (9 of which binary)) and 333 elements
Cbc0038I Initial state - 1 integers unsatisfied sum - 0.448061
Cbc0038I Pass   1: suminf.    0.44806 (1) obj. 9.90774e+06 iterations 35
Cbc0038I Solution found of 1.16249e+07
Cbc0038I Relaxing continuous gives 1.05376e+07
Cbc0038I Before mini branch and bound, 7 integers at bound fixed and 64 continuous
Cbc0038I Full problem 99 rows 90 columns, reduced to 7 rows 6 columns
Cbc0038I Mini branch and bound improved solution from 1.05376e+07 to 9.18527e+06 (0.04 seconds)
Cbc0038I Round again with cutoff of 9.10483e+06
Cbc0038I Reduced cost fixing fixed 1 variables on major pass 2
Cbc0038I Pass   2: suminf.    0.44806 (2) obj. 9.10483e+06 iterations 12
Cbc0038I Pass   3: suminf.    0.08317 (1) obj. 9.10483e+06 iterations 46
Cbc0038I Pass   4: suminf.    0.08317 (1) obj. 9.10483e+06 iterations 2
Cbc0038I Pass   5: suminf.    0.20678 (3) obj. 9.10483e+06 iterations 3
Cbc0038I Pass   6: suminf.    0.10015 (3) obj. 9.10483e+06 iterations 15
Cbc0038I Pass   7: suminf.    0.10015 (3) obj. 9.10483e+06 iterations 4
Cbc0038I Pass   8: suminf.    0.10015 (3) obj. 9.10483e+06 iterations 2
Cbc0038I Pass   9: suminf.    0.44806 (2) obj. 9.10483e+06 iterations 35
Cbc0038I Pass  10: suminf.    0.08317 (1) obj. 9.10483e+06 iterations 26
Cbc0038I Pass  11: suminf.    0.08317 (1) obj. 9.10483e+06 iterations 0
Cbc0038I Pass  12: suminf.    0.05519 (1) obj. 9.10483e+06 iterations 8
Cbc0038I Pass  13: suminf.    0.05519 (1) obj. 9.10483e+06 iterations 0
Cbc0038I Pass  14: suminf.    0.10845 (3) obj. 9.10483e+06 iterations 17
Cbc0038I Pass  15: suminf.    0.00000 (0) obj. 9.10447e+06 iterations 4
Cbc0038I Solution found of 9.10447e+06
Cbc0038I Relaxing continuous gives 9.10447e+06
Cbc0038I Before mini branch and bound, 3 integers at bound fixed and 49 continuous
Cbc0038I Full problem 99 rows 90 columns, reduced to 43 rows 34 columns
Cbc0038I Mini branch and bound did not improve solution (0.11 seconds)
Cbc0038I Round again with cutoff of 8.95974e+06
Cbc0038I Reduced cost fixing fixed 2 variables on major pass 3
Cbc0038I Pass  16: suminf.    0.44806 (2) obj. 8.95974e+06 iterations 0
Cbc0038I Pass  17: suminf.    0.17977 (1) obj. 8.95974e+06 iterations 48
Cbc0038I Pass  18: suminf.    0.17977 (1) obj. 8.95974e+06 iterations 2
Cbc0038I Pass  19: suminf.    0.17977 (1) obj. 8.95974e+06 iterations 0
Cbc0038I Pass  20: suminf.    0.14678 (1) obj. 8.95974e+06 iterations 1
Cbc0038I Pass  21: suminf.    0.14678 (1) obj. 8.95974e+06 iterations 0
Cbc0038I Pass  22: suminf.    0.14678 (1) obj. 8.95974e+06 iterations 0
Cbc0038I Pass  23: suminf.    0.14678 (1) obj. 8.95974e+06 iterations 0
Cbc0038I Pass  24: suminf.    0.14678 (1) obj. 8.95974e+06 iterations 0
Cbc0038I Pass  25: suminf.    0.44806 (2) obj. 8.95974e+06 iterations 34
Cbc0038I Pass  26: suminf.    0.17977 (1) obj. 8.95974e+06 iterations 27
Cbc0038I Pass  27: suminf.    0.17977 (1) obj. 8.95974e+06 iterations 0
Cbc0038I Pass  28: suminf.    0.17977 (1) obj. 8.95974e+06 iterations 0
Cbc0038I Pass  29: suminf.    0.17977 (1) obj. 8.95974e+06 iterations 0
Cbc0038I Pass  30: suminf.    0.14678 (1) obj. 8.95974e+06 iterations 5
Cbc0038I Pass  31: suminf.    1.00767 (3) obj. 8.95974e+06 iterations 13
Cbc0038I Pass  32: suminf.    1.00767 (3) obj. 8.95974e+06 iterations 0
Cbc0038I Pass  33: suminf.    1.00767 (3) obj. 8.95974e+06 iterations 0
Cbc0038I Pass  34: suminf.    0.46348 (2) obj. 8.95974e+06 iterations 14
Cbc0038I Pass  35: suminf.    0.44806 (2) obj. 8.95974e+06 iterations 9
Cbc0038I Pass  36: suminf.    0.15474 (1) obj. 8.95974e+06 iterations 34
Cbc0038I Pass  37: suminf.    0.15474 (1) obj. 8.95974e+06 iterations 2
Cbc0038I Pass  38: suminf.    0.44806 (2) obj. 8.95974e+06 iterations 38
Cbc0038I Pass  39: suminf.    0.17977 (1) obj. 8.95974e+06 iterations 28
Cbc0038I Pass  40: suminf.    0.17977 (1) obj. 8.95974e+06 iterations 0
Cbc0038I Pass  41: suminf.    0.17977 (1) obj. 8.95974e+06 iterations 0
Cbc0038I Pass  42: suminf.    0.55454 (3) obj. 8.95974e+06 iterations 20
Cbc0038I Pass  43: suminf.    0.55454 (3) obj. 8.95974e+06 iterations 2
Cbc0038I Pass  44: suminf.    1.35400 (3) obj. 8.95974e+06 iterations 7
Cbc0038I Pass  45: suminf.    0.64793 (3) obj. 8.95974e+06 iterations 8
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 2 integers at bound fixed and 32 continuous
Cbc0038I Full problem 99 rows 90 columns, reduced to 65 rows 56 columns
Cbc0038I Mini branch and bound did not improve solution (0.19 seconds)
Cbc0038I After 0.19 seconds - Feasibility pump exiting with objective of 9.10447e+06 - took 0.07 seconds
Cbc0012I Integer solution of 9104467.6 found by feasibility pump after 0 iterations and 0 nodes (0.19 seconds)
Cbc0038I Full problem 99 rows 90 columns, reduced to 39 rows 30 columns
Cbc0031I 9 added rows had average density of 54.777778
Cbc0013I At root node, 9 cuts changed objective from 8380816.3 to 8666704.1 in 100 passes
Cbc0014I Cut generator 0 (Probing) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.024 seconds - new frequency is -100
Cbc0014I Cut generator 1 (Gomory) - 175 row cuts average 60.5 elements, 0 column cuts (0 active)  in 0.028 seconds - new frequency is -100
Cbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.020 seconds - new frequency is -100
Cbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.005 seconds - new frequency is -100
Cbc0014I Cut generator 4 (MixedIntegerRounding2) - 49 row cuts average 37.8 elements, 0 column cuts (0 active)  in 0.025 seconds - new frequency is 1
Cbc0014I Cut generator 5 (FlowCover) - 1 row cuts average 8.0 elements, 0 column cuts (0 active)  in 0.015 seconds - new frequency is -100
Cbc0014I Cut generator 6 (TwoMirCuts) - 12 row cuts average 45.9 elements, 0 column cuts (0 active)  in 0.010 seconds - new frequency is 1
Cbc0010I After 0 nodes, 1 on tree, 9104467.6 best solution, best possible 8666708.3 (0.64 seconds)
Cbc0030I Thread 0 used 2 times,  waiting to start 0.038321257, 0.016822 cpu time, 18 locks, 0.00022482872 locked, 1.168251e-05 waiting for locks
Cbc0030I Thread 1 used 0 times,  waiting to start 0.045544147, 0 cpu time, 0 locks, 0 locked, 0 waiting for locks
Cbc0030I Thread 2 used 0 times,  waiting to start 0.04569602, 0 cpu time, 0 locks, 0 locked, 0 waiting for locks
Cbc0030I Thread 3 used 0 times,  waiting to start 0.045765877, 0 cpu time, 0 locks, 0 locked, 0 waiting for locks
Cbc0030I Thread 4 used 0 times,  waiting to start 0.039406061, 0 cpu time, 0 locks, 0 locked, 0 waiting for locks
Cbc0030I Thread 5 used 0 times,  waiting to start 0.02963686, 0 cpu time, 0 locks, 0 locked, 0 waiting for locks
Cbc0030I Thread 6 used 0 times,  waiting to start 0.032468796, 0 cpu time, 0 locks, 0 locked, 0 waiting for locks
Cbc0030I Thread 7 used 0 times,  waiting to start 0.036564827, 0 cpu time, 0 locks, 0 locked, 0 waiting for locks
Cbc0030I Thread 8 used 0 times,  waiting to start 0.015020132, 0 cpu time, 0 locks, 0 locked, 0 waiting for locks
Cbc0030I Thread 9 used 0 times,  waiting to start 0.027313232, 0 cpu time, 0 locks, 0 locked, 0 waiting for locks
Cbc0030I Thread 10 used 0 times,  waiting to start 0.017019033, 0 cpu time, 0 locks, 0 locked, 0 waiting for locks
Cbc0030I Thread 11 used 0 times,  waiting to start 0.017065048, 0 cpu time, 0 locks, 0 locked, 0 waiting for locks
Cbc0030I Main thread 0.0033249855 waiting for threads,  8 locks, 2.5033951e-05 locked, 3.8146973e-06 waiting for locks
Cbc0001I Search completed - best objective 9104467.592795657, took 1266 iterations and 2 nodes (0.73 seconds)
Cbc0032I Strong branching done 132 times (2482 iterations), fathomed 1 nodes and fixed 26 variables
Cbc0035I Maximum depth 0, 5 variables fixed on reduced cost
Cuts at root node changed objective from 8.38082e+06 to 8.66671e+06
Probing was tried 1300 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.316 seconds)
Gomory was tried 1300 times and created 2275 cuts of which 0 were active after adding rounds of cuts (0.364 seconds)
Knapsack was tried 1300 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.264 seconds)
Clique was tried 1300 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.066 seconds)
MixedIntegerRounding2 was tried 1309 times and created 637 cuts of which 0 were active after adding rounds of cuts (0.330 seconds)
FlowCover was tried 1300 times and created 13 cuts of which 0 were active after adding rounds of cuts (0.193 seconds)
TwoMirCuts was tried 1309 times and created 178 cuts of which 0 were active after adding rounds of cuts (0.128 seconds)
ZeroHalf was tried 13 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)

Result - Optimal solution found

Objective value:                9104467.59279566
Enumerated nodes:               2
Total iterations:               1266
Time (CPU seconds):             0.52
Time (Wallclock seconds):       0.74

Option for printingOptions changed from normal to all
Total time (CPU seconds):       0.52   (Wallclock seconds):       0.74

