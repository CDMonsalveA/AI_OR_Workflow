Welcome to the CBC MILP Solver 
Version: 2.10.3 
Build Date: Dec 15 2019 

command line - /home/cdmonsalvea/AI_OR_Workflow/.venv/lib/python3.10/site-packages/pulp/solverdir/cbc/linux/64/cbc /tmp/6faaf4a57d344ab9bcff54b6448ae188-pulp.mps -sec 3600 -timeMode elapsed -branch -printingOptions all -solution /tmp/6faaf4a57d344ab9bcff54b6448ae188-pulp.sol (default strategy 1)
At line 2 NAME          MODEL
At line 3 ROWS
At line 147 COLUMNS
At line 15484 RHS
At line 15627 BOUNDS
At line 15699 ENDATA
Problem MODEL has 142 rows, 5112 columns and 10153 elements
Coin0008I MODEL read with 0 errors
seconds was changed from 1e+100 to 3600
Option for timeMode changed from cpu to elapsed
Continuous objective value is 3.93659e+07 - 0.00 seconds
Cgl0004I processed model has 142 rows, 5112 columns (71 integer (71 of which binary)) and 10153 elements
Cbc0038I Initial state - 71 integers unsatisfied sum - 8.62037
Cbc0038I Pass   1: suminf.    0.15156 (1) obj. 1.00638e+09 iterations 70
Cbc0038I Solution found of 1.02122e+09
Cbc0038I Relaxing continuous gives 7.3369e+08
Cbc0038I Before mini branch and bound, 0 integers at bound fixed and 4900 continuous
Cbc0038I Full problem 142 rows 5112 columns, reduced to 137 rows 202 columns
Cbc0038I Mini branch and bound improved solution from 7.3369e+08 to 2.29148e+08 (0.08 seconds)
Cbc0038I Freeing continuous variables gives a solution of 2.17506e+08
Cbc0038I Round again with cutoff of 1.99692e+08
Cbc0038I Pass   2: suminf.    2.18922 (14) obj. 1.99692e+08 iterations 147
Cbc0038I Pass   3: suminf.    1.80083 (13) obj. 1.99692e+08 iterations 18
Cbc0038I Pass   4: suminf.    0.54947 (8) obj. 1.99692e+08 iterations 84
Cbc0038I Pass   5: suminf.    0.09620 (2) obj. 1.99692e+08 iterations 63
Cbc0038I Pass   6: suminf.    0.00000 (0) obj. 1.99692e+08 iterations 10
Cbc0038I Solution found of 1.99692e+08
Cbc0038I Relaxing continuous gives 1.91237e+08
Cbc0038I Before mini branch and bound, 0 integers at bound fixed and 4873 continuous
Cbc0038I Full problem 142 rows 5112 columns, reduced to 123 rows 212 columns
Cbc0038I Mini branch and bound improved solution from 1.91237e+08 to 1.82311e+08 (0.16 seconds)
Cbc0038I Freeing continuous variables gives a solution of 1.75581e+08
Cbc0038I Round again with cutoff of 1.48338e+08
Cbc0038I Pass   7: suminf.    3.19977 (25) obj. 1.48338e+08 iterations 16
Cbc0038I Pass   8: suminf.    1.81833 (26) obj. 1.48338e+08 iterations 111
Cbc0038I Pass   9: suminf.    4.48423 (29) obj. 1.48338e+08 iterations 66
Cbc0038I Pass  10: suminf.    4.14421 (30) obj. 1.48338e+08 iterations 5
Cbc0038I Pass  11: suminf.    3.93065 (27) obj. 1.48338e+08 iterations 14
Cbc0038I Pass  12: suminf.    3.58234 (28) obj. 1.48338e+08 iterations 5
Cbc0038I Pass  13: suminf.    3.55426 (28) obj. 1.48338e+08 iterations 11
Cbc0038I Pass  14: suminf.    3.55426 (28) obj. 1.48338e+08 iterations 0
Cbc0038I Pass  15: suminf.    3.54896 (28) obj. 1.48338e+08 iterations 17
Cbc0038I Pass  16: suminf.    3.54896 (28) obj. 1.48338e+08 iterations 0
Cbc0038I Pass  17: suminf.    3.59094 (27) obj. 1.48338e+08 iterations 11
Cbc0038I Pass  18: suminf.    3.92599 (28) obj. 1.48338e+08 iterations 52
Cbc0038I Pass  19: suminf.    3.92599 (28) obj. 1.48338e+08 iterations 0
Cbc0038I Pass  20: suminf.    3.89937 (27) obj. 1.48338e+08 iterations 20
Cbc0038I Pass  21: suminf.    3.34018 (26) obj. 1.48338e+08 iterations 4
Cbc0038I Pass  22: suminf.    3.89937 (27) obj. 1.48338e+08 iterations 6
Cbc0038I Pass  23: suminf.    2.96973 (18) obj. 1.48338e+08 iterations 58
Cbc0038I Pass  24: suminf.    2.12191 (21) obj. 1.48338e+08 iterations 19
Cbc0038I Pass  25: suminf.    3.83693 (25) obj. 1.48338e+08 iterations 40
Cbc0038I Pass  26: suminf.    3.22577 (24) obj. 1.48338e+08 iterations 7
Cbc0038I Pass  27: suminf.    3.83693 (25) obj. 1.48338e+08 iterations 9
Cbc0038I Pass  28: suminf.    3.18490 (24) obj. 1.48338e+08 iterations 6
Cbc0038I Pass  29: suminf.    3.83693 (25) obj. 1.48338e+08 iterations 5
Cbc0038I Pass  30: suminf.    3.25276 (24) obj. 1.48338e+08 iterations 4
Cbc0038I Pass  31: suminf.    3.75630 (25) obj. 1.48338e+08 iterations 5
Cbc0038I Pass  32: suminf.    3.72469 (26) obj. 1.48338e+08 iterations 1
Cbc0038I Pass  33: suminf.    3.60802 (26) obj. 1.48338e+08 iterations 6
Cbc0038I Pass  34: suminf.    3.60802 (26) obj. 1.48338e+08 iterations 0
Cbc0038I Pass  35: suminf.    3.59316 (26) obj. 1.48338e+08 iterations 8
Cbc0038I Pass  36: suminf.    3.59316 (26) obj. 1.48338e+08 iterations 0
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 0 integers at bound fixed and 4904 continuous
Cbc0038I Full problem 142 rows 5112 columns, reduced to 102 rows 162 columns
Cbc0038I Mini branch and bound did not improve solution (0.28 seconds)
Cbc0038I After 0.28 seconds - Feasibility pump exiting with objective of 1.75581e+08 - took 0.25 seconds
Cbc0012I Integer solution of 1.7558108e+08 found by feasibility pump after 0 iterations and 0 nodes (0.28 seconds)
Cbc0012I Integer solution of 1.7555264e+08 found by DiveCoefficient after 243 iterations and 0 nodes (0.49 seconds)
Cbc0031I 105 added rows had average density of 132.54286
Cbc0013I At root node, 105 cuts changed objective from 39365927 to 1.5674899e+08 in 12 passes
Cbc0014I Cut generator 0 (Probing) - 7 row cuts average 71.0 elements, 0 column cuts (0 active)  in 0.041 seconds - new frequency is -100
Cbc0014I Cut generator 1 (Gomory) - 86 row cuts average 106.5 elements, 0 column cuts (0 active)  in 0.013 seconds - new frequency is -100
Cbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.001 seconds - new frequency is -100
Cbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100
Cbc0014I Cut generator 4 (MixedIntegerRounding2) - 3 row cuts average 213.0 elements, 0 column cuts (0 active)  in 0.009 seconds - new frequency is -100
Cbc0014I Cut generator 5 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.039 seconds - new frequency is -100
Cbc0014I Cut generator 6 (TwoMirCuts) - 141 row cuts average 142.5 elements, 0 column cuts (0 active)  in 0.013 seconds - new frequency is 1
Cbc0010I After 0 nodes, 1 on tree, 1.7555264e+08 best solution, best possible 1.5674899e+08 (0.51 seconds)
Cbc0012I Integer solution of 1.7554742e+08 found by DiveCoefficient after 250 iterations and 2 nodes (0.55 seconds)
Cbc0012I Integer solution of 1.7485298e+08 found by DiveCoefficient after 255 iterations and 3 nodes (0.64 seconds)
Cbc0012I Integer solution of 1.7420067e+08 found by DiveCoefficient after 257 iterations and 4 nodes (0.73 seconds)
Cbc0012I Integer solution of 1.7399903e+08 found by DiveCoefficient after 262 iterations and 5 nodes (0.82 seconds)
Cbc0012I Integer solution of 1.7383505e+08 found by DiveCoefficient after 264 iterations and 6 nodes (0.90 seconds)
Cbc0012I Integer solution of 1.7329514e+08 found by DiveCoefficient after 267 iterations and 7 nodes (0.95 seconds)
Cbc0012I Integer solution of 1.724832e+08 found by DiveCoefficient after 270 iterations and 8 nodes (1.04 seconds)
Cbc0012I Integer solution of 1.7218118e+08 found by DiveCoefficient after 283 iterations and 9 nodes (1.06 seconds)
Cbc0012I Integer solution of 1.671266e+08 found by rounding after 375 iterations and 30 nodes (1.19 seconds)
Cbc0012I Integer solution of 1.6263651e+08 found by rounding after 379 iterations and 32 nodes (1.19 seconds)
Cbc0012I Integer solution of 1.6170594e+08 found by rounding after 380 iterations and 33 nodes (1.19 seconds)
Cbc0038I Full problem 142 rows 5112 columns, reduced to 116 rows 3218 columns - 2 fixed gives 116, 3216 - still too large
Cbc0038I Full problem 142 rows 5112 columns, reduced to 116 rows 3216 columns - too large
Cbc0001I Search completed - best objective 161705935.7478144, took 854 iterations and 70 nodes (1.55 seconds)
Cbc0032I Strong branching done 706 times (2857 iterations), fathomed 8 nodes and fixed 30 variables
Cbc0035I Maximum depth 29, 2 variables fixed on reduced cost
Cuts at root node changed objective from 3.93659e+07 to 1.56749e+08
Probing was tried 12 times and created 7 cuts of which 0 were active after adding rounds of cuts (0.041 seconds)
Gomory was tried 12 times and created 86 cuts of which 0 were active after adding rounds of cuts (0.013 seconds)
Knapsack was tried 12 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.001 seconds)
Clique was tried 12 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)
MixedIntegerRounding2 was tried 12 times and created 3 cuts of which 0 were active after adding rounds of cuts (0.009 seconds)
FlowCover was tried 12 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.039 seconds)
TwoMirCuts was tried 62 times and created 142 cuts of which 0 were active after adding rounds of cuts (0.022 seconds)
ZeroHalf was tried 1 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)

Result - Optimal solution found

Objective value:                161705935.74781436
Enumerated nodes:               70
Total iterations:               854
Time (CPU seconds):             1.48
Time (Wallclock seconds):       1.56

Option for printingOptions changed from normal to all
Total time (CPU seconds):       1.50   (Wallclock seconds):       1.57

