Welcome to the CBC MILP Solver 
Version: 2.10.3 
Build Date: Dec 15 2019 

command line - /home/cdmonsalvea/AI_OR_Workflow/.venv/lib/python3.10/site-packages/pulp/solverdir/cbc/linux/64/cbc /tmp/442eff043058405da5698a8aef20dade-pulp.mps -sec 600 -threads 12 -timeMode elapsed -branch -printingOptions all -solution /tmp/442eff043058405da5698a8aef20dade-pulp.sol (default strategy 1)
At line 2 NAME          MODEL
At line 3 ROWS
At line 155 COLUMNS
At line 28506 RHS
At line 28657 BOUNDS
At line 34358 ENDATA
Problem MODEL has 150 rows, 5700 columns and 11325 elements
Coin0008I MODEL read with 0 errors
seconds was changed from 1e+100 to 600
threads was changed from 0 to 12
Option for timeMode changed from cpu to elapsed
Continuous objective value is 1.17273 - 0.00 seconds
Cgl0004I processed model has 150 rows, 5700 columns (5700 integer (5700 of which binary)) and 11325 elements
Cbc0038I Initial state - 75 integers unsatisfied sum - 1
Cbc0038I Pass   1: suminf.    1.00000 (75) obj. 1.17273 iterations 0
Cbc0038I Pass   2: suminf.    0.82667 (62) obj. 16.2149 iterations 13
Cbc0038I Pass   3: suminf.    0.44000 (33) obj. 49.7705 iterations 29
Cbc0038I Pass   4: suminf.    0.18667 (14) obj. 71.7553 iterations 19
Cbc0038I Solution found of 87.9545
Cbc0038I Before mini branch and bound, 5625 integers at bound fixed and 0 continuous
Cbc0038I Full problem 150 rows 5700 columns, reduced to 0 rows 0 columns
Cbc0038I Mini branch and bound did not improve solution (0.14 seconds)
Cbc0038I Round again with cutoff of 79.2764
Cbc0038I Pass   5: suminf.    1.00000 (75) obj. 1.17273 iterations 0
Cbc0038I Pass   6: suminf.    0.73333 (55) obj. 24.3145 iterations 20
Cbc0038I Pass   7: suminf.    0.34667 (26) obj. 57.8702 iterations 29
Cbc0038I Pass   8: suminf.    0.58667 (8) obj. 79.2764 iterations 23
Cbc0038I Pass   9: suminf.    0.58667 (8) obj. 79.2764 iterations 0
Cbc0038I Pass  10: suminf.    0.58667 (8) obj. 79.2764 iterations 2
Cbc0038I Pass  11: suminf.    0.58667 (8) obj. 79.2764 iterations 0
Cbc0038I Pass  12: suminf.    0.58667 (8) obj. 79.2764 iterations 1
Cbc0038I Pass  13: suminf.    0.58667 (8) obj. 79.2764 iterations 0
Cbc0038I Pass  14: suminf.    0.40873 (10) obj. 79.2764 iterations 19
Cbc0038I Pass  15: suminf.    0.12874 (9) obj. 79.2764 iterations 8
Cbc0038I Pass  16: suminf.    0.11126 (8) obj. 79.2764 iterations 5
Cbc0038I Pass  17: suminf.    0.10667 (7) obj. 79.271 iterations 11
Cbc0038I Pass  18: suminf.    0.11126 (7) obj. 79.2764 iterations 10
Cbc0038I Pass  19: suminf.    0.46110 (11) obj. 79.2764 iterations 43
Cbc0038I Pass  20: suminf.    0.19882 (10) obj. 79.2764 iterations 17
Cbc0038I Pass  21: suminf.    0.19882 (9) obj. 79.2764 iterations 8
Cbc0038I Pass  22: suminf.    0.19882 (9) obj. 79.2764 iterations 0
Cbc0038I Pass  23: suminf.    0.14548 (8) obj. 79.2764 iterations 8
Cbc0038I Pass  24: suminf.    0.14548 (8) obj. 79.2764 iterations 0
Cbc0038I Pass  25: suminf.    0.17215 (8) obj. 79.2764 iterations 7
Cbc0038I Pass  26: suminf.    0.17215 (8) obj. 79.2764 iterations 0
Cbc0038I Pass  27: suminf.    0.14548 (8) obj. 79.2764 iterations 9
Cbc0038I Pass  28: suminf.    0.42148 (10) obj. 79.2764 iterations 44
Cbc0038I Pass  29: suminf.    0.17786 (9) obj. 79.2764 iterations 24
Cbc0038I Pass  30: suminf.    0.15119 (8) obj. 79.2764 iterations 13
Cbc0038I Pass  31: suminf.    0.15119 (8) obj. 79.2764 iterations 0
Cbc0038I Pass  32: suminf.    0.17786 (8) obj. 79.2764 iterations 11
Cbc0038I Pass  33: suminf.    0.17786 (8) obj. 79.2764 iterations 0
Cbc0038I Pass  34: suminf.    0.15119 (8) obj. 79.2764 iterations 11
Cbc0038I Rounding solution of 70.9318 is better than previous of 87.9545

Cbc0038I Before mini branch and bound, 5561 integers at bound fixed and 0 continuous
Cbc0038I Full problem 150 rows 5700 columns, reduced to 29 rows 58 columns
Cbc0038I Mini branch and bound improved solution from 70.9318 to 65.7373 (0.21 seconds)
Cbc0038I Round again with cutoff of 52.8244
Cbc0038I Pass  34: suminf.    1.00000 (75) obj. 1.17273 iterations 0
Cbc0038I Pass  35: suminf.    0.73333 (55) obj. 24.3145 iterations 20
Cbc0038I Pass  36: suminf.    0.53333 (40) obj. 41.6709 iterations 15
Cbc0038I Pass  37: suminf.    0.75595 (31) obj. 52.8244 iterations 20
Cbc0038I Pass  38: suminf.    0.75595 (31) obj. 52.8244 iterations 0
Cbc0038I Pass  39: suminf.    0.75595 (31) obj. 52.8244 iterations 20
Cbc0038I Pass  40: suminf.    0.75595 (31) obj. 52.8244 iterations 0
Cbc0038I Pass  41: suminf.    0.75595 (31) obj. 52.8244 iterations 1
Cbc0038I Pass  42: suminf.    0.75595 (31) obj. 52.8244 iterations 0
Cbc0038I Pass  43: suminf.    0.75595 (31) obj. 52.8244 iterations 2
Cbc0038I Pass  44: suminf.    0.75595 (31) obj. 52.8244 iterations 0
Cbc0038I Pass  45: suminf.    0.75595 (31) obj. 52.8244 iterations 1
Cbc0038I Pass  46: suminf.    0.75595 (31) obj. 52.8244 iterations 0
Cbc0038I Pass  47: suminf.    0.75595 (31) obj. 52.8244 iterations 1
Cbc0038I Pass  48: suminf.    0.75595 (31) obj. 52.8244 iterations 0
Cbc0038I Pass  49: suminf.    0.75595 (31) obj. 52.8244 iterations 1
Cbc0038I Pass  50: suminf.    1.09228 (32) obj. 52.8244 iterations 14
Cbc0038I Pass  51: suminf.    0.51257 (30) obj. 52.8244 iterations 5
Cbc0038I Pass  52: suminf.    0.48591 (30) obj. 52.8244 iterations 8
Cbc0038I Pass  53: suminf.    0.48591 (30) obj. 52.8244 iterations 0
Cbc0038I Pass  54: suminf.    0.48591 (30) obj. 52.8244 iterations 7
Cbc0038I Pass  55: suminf.    0.48591 (30) obj. 52.8244 iterations 0
Cbc0038I Pass  56: suminf.    0.48591 (30) obj. 52.8244 iterations 5
Cbc0038I Pass  57: suminf.    0.83993 (29) obj. 52.8244 iterations 31
Cbc0038I Pass  58: suminf.    0.83993 (29) obj. 52.8244 iterations 19
Cbc0038I Pass  59: suminf.    0.86659 (29) obj. 52.8244 iterations 11
Cbc0038I Pass  60: suminf.    0.86659 (29) obj. 52.8244 iterations 0
Cbc0038I Pass  61: suminf.    0.86659 (29) obj. 52.8244 iterations 7
Cbc0038I Pass  62: suminf.    0.86659 (29) obj. 52.8244 iterations 0
Cbc0038I Pass  63: suminf.    0.86659 (29) obj. 52.8244 iterations 7
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 5604 integers at bound fixed and 0 continuous
Cbc0038I Mini branch and bound did not improve solution (0.27 seconds)
Cbc0038I After 0.27 seconds - Feasibility pump exiting with objective of 65.7373 - took 0.15 seconds
Cbc0012I Integer solution of 65.737311 found by feasibility pump after 0 iterations and 0 nodes (0.27 seconds)
Cbc0012I Integer solution of 15.435421 found by DiveCoefficient after 4664 iterations and 0 nodes (1.82 seconds)
Cbc0031I 529 added rows had average density of 18.829868
Cbc0013I At root node, 529 cuts changed objective from 1.1727273 to 15.435421 in 17 passes
Cbc0014I Cut generator 0 (Probing) - 672 row cuts average 2.0 elements, 0 column cuts (72 active)  in 0.275 seconds - new frequency is 1
Cbc0014I Cut generator 1 (Gomory) - 215 row cuts average 154.6 elements, 0 column cuts (0 active)  in 0.224 seconds - new frequency is 1
Cbc0014I Cut generator 2 (Knapsack) - 620 row cuts average 2.0 elements, 0 column cuts (0 active)  in 0.020 seconds - new frequency is 1
Cbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.005 seconds - new frequency is -100
Cbc0014I Cut generator 4 (MixedIntegerRounding2) - 643 row cuts average 24.1 elements, 0 column cuts (0 active)  in 0.039 seconds - new frequency is 1
Cbc0014I Cut generator 5 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.002 seconds - new frequency is -100
Cbc0014I Cut generator 6 (TwoMirCuts) - 278 row cuts average 134.5 elements, 0 column cuts (0 active)  in 0.064 seconds - new frequency is 1
Cbc0014I Cut generator 7 (ZeroHalf) - 203 row cuts average 52.0 elements, 0 column cuts (0 active)  in 0.209 seconds - new frequency is 1
Cbc0030I Thread 0 used 0 times,  waiting to start 0.166085, 0 cpu time, 0 locks, 0 locked, 0 waiting for locks
Cbc0030I Thread 1 used 0 times,  waiting to start 0.1522069, 0 cpu time, 0 locks, 0 locked, 0 waiting for locks
Cbc0030I Thread 2 used 0 times,  waiting to start 0.13843298, 0 cpu time, 0 locks, 0 locked, 0 waiting for locks
Cbc0030I Thread 3 used 0 times,  waiting to start 0.12469006, 0 cpu time, 0 locks, 0 locked, 0 waiting for locks
Cbc0030I Thread 4 used 0 times,  waiting to start 0.11093187, 0 cpu time, 0 locks, 0 locked, 0 waiting for locks
Cbc0030I Thread 5 used 0 times,  waiting to start 0.096831083, 0 cpu time, 0 locks, 0 locked, 0 waiting for locks
Cbc0030I Thread 6 used 0 times,  waiting to start 0.08316493, 0 cpu time, 0 locks, 0 locked, 0 waiting for locks
Cbc0030I Thread 7 used 0 times,  waiting to start 0.069493055, 0 cpu time, 0 locks, 0 locked, 0 waiting for locks
Cbc0030I Thread 8 used 0 times,  waiting to start 0.05408597, 0 cpu time, 0 locks, 0 locked, 0 waiting for locks
Cbc0030I Thread 9 used 0 times,  waiting to start 0.037426949, 0 cpu time, 0 locks, 0 locked, 0 waiting for locks
Cbc0030I Thread 10 used 0 times,  waiting to start 0.020802021, 0 cpu time, 0 locks, 0 locked, 0 waiting for locks
Cbc0030I Thread 11 used 0 times,  waiting to start 0.0050840378, 0 cpu time, 0 locks, 0 locked, 0 waiting for locks
Cbc0030I Main thread 0 waiting for threads,  1 locks, 5.0067902e-06 locked, 0 waiting for locks
Cbc0001I Search completed - best objective 15.4354213047654, took 4664 iterations and 0 nodes (2.05 seconds)
Cbc0035I Maximum depth 0, 0 variables fixed on reduced cost
Cuts at root node changed objective from 1.17273 to 15.4354
Probing was tried 221 times and created 8736 cuts of which 936 were active after adding rounds of cuts (3.580 seconds)
Gomory was tried 221 times and created 2795 cuts of which 0 were active after adding rounds of cuts (2.915 seconds)
Knapsack was tried 221 times and created 8060 cuts of which 0 were active after adding rounds of cuts (0.259 seconds)
Clique was tried 221 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.062 seconds)
MixedIntegerRounding2 was tried 221 times and created 8359 cuts of which 0 were active after adding rounds of cuts (0.511 seconds)
FlowCover was tried 221 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.032 seconds)
TwoMirCuts was tried 221 times and created 3614 cuts of which 0 were active after adding rounds of cuts (0.830 seconds)
ZeroHalf was tried 221 times and created 2639 cuts of which 0 were active after adding rounds of cuts (2.723 seconds)

Result - Optimal solution found

Objective value:                15.43542130
Enumerated nodes:               0
Total iterations:               4664
Time (CPU seconds):             1.95
Time (Wallclock seconds):       2.06

Option for printingOptions changed from normal to all
Total time (CPU seconds):       1.96   (Wallclock seconds):       2.08

