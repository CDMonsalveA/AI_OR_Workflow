Welcome to the CBC MILP Solver 
Version: 2.10.3 
Build Date: Dec 15 2019 

command line - /home/cdmonsalvea/AI_OR_Workflow/.venv/lib/python3.10/site-packages/pulp/solverdir/cbc/linux/64/cbc /tmp/b6aeeec0ad3b421499d172f96c9a3045-pulp.mps -sec 3600 -timeMode elapsed -branch -printingOptions all -solution /tmp/b6aeeec0ad3b421499d172f96c9a3045-pulp.sol (default strategy 1)
At line 2 NAME          MODEL
At line 3 ROWS
At line 101 COLUMNS
At line 7158 RHS
At line 7255 BOUNDS
At line 7304 ENDATA
Problem MODEL has 96 rows, 2352 columns and 4656 elements
Coin0008I MODEL read with 0 errors
seconds was changed from 1e+100 to 3600
Option for timeMode changed from cpu to elapsed
Continuous objective value is 1.98562e+07 - 0.00 seconds
Cgl0004I processed model has 96 rows, 2352 columns (48 integer (48 of which binary)) and 4656 elements
Cbc0038I Initial state - 48 integers unsatisfied sum - 6.32941
Cbc0038I Pass   1: suminf.    0.21752 (1) obj. 6.56899e+08 iterations 47
Cbc0038I Pass   2: suminf.    0.21752 (1) obj. 6.56899e+08 iterations 0
Cbc0038I Solution found of 6.57193e+08
Cbc0038I Relaxing continuous gives 2.89079e+08
Cbc0038I Before mini branch and bound, 0 integers at bound fixed and 2209 continuous
Cbc0038I Full problem 96 rows 2352 columns, reduced to 92 rows 137 columns
Cbc0038I Mini branch and bound improved solution from 2.89079e+08 to 1.32507e+08 (0.03 seconds)
Cbc0038I Freeing continuous variables gives a solution of 1.23449e+08
Cbc0038I Round again with cutoff of 1.13089e+08
Cbc0038I Pass   3: suminf.    2.14964 (20) obj. 1.13089e+08 iterations 59
Cbc0038I Pass   4: suminf.    1.73039 (20) obj. 1.13089e+08 iterations 10
Cbc0038I Pass   5: suminf.    0.56329 (7) obj. 1.13089e+08 iterations 35
Cbc0038I Pass   6: suminf.    0.16648 (4) obj. 1.13089e+08 iterations 27
Cbc0038I Pass   7: suminf.    0.43064 (5) obj. 1.13089e+08 iterations 25
Cbc0038I Pass   8: suminf.    0.50289 (3) obj. 1.13089e+08 iterations 25
Cbc0038I Pass   9: suminf.    0.34473 (6) obj. 1.13089e+08 iterations 18
Cbc0038I Pass  10: suminf.    2.01932 (11) obj. 1.13089e+08 iterations 22
Cbc0038I Pass  11: suminf.    2.01932 (11) obj. 1.13089e+08 iterations 0
Cbc0038I Pass  12: suminf.    2.07025 (11) obj. 1.13089e+08 iterations 14
Cbc0038I Pass  13: suminf.    1.58386 (10) obj. 1.13089e+08 iterations 5
Cbc0038I Pass  14: suminf.    1.97631 (11) obj. 1.13089e+08 iterations 7
Cbc0038I Pass  15: suminf.    1.50000 (11) obj. 1.13089e+08 iterations 1
Cbc0038I Pass  16: suminf.    1.13757 (11) obj. 1.13089e+08 iterations 5
Cbc0038I Pass  17: suminf.    1.85176 (12) obj. 1.13089e+08 iterations 6
Cbc0038I Pass  18: suminf.    1.75401 (12) obj. 1.13089e+08 iterations 1
Cbc0038I Pass  19: suminf.    1.18624 (10) obj. 1.13089e+08 iterations 6
Cbc0038I Pass  20: suminf.    1.75401 (12) obj. 1.13089e+08 iterations 6
Cbc0038I Pass  21: suminf.    0.85077 (10) obj. 1.13089e+08 iterations 5
Cbc0038I Pass  22: suminf.    1.48587 (11) obj. 1.13089e+08 iterations 6
Cbc0038I Pass  23: suminf.    0.48688 (8) obj. 1.13089e+08 iterations 37
Cbc0038I Pass  24: suminf.    1.87909 (12) obj. 1.13089e+08 iterations 19
Cbc0038I Pass  25: suminf.    1.84804 (12) obj. 1.13089e+08 iterations 1
Cbc0038I Pass  26: suminf.    1.48587 (11) obj. 1.13089e+08 iterations 13
Cbc0038I Pass  27: suminf.    0.85077 (10) obj. 1.13089e+08 iterations 8
Cbc0038I Pass  28: suminf.    1.48587 (11) obj. 1.13089e+08 iterations 6
Cbc0038I Pass  29: suminf.    0.63254 (6) obj. 1.13089e+08 iterations 30
Cbc0038I Pass  30: suminf.    1.66007 (11) obj. 1.13089e+08 iterations 20
Cbc0038I Pass  31: suminf.    1.45017 (12) obj. 1.13089e+08 iterations 17
Cbc0038I Pass  32: suminf.    1.45017 (12) obj. 1.13089e+08 iterations 0
Cbc0038I Rounding solution of 1.20858e+08 is better than previous of 1.23449e+08

Cbc0038I Before mini branch and bound, 0 integers at bound fixed and 2186 continuous
Cbc0038I Full problem 96 rows 2352 columns, reduced to 79 rows 144 columns
Cbc0038I Mini branch and bound improved solution from 1.20858e+08 to 1.04854e+08 (0.11 seconds)
Cbc0038I Freeing continuous variables gives a solution of 1.0284e+08
Cbc0038I Round again with cutoff of 8.62436e+07
Cbc0038I Pass  32: suminf.    2.80923 (25) obj. 8.62436e+07 iterations 5
Cbc0038I Pass  33: suminf.    2.25247 (24) obj. 8.62436e+07 iterations 7
Cbc0038I Pass  34: suminf.    1.33480 (16) obj. 8.62436e+07 iterations 56
Cbc0038I Pass  35: suminf.    2.80342 (20) obj. 8.62436e+07 iterations 36
Cbc0038I Pass  36: suminf.    2.42294 (20) obj. 8.62436e+07 iterations 4
Cbc0038I Pass  37: suminf.    3.58406 (22) obj. 8.62436e+07 iterations 27
Cbc0038I Pass  38: suminf.    3.58406 (22) obj. 8.62436e+07 iterations 0
Cbc0038I Pass  39: suminf.    3.00924 (22) obj. 8.62436e+07 iterations 10
Cbc0038I Pass  40: suminf.    2.97819 (22) obj. 8.62436e+07 iterations 1
Cbc0038I Pass  41: suminf.    2.92108 (22) obj. 8.62436e+07 iterations 9
Cbc0038I Pass  42: suminf.    2.35164 (21) obj. 8.62436e+07 iterations 2
Cbc0038I Pass  43: suminf.    1.99144 (20) obj. 8.62436e+07 iterations 6
Cbc0038I Pass  44: suminf.    2.35164 (21) obj. 8.62436e+07 iterations 2
Cbc0038I Pass  45: suminf.    2.90653 (21) obj. 8.62436e+07 iterations 48
Cbc0038I Pass  46: suminf.    2.69365 (21) obj. 8.62436e+07 iterations 1
Cbc0038I Pass  47: suminf.    2.27989 (20) obj. 8.62436e+07 iterations 4
Cbc0038I Pass  48: suminf.    3.16613 (21) obj. 8.62436e+07 iterations 20
Cbc0038I Pass  49: suminf.    2.17114 (21) obj. 8.62436e+07 iterations 3
Cbc0038I Pass  50: suminf.    2.17114 (21) obj. 8.62436e+07 iterations 0
Cbc0038I Pass  51: suminf.    2.49261 (20) obj. 8.62436e+07 iterations 12
Cbc0038I Pass  52: suminf.    2.14274 (21) obj. 8.62436e+07 iterations 7
Cbc0038I Pass  53: suminf.    2.49261 (20) obj. 8.62436e+07 iterations 15
Cbc0038I Pass  54: suminf.    2.10659 (21) obj. 8.62436e+07 iterations 7
Cbc0038I Pass  55: suminf.    1.56529 (15) obj. 8.62436e+07 iterations 18
Cbc0038I Pass  56: suminf.    2.54028 (21) obj. 8.62436e+07 iterations 12
Cbc0038I Pass  57: suminf.    2.54028 (21) obj. 8.62436e+07 iterations 0
Cbc0038I Pass  58: suminf.    3.26626 (21) obj. 8.62436e+07 iterations 13
Cbc0038I Pass  59: suminf.    2.42759 (20) obj. 8.62436e+07 iterations 8
Cbc0038I Pass  60: suminf.    2.76075 (21) obj. 8.62436e+07 iterations 4
Cbc0038I Pass  61: suminf.    2.17114 (21) obj. 8.62436e+07 iterations 3
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 0 integers at bound fixed and 2212 continuous
Cbc0038I Full problem 96 rows 2352 columns, reduced to 60 rows 102 columns
Cbc0038I Mini branch and bound did not improve solution (0.18 seconds)
Cbc0038I After 0.18 seconds - Feasibility pump exiting with objective of 1.0284e+08 - took 0.14 seconds
Cbc0012I Integer solution of 1.0284048e+08 found by feasibility pump after 0 iterations and 0 nodes (0.18 seconds)
Cbc0012I Integer solution of 95705575 found by DiveCoefficient after 141 iterations and 0 nodes (0.27 seconds)
Cbc0031I 73 added rows had average density of 96.684932
Cbc0013I At root node, 73 cuts changed objective from 19856216 to 88466948 in 12 passes
Cbc0014I Cut generator 0 (Probing) - 2 row cuts average 48.0 elements, 0 column cuts (0 active)  in 0.017 seconds - new frequency is -100
Cbc0014I Cut generator 1 (Gomory) - 70 row cuts average 72.0 elements, 0 column cuts (0 active)  in 0.006 seconds - new frequency is 1
Cbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.002 seconds - new frequency is -100
Cbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100
Cbc0014I Cut generator 4 (MixedIntegerRounding2) - 1 row cuts average 430.0 elements, 0 column cuts (0 active)  in 0.005 seconds - new frequency is -100
Cbc0014I Cut generator 5 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.020 seconds - new frequency is -100
Cbc0014I Cut generator 6 (TwoMirCuts) - 96 row cuts average 116.5 elements, 0 column cuts (0 active)  in 0.006 seconds - new frequency is 1
Cbc0010I After 0 nodes, 1 on tree, 95705575 best solution, best possible 88466948 (0.28 seconds)
Cbc0012I Integer solution of 90922311 found by DiveCoefficient after 156 iterations and 2 nodes (0.29 seconds)
Cbc0012I Integer solution of 90882512 found by DiveCoefficient after 172 iterations and 4 nodes (0.31 seconds)
Cbc0012I Integer solution of 90817755 found by DiveCoefficient after 175 iterations and 5 nodes (0.32 seconds)
Cbc0012I Integer solution of 89769822 found by DiveCoefficient after 186 iterations and 6 nodes (0.33 seconds)
Cbc0016I Integer solution of 89754578 found by strong branching after 210 iterations and 8 nodes (0.34 seconds)
Cbc0012I Integer solution of 89720231 found by DiveCoefficient after 231 iterations and 10 nodes (0.35 seconds)
Cbc0012I Integer solution of 89398301 found by DiveCoefficient after 235 iterations and 11 nodes (0.36 seconds)
Cbc0004I Integer solution of 89334439 found after 239 iterations and 13 nodes (0.36 seconds)
Cbc0012I Integer solution of 89219783 found by DiveCoefficient after 256 iterations and 17 nodes (0.37 seconds)
Cbc0012I Integer solution of 89155921 found by rounding after 275 iterations and 19 nodes (0.38 seconds)
Cbc0012I Integer solution of 89042317 found by DiveCoefficient after 285 iterations and 21 nodes (0.39 seconds)
Cbc0001I Search completed - best objective 89042317.22362038, took 325 iterations and 24 nodes (0.39 seconds)
Cbc0032I Strong branching done 134 times (664 iterations), fathomed 3 nodes and fixed 6 variables
Cbc0035I Maximum depth 8, 17 variables fixed on reduced cost
Cuts at root node changed objective from 1.98562e+07 to 8.84669e+07
Probing was tried 12 times and created 2 cuts of which 0 were active after adding rounds of cuts (0.017 seconds)
Gomory was tried 33 times and created 70 cuts of which 0 were active after adding rounds of cuts (0.008 seconds)
Knapsack was tried 12 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.002 seconds)
Clique was tried 12 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)
MixedIntegerRounding2 was tried 12 times and created 1 cuts of which 0 were active after adding rounds of cuts (0.005 seconds)
FlowCover was tried 12 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.020 seconds)
TwoMirCuts was tried 33 times and created 100 cuts of which 0 were active after adding rounds of cuts (0.008 seconds)
ZeroHalf was tried 1 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)

Result - Optimal solution found

Objective value:                89042317.22362038
Enumerated nodes:               24
Total iterations:               325
Time (CPU seconds):             0.37
Time (Wallclock seconds):       0.40

Option for printingOptions changed from normal to all
Total time (CPU seconds):       0.37   (Wallclock seconds):       0.40

