Welcome to the CBC MILP Solver 
Version: 2.10.3 
Build Date: Dec 15 2019 

command line - /home/cdmonsalvea/AI_OR_Workflow/.venv/lib/python3.10/site-packages/pulp/solverdir/cbc/linux/64/cbc /tmp/b5eda1e4b51d458187ab9c747aa7ab25-pulp.mps -sec 600 -threads 12 -timeMode elapsed -branch -printingOptions all -solution /tmp/b5eda1e4b51d458187ab9c747aa7ab25-pulp.sol (default strategy 1)
At line 2 NAME          MODEL
At line 3 ROWS
At line 139 COLUMNS
At line 22786 RHS
At line 22921 BOUNDS
At line 27478 ENDATA
Problem MODEL has 134 rows, 4556 columns and 9045 elements
Coin0008I MODEL read with 0 errors
seconds was changed from 1e+100 to 600
threads was changed from 0 to 12
Option for timeMode changed from cpu to elapsed
Continuous objective value is 1.15455 - 0.00 seconds
Cgl0004I processed model has 134 rows, 4556 columns (4556 integer (4556 of which binary)) and 9045 elements
Cbc0038I Initial state - 67 integers unsatisfied sum - 1
Cbc0038I Pass   1: suminf.    1.00000 (67) obj. 1.15455 iterations 0
Cbc0038I Pass   2: suminf.    0.65672 (44) obj. 27.3128 iterations 23
Cbc0038I Pass   3: suminf.    0.23881 (16) obj. 59.1575 iterations 28
Cbc0038I Solution found of 77.3545
Cbc0038I Before mini branch and bound, 4489 integers at bound fixed and 0 continuous
Cbc0038I Full problem 134 rows 4556 columns, reduced to 0 rows 0 columns
Cbc0038I Mini branch and bound did not improve solution (0.10 seconds)
Cbc0038I Round again with cutoff of 69.7345
Cbc0038I Pass   4: suminf.    1.00000 (67) obj. 1.15455 iterations 0
Cbc0038I Pass   5: suminf.    0.79104 (53) obj. 17.0769 iterations 14
Cbc0038I Pass   6: suminf.    0.46269 (31) obj. 42.0978 iterations 22
Cbc0038I Pass   7: suminf.    0.39999 (7) obj. 69.7345 iterations 28
Cbc0038I Pass   8: suminf.    0.10448 (7) obj. 69.3934 iterations 1
Cbc0038I Pass   9: suminf.    0.39999 (7) obj. 69.7345 iterations 4
Cbc0038I Pass  10: suminf.    0.10448 (7) obj. 69.3934 iterations 1
Cbc0038I Pass  11: suminf.    0.76519 (8) obj. 69.7345 iterations 37
Cbc0038I Pass  12: suminf.    0.20579 (7) obj. 69.7345 iterations 14
Cbc0038I Pass  13: suminf.    0.23564 (7) obj. 69.7345 iterations 10
Cbc0038I Pass  14: suminf.    0.23564 (7) obj. 69.7345 iterations 0
Cbc0038I Pass  15: suminf.    0.20579 (7) obj. 69.7345 iterations 7
Cbc0038I Pass  16: suminf.    0.20579 (7) obj. 69.7345 iterations 0
Cbc0038I Pass  17: suminf.    0.23564 (7) obj. 69.7345 iterations 7
Cbc0038I Pass  18: suminf.    0.42224 (11) obj. 69.7345 iterations 89
Cbc0038I Pass  19: suminf.    0.14925 (9) obj. 69.6547 iterations 55
Cbc0038I Pass  20: suminf.    0.21842 (7) obj. 69.7345 iterations 63
Cbc0038I Pass  21: suminf.    0.13433 (7) obj. 69.6374 iterations 62
Cbc0038I Pass  22: suminf.    0.21842 (7) obj. 69.7345 iterations 58
Cbc0038I Pass  23: suminf.    0.87917 (9) obj. 69.7345 iterations 100
Cbc0038I Pass  24: suminf.    0.23039 (8) obj. 69.7345 iterations 47
Cbc0038I Pass  25: suminf.    0.17069 (7) obj. 69.7345 iterations 15
Cbc0038I Pass  26: suminf.    0.17069 (7) obj. 69.7345 iterations 0
Cbc0038I Pass  27: suminf.    0.20054 (7) obj. 69.7345 iterations 12
Cbc0038I Pass  28: suminf.    0.20054 (7) obj. 69.7345 iterations 0
Cbc0038I Pass  29: suminf.    0.17069 (7) obj. 69.7345 iterations 14
Cbc0038I Pass  30: suminf.    0.61894 (12) obj. 69.7345 iterations 120
Cbc0038I Pass  31: suminf.    0.13433 (9) obj. 69.7012 iterations 86
Cbc0038I Pass  32: suminf.    0.16320 (9) obj. 69.7345 iterations 92
Cbc0038I Pass  33: suminf.    0.13433 (8) obj. 69.7012 iterations 88
Cbc0038I Rounding solution of 62.6188 is better than previous of 77.3545

Cbc0038I Before mini branch and bound, 4350 integers at bound fixed and 0 continuous
Cbc0038I Full problem 134 rows 4556 columns, reduced to 77 rows 161 columns
Cbc0038I Mini branch and bound improved solution from 62.6188 to 46.5278 (0.16 seconds)
Cbc0038I Round again with cutoff of 37.4532
Cbc0038I Pass  33: suminf.    1.00000 (67) obj. 1.15455 iterations 0
Cbc0038I Pass  34: suminf.    0.70149 (47) obj. 23.9008 iterations 20
Cbc0038I Pass  35: suminf.    0.53731 (36) obj. 36.4113 iterations 11
Cbc0038I Pass  36: suminf.    0.60504 (36) obj. 37.4532 iterations 24
Cbc0038I Pass  37: suminf.    0.60504 (36) obj. 37.4532 iterations 0
Cbc0038I Pass  38: suminf.    0.60504 (36) obj. 37.4532 iterations 8
Cbc0038I Pass  39: suminf.    0.60504 (36) obj. 37.4532 iterations 0
Cbc0038I Pass  40: suminf.    0.60504 (36) obj. 37.4532 iterations 1
Cbc0038I Pass  41: suminf.    0.60504 (36) obj. 37.4532 iterations 0
Cbc0038I Pass  42: suminf.    0.60504 (36) obj. 37.4532 iterations 1
Cbc0038I Pass  43: suminf.    1.25836 (30) obj. 37.4532 iterations 31
Cbc0038I Pass  44: suminf.    0.46269 (28) obj. 37.4079 iterations 21
Cbc0038I Pass  45: suminf.    0.50190 (28) obj. 37.4532 iterations 25
Cbc0038I Pass  46: suminf.    0.46269 (28) obj. 37.4079 iterations 23
Cbc0038I Pass  47: suminf.    0.50190 (28) obj. 37.4532 iterations 22
Cbc0038I Pass  48: suminf.    0.95447 (27) obj. 37.4532 iterations 41
Cbc0038I Pass  49: suminf.    0.95447 (27) obj. 37.4532 iterations 32
Cbc0038I Pass  50: suminf.    0.92462 (27) obj. 37.4532 iterations 19
Cbc0038I Pass  51: suminf.    0.92462 (27) obj. 37.4532 iterations 0
Cbc0038I Pass  52: suminf.    0.92462 (27) obj. 37.4532 iterations 8
Cbc0038I Pass  53: suminf.    0.92462 (27) obj. 37.4532 iterations 1
Cbc0038I Pass  54: suminf.    0.92462 (27) obj. 37.4532 iterations 9
Cbc0038I Pass  55: suminf.    0.92462 (27) obj. 37.4532 iterations 1
Cbc0038I Pass  56: suminf.    0.95447 (27) obj. 37.4532 iterations 11
Cbc0038I Pass  57: suminf.    0.95447 (27) obj. 37.4532 iterations 0
Cbc0038I Pass  58: suminf.    0.92462 (27) obj. 37.4532 iterations 11
Cbc0038I Pass  59: suminf.    0.45601 (24) obj. 37.4532 iterations 58
Cbc0038I Pass  60: suminf.    0.38806 (24) obj. 37.3747 iterations 46
Cbc0038I Pass  61: suminf.    0.45601 (24) obj. 37.4532 iterations 50
Cbc0038I Pass  62: suminf.    0.41791 (24) obj. 37.4092 iterations 39
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 4431 integers at bound fixed and 0 continuous
Cbc0038I Mini branch and bound did not improve solution (0.21 seconds)
Cbc0038I After 0.21 seconds - Feasibility pump exiting with objective of 46.5278 - took 0.13 seconds
Cbc0012I Integer solution of 46.527818 found by feasibility pump after 0 iterations and 0 nodes (0.21 seconds)
Cbc0031I 471 added rows had average density of 19.963907
Cbc0013I At root node, 471 cuts changed objective from 1.1545455 to 14.454989 in 20 passes
Cbc0014I Cut generator 0 (Probing) - 723 row cuts average 2.6 elements, 0 column cuts (38 active)  in 0.276 seconds - new frequency is 1
Cbc0014I Cut generator 1 (Gomory) - 213 row cuts average 166.5 elements, 0 column cuts (0 active)  in 0.124 seconds - new frequency is 1
Cbc0014I Cut generator 2 (Knapsack) - 617 row cuts average 2.0 elements, 0 column cuts (0 active)  in 0.023 seconds - new frequency is 1
Cbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.005 seconds - new frequency is -100
Cbc0014I Cut generator 4 (MixedIntegerRounding2) - 618 row cuts average 33.8 elements, 0 column cuts (0 active)  in 0.044 seconds - new frequency is 1
Cbc0014I Cut generator 5 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.003 seconds - new frequency is -100
Cbc0014I Cut generator 6 (TwoMirCuts) - 267 row cuts average 134.5 elements, 0 column cuts (0 active)  in 0.052 seconds - new frequency is 1
Cbc0014I Cut generator 7 (ZeroHalf) - 184 row cuts average 29.5 elements, 0 column cuts (0 active)  in 0.213 seconds - new frequency is 1
Cbc0016I Integer solution of 14.455022 found by strong branching after 4461 iterations and 0 nodes (1.71 seconds)
Cbc0030I Thread 0 used 0 times,  waiting to start 0.16110301, 0 cpu time, 0 locks, 0 locked, 0 waiting for locks
Cbc0030I Thread 1 used 0 times,  waiting to start 0.14818907, 0 cpu time, 0 locks, 0 locked, 0 waiting for locks
Cbc0030I Thread 2 used 0 times,  waiting to start 0.13523912, 0 cpu time, 0 locks, 0 locked, 0 waiting for locks
Cbc0030I Thread 3 used 0 times,  waiting to start 0.12225199, 0 cpu time, 0 locks, 0 locked, 0 waiting for locks
Cbc0030I Thread 4 used 0 times,  waiting to start 0.10746098, 0 cpu time, 0 locks, 0 locked, 0 waiting for locks
Cbc0030I Thread 5 used 0 times,  waiting to start 0.092562914, 0 cpu time, 0 locks, 0 locked, 0 waiting for locks
Cbc0030I Thread 6 used 0 times,  waiting to start 0.077859879, 0 cpu time, 0 locks, 0 locked, 0 waiting for locks
Cbc0030I Thread 7 used 0 times,  waiting to start 0.063433886, 0 cpu time, 0 locks, 0 locked, 0 waiting for locks
Cbc0030I Thread 8 used 0 times,  waiting to start 0.048316956, 0 cpu time, 0 locks, 0 locked, 0 waiting for locks
Cbc0030I Thread 9 used 0 times,  waiting to start 0.033974886, 0 cpu time, 0 locks, 0 locked, 0 waiting for locks
Cbc0030I Thread 10 used 0 times,  waiting to start 0.019852877, 0 cpu time, 0 locks, 0 locked, 0 waiting for locks
Cbc0030I Thread 11 used 0 times,  waiting to start 0.0052270889, 0 cpu time, 0 locks, 0 locked, 0 waiting for locks
Cbc0030I Main thread 0 waiting for threads,  1 locks, 5.9604645e-06 locked, 0 waiting for locks
Cbc0001I Search completed - best objective 14.45502163050573, took 4461 iterations and 0 nodes (1.94 seconds)
Cbc0032I Strong branching done 26 times (455 iterations), fathomed 13 nodes and fixed 0 variables
Cbc0035I Maximum depth 0, 0 variables fixed on reduced cost
Cuts at root node changed objective from 1.15455 to 14.4631
Probing was tried 260 times and created 9399 cuts of which 494 were active after adding rounds of cuts (3.592 seconds)
Gomory was tried 260 times and created 2769 cuts of which 0 were active after adding rounds of cuts (1.612 seconds)
Knapsack was tried 260 times and created 8021 cuts of which 0 were active after adding rounds of cuts (0.297 seconds)
Clique was tried 260 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.069 seconds)
MixedIntegerRounding2 was tried 260 times and created 8034 cuts of which 0 were active after adding rounds of cuts (0.571 seconds)
FlowCover was tried 260 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.033 seconds)
TwoMirCuts was tried 260 times and created 3471 cuts of which 0 were active after adding rounds of cuts (0.674 seconds)
ZeroHalf was tried 260 times and created 2392 cuts of which 0 were active after adding rounds of cuts (2.764 seconds)

Result - Optimal solution found

Objective value:                14.45502163
Enumerated nodes:               0
Total iterations:               4461
Time (CPU seconds):             1.88
Time (Wallclock seconds):       1.95

Option for printingOptions changed from normal to all
Total time (CPU seconds):       1.88   (Wallclock seconds):       1.96

