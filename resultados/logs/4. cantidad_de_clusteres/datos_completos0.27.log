Welcome to the CBC MILP Solver 
Version: 2.10.3 
Build Date: Dec 15 2019 

command line - /home/cdmonsalvea/AI_OR_Workflow/.venv/lib/python3.10/site-packages/pulp/solverdir/cbc/linux/64/cbc /tmp/4b507d55709e493c9e4e175b202ebfaf-pulp.mps -sec 60 -threads 12 -timeMode elapsed -branch -printingOptions all -solution /tmp/4b507d55709e493c9e4e175b202ebfaf-pulp.sol (default strategy 1)
At line 2 NAME          MODEL
At line 3 ROWS
At line 241 COLUMNS
At line 70216 RHS
At line 70453 BOUNDS
At line 84496 ENDATA
Problem MODEL has 236 rows, 14042 columns and 27966 elements
Coin0008I MODEL read with 0 errors
seconds was changed from 1e+100 to 60
threads was changed from 0 to 12
Option for timeMode changed from cpu to elapsed
Continuous objective value is 1.27414 - 0.01 seconds
Cgl0004I processed model has 236 rows, 14042 columns (14042 integer (14042 of which binary)) and 27966 elements
Cbc0038I Initial state - 118 integers unsatisfied sum - 1
Cbc0038I Pass   1: suminf.    1.00000 (118) obj. 1.27414 iterations 0
Cbc0038I Pass   2: suminf.    0.80508 (95) obj. 30.331 iterations 23
Cbc0038I Pass   3: suminf.    0.71186 (84) obj. 44.2277 iterations 11
Cbc0038I Pass   4: suminf.    0.56780 (67) obj. 65.7045 iterations 17
Cbc0038I Pass   5: suminf.    0.38136 (45) obj. 93.498 iterations 22
Cbc0038I Pass   6: suminf.    0.19492 (23) obj. 121.291 iterations 22
Cbc0038I Solution found of 150.348
Cbc0038I Before mini branch and bound, 13924 integers at bound fixed and 0 continuous
Cbc0038I Full problem 236 rows 14042 columns, reduced to 0 rows 0 columns
Cbc0038I Mini branch and bound did not improve solution (0.18 seconds)
Cbc0038I Round again with cutoff of 135.441
Cbc0038I Pass   7: suminf.    1.00000 (118) obj. 1.27414 iterations 0
Cbc0038I Pass   8: suminf.    0.84746 (100) obj. 24.0143 iterations 18
Cbc0038I Pass   9: suminf.    0.72881 (86) obj. 41.701 iterations 14
Cbc0038I Pass  10: suminf.    0.60169 (71) obj. 60.6511 iterations 15
Cbc0038I Pass  11: suminf.    0.51695 (61) obj. 73.2845 iterations 10
Cbc0038I Pass  12: suminf.    0.38983 (46) obj. 92.2346 iterations 15
Cbc0038I Pass  13: suminf.    0.18644 (22) obj. 122.555 iterations 24
Cbc0038I Pass  14: suminf.    0.29999 (12) obj. 135.441 iterations 24
Cbc0038I Pass  15: suminf.    0.10169 (12) obj. 135.188 iterations 1
Cbc0038I Pass  16: suminf.    0.29999 (12) obj. 135.441 iterations 6
Cbc0038I Pass  17: suminf.    0.10169 (12) obj. 135.188 iterations 1
Cbc0038I Pass  18: suminf.    1.04826 (13) obj. 135.441 iterations 31
Cbc0038I Pass  19: suminf.    0.24865 (12) obj. 135.441 iterations 5
Cbc0038I Pass  20: suminf.    0.24865 (12) obj. 135.441 iterations 6
Cbc0038I Pass  21: suminf.    0.24865 (12) obj. 135.441 iterations 0
Cbc0038I Pass  22: suminf.    0.23170 (11) obj. 135.441 iterations 7
Cbc0038I Pass  23: suminf.    0.23170 (11) obj. 135.441 iterations 0
Cbc0038I Pass  24: suminf.    0.23170 (11) obj. 135.441 iterations 5
Cbc0038I Pass  25: suminf.    0.23170 (11) obj. 135.441 iterations 0
Cbc0038I Pass  26: suminf.    0.23170 (11) obj. 135.441 iterations 5
Cbc0038I Pass  27: suminf.    0.58360 (17) obj. 135.441 iterations 76
Cbc0038I Pass  28: suminf.    0.20394 (16) obj. 135.441 iterations 40
Cbc0038I Pass  29: suminf.    0.13614 (14) obj. 135.441 iterations 17
Cbc0038I Pass  30: suminf.    0.13614 (14) obj. 135.441 iterations 1
Cbc0038I Pass  31: suminf.    0.13614 (14) obj. 135.441 iterations 18
Cbc0038I Pass  32: suminf.    0.13614 (14) obj. 135.441 iterations 1
Cbc0038I Pass  33: suminf.    0.13614 (14) obj. 135.441 iterations 24
Cbc0038I Pass  34: suminf.    1.08958 (14) obj. 135.441 iterations 80
Cbc0038I Pass  35: suminf.    0.11864 (12) obj. 135.196 iterations 90
Cbc0038I Pass  36: suminf.    0.31121 (12) obj. 135.441 iterations 93
Cbc0038I Rounding solution of 115.932 is better than previous of 150.348

Cbc0038I Before mini branch and bound, 13807 integers at bound fixed and 0 continuous
Cbc0038I Full problem 236 rows 14042 columns, reduced to 55 rows 111 columns
Cbc0038I Mini branch and bound improved solution from 115.932 to 106.025 (0.37 seconds)
Cbc0038I Round again with cutoff of 85.0746
Cbc0038I Pass  36: suminf.    1.00000 (118) obj. 1.27414 iterations 0
Cbc0038I Pass  37: suminf.    0.77119 (91) obj. 35.3843 iterations 27
Cbc0038I Pass  38: suminf.    0.65254 (77) obj. 53.0711 iterations 14
Cbc0038I Pass  39: suminf.    0.56780 (67) obj. 65.7045 iterations 10
Cbc0038I Pass  40: suminf.    0.77031 (52) obj. 85.0746 iterations 19
Cbc0038I Pass  41: suminf.    0.44068 (52) obj. 84.6546 iterations 1
Cbc0038I Pass  42: suminf.    0.77031 (52) obj. 85.0746 iterations 44
Cbc0038I Pass  43: suminf.    0.44068 (52) obj. 84.6546 iterations 1
Cbc0038I Pass  44: suminf.    0.77031 (52) obj. 85.0746 iterations 1
Cbc0038I Pass  45: suminf.    0.72992 (52) obj. 85.0746 iterations 7
Cbc0038I Pass  46: suminf.    0.45763 (50) obj. 85.0605 iterations 8
Cbc0038I Pass  47: suminf.    0.46870 (50) obj. 85.0746 iterations 8
Cbc0038I Pass  48: suminf.    0.44068 (50) obj. 85.0389 iterations 5
Cbc0038I Pass  49: suminf.    0.46870 (50) obj. 85.0746 iterations 5
Cbc0038I Pass  50: suminf.    1.39983 (45) obj. 85.0746 iterations 23
Cbc0038I Pass  51: suminf.    0.39831 (42) obj. 84.9798 iterations 32
Cbc0038I Pass  52: suminf.    0.47268 (42) obj. 85.0746 iterations 30
Cbc0038I Pass  53: suminf.    0.38983 (42) obj. 84.969 iterations 31
Cbc0038I Pass  54: suminf.    0.47268 (42) obj. 85.0746 iterations 28
Cbc0038I Pass  55: suminf.    0.39831 (42) obj. 84.9798 iterations 26
Cbc0038I Pass  56: suminf.    0.47268 (42) obj. 85.0746 iterations 28
Cbc0038I Pass  57: suminf.    0.79654 (43) obj. 85.0746 iterations 38
Cbc0038I Pass  58: suminf.    0.79654 (43) obj. 85.0746 iterations 41
Cbc0038I Pass  59: suminf.    0.81349 (43) obj. 85.0746 iterations 12
Cbc0038I Pass  60: suminf.    0.81349 (43) obj. 85.0746 iterations 2
Cbc0038I Pass  61: suminf.    0.79654 (43) obj. 85.0746 iterations 13
Cbc0038I Pass  62: suminf.    0.79654 (43) obj. 85.0746 iterations 2
Cbc0038I Pass  63: suminf.    0.81349 (43) obj. 85.0746 iterations 17
Cbc0038I Pass  64: suminf.    0.81349 (43) obj. 85.0746 iterations 2
Cbc0038I Pass  65: suminf.    0.79654 (43) obj. 85.0746 iterations 11
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 13885 integers at bound fixed and 0 continuous
Cbc0038I Mini branch and bound did not improve solution (0.52 seconds)
Cbc0038I After 0.52 seconds - Feasibility pump exiting with objective of 106.025 - took 0.39 seconds
Cbc0012I Integer solution of 106.0247 found by feasibility pump after 0 iterations and 0 nodes (0.53 seconds)
Cbc0031I 1065 added rows had average density of 17.893897
Cbc0013I At root node, 1065 cuts changed objective from 1.2741379 to 21.977794 in 34 passes
Cbc0014I Cut generator 0 (Probing) - 973 row cuts average 3.0 elements, 0 column cuts (427 active)  in 1.459 seconds - new frequency is 1
Cbc0014I Cut generator 1 (Gomory) - 245 row cuts average 190.3 elements, 0 column cuts (0 active)  in 0.681 seconds - new frequency is 1
Cbc0014I Cut generator 2 (Knapsack) - 2051 row cuts average 2.0 elements, 0 column cuts (0 active)  in 0.115 seconds - new frequency is 1
Cbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.027 seconds - new frequency is -100
Cbc0014I Cut generator 4 (MixedIntegerRounding2) - 1213 row cuts average 10.0 elements, 0 column cuts (0 active)  in 0.129 seconds - new frequency is 1
Cbc0014I Cut generator 5 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.011 seconds - new frequency is -100
Cbc0014I Cut generator 6 (TwoMirCuts) - 270 row cuts average 158.6 elements, 0 column cuts (0 active)  in 0.200 seconds - new frequency is 1
Cbc0010I After 0 nodes, 1 on tree, 106.0247 best solution, best possible 21.977794 (8.48 seconds)
Cbc0012I Integer solution of 21.98293 found by rounding after 13973 iterations and 1 nodes (8.53 seconds)
Cbc0012I Integer solution of 21.98293 found by heuristic after 13889 iterations and 0 nodes (8.53 seconds)
Cbc0030I Thread 0 used 2 times,  waiting to start 0.23909688, 0.080101 cpu time, 10 locks, 0.0025861263 locked, 4.2915344e-06 waiting for locks
Cbc0030I Thread 1 used 0 times,  waiting to start 0.29841995, 0 cpu time, 0 locks, 0 locked, 0 waiting for locks
Cbc0030I Thread 2 used 0 times,  waiting to start 0.27685499, 0 cpu time, 0 locks, 0 locked, 0 waiting for locks
Cbc0030I Thread 3 used 0 times,  waiting to start 0.25641799, 0 cpu time, 0 locks, 0 locked, 0 waiting for locks
Cbc0030I Thread 4 used 0 times,  waiting to start 0.23601198, 0 cpu time, 0 locks, 0 locked, 0 waiting for locks
Cbc0030I Thread 5 used 0 times,  waiting to start 0.21541715, 0 cpu time, 0 locks, 0 locked, 0 waiting for locks
Cbc0030I Thread 6 used 0 times,  waiting to start 0.19441009, 0 cpu time, 0 locks, 0 locked, 0 waiting for locks
Cbc0030I Thread 7 used 0 times,  waiting to start 0.17358589, 0 cpu time, 0 locks, 0 locked, 0 waiting for locks
Cbc0030I Thread 8 used 0 times,  waiting to start 0.15275502, 0 cpu time, 0 locks, 0 locked, 0 waiting for locks
Cbc0030I Thread 9 used 0 times,  waiting to start 0.13234401, 0 cpu time, 0 locks, 0 locked, 0 waiting for locks
Cbc0030I Thread 10 used 0 times,  waiting to start 0.11082911, 0 cpu time, 0 locks, 0 locked, 0 waiting for locks
Cbc0030I Thread 11 used 0 times,  waiting to start 0.088779211, 0 cpu time, 0 locks, 0 locked, 0 waiting for locks
Cbc0030I Main thread 0.079538107 waiting for threads,  9 locks, 1.6927719e-05 locked, 3.0994415e-06 waiting for locks
Cbc0001I Search completed - best objective 21.98293031099037, took 14052 iterations and 2 nodes (8.62 seconds)
Cbc0032I Strong branching done 286 times (18655 iterations), fathomed 0 nodes and fixed 0 variables
Cbc0035I Maximum depth 0, 0 variables fixed on reduced cost
Cuts at root node changed objective from 1.27414 to 21.9778
Probing was tried 443 times and created 12649 cuts of which 5551 were active after adding rounds of cuts (18.964 seconds)
Gomory was tried 443 times and created 3185 cuts of which 0 were active after adding rounds of cuts (8.850 seconds)
Knapsack was tried 443 times and created 26663 cuts of which 0 were active after adding rounds of cuts (1.499 seconds)
Clique was tried 442 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.351 seconds)
MixedIntegerRounding2 was tried 443 times and created 15769 cuts of which 0 were active after adding rounds of cuts (1.685 seconds)
FlowCover was tried 442 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.149 seconds)
TwoMirCuts was tried 443 times and created 3510 cuts of which 0 were active after adding rounds of cuts (2.597 seconds)
ZeroHalf was tried 13 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.005 seconds)

Result - Optimal solution found

Objective value:                21.98293031
Enumerated nodes:               2
Total iterations:               14052
Time (CPU seconds):             8.52
Time (Wallclock seconds):       8.64

Option for printingOptions changed from normal to all
Total time (CPU seconds):       8.56   (Wallclock seconds):       8.68

