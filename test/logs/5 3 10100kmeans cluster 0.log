Welcome to the CBC MILP Solver 
Version: 2.10.3 
Build Date: Dec 15 2019 

command line - /home/cdmonsalvea/tesis/AI_OR_Workflow/.venv/lib/python3.10/site-packages/pulp/solverdir/cbc/linux/64/cbc /tmp/0146c61690764436ae9b5d22503939b0-pulp.mps -sec 3600 -threads 12 -timeMode elapsed -branch -printingOptions all -solution /tmp/0146c61690764436ae9b5d22503939b0-pulp.sol (default strategy 1)
At line 2 NAME          MODEL
At line 3 ROWS
At line 1604 COLUMNS
At line 9288 RHS
At line 10888 BOUNDS
At line 12449 ENDATA
Problem MODEL has 1599 rows, 1560 columns and 6084 elements
Coin0008I MODEL read with 0 errors
seconds was changed from 1e+100 to 3600
threads was changed from 0 to 12
Option for timeMode changed from cpu to elapsed
Continuous objective value is 3.34143e+07 - 0.01 seconds
Cgl0003I 0 fixed, 0 tightened bounds, 146 strengthened rows, 0 substitutions
Cgl0004I processed model has 1599 rows, 1560 columns (39 integer (39 of which binary)) and 6123 elements
Cbc0038I Initial state - 3 integers unsatisfied sum - 1.037
Cbc0038I Pass   1: suminf.    0.09327 (1) obj. 5.64517e+07 iterations 51
Cbc0038I Solution found of 6.95221e+07
Cbc0038I Relaxing continuous gives 5.5943e+07
Cbc0038I Before mini branch and bound, 36 integers at bound fixed and 1489 continuous
Cbc0038I Full problem 1599 rows 1560 columns, reduced to 27 rows 28 columns
Cbc0038I Mini branch and bound improved solution from 5.5943e+07 to 4.75632e+07 (0.11 seconds)
Cbc0038I Freeing continuous variables gives a solution of 4.72749e+07
Cbc0038I Round again with cutoff of 4.71472e+07
Cbc0038I Reduced cost fixing fixed 1 variables on major pass 2
Cbc0038I Pass   2: suminf.    0.11242 (1) obj. 4.71472e+07 iterations 198
Cbc0038I Pass   3: suminf.    0.34430 (1) obj. 4.71472e+07 iterations 109
Cbc0038I Pass   4: suminf.    0.44393 (2) obj. 4.71472e+07 iterations 162
Cbc0038I Pass   5: suminf.    0.44393 (2) obj. 4.71472e+07 iterations 25
Cbc0038I Pass   6: suminf.    0.12053 (1) obj. 4.71472e+07 iterations 93
Cbc0038I Pass   7: suminf.    0.04787 (1) obj. 4.71472e+07 iterations 45
Cbc0038I Pass   8: suminf.    0.12884 (2) obj. 4.71472e+07 iterations 215
Cbc0038I Pass   9: suminf.    0.07350 (1) obj. 4.71472e+07 iterations 7
Cbc0038I Pass  10: suminf.    0.09751 (1) obj. 4.71472e+07 iterations 44
Cbc0038I Pass  11: suminf.    0.72007 (5) obj. 4.71472e+07 iterations 135
Cbc0038I Pass  12: suminf.    0.08194 (1) obj. 4.71472e+07 iterations 103
Cbc0038I Pass  13: suminf.    0.08673 (1) obj. 4.71472e+07 iterations 30
Cbc0038I Pass  14: suminf.    0.12051 (2) obj. 4.71472e+07 iterations 54
Cbc0038I Pass  15: suminf.    0.70248 (2) obj. 4.71472e+07 iterations 194
Cbc0038I Pass  16: suminf.    0.07055 (1) obj. 4.71472e+07 iterations 294
Cbc0038I Pass  17: suminf.    0.56092 (2) obj. 4.71472e+07 iterations 84
Cbc0038I Pass  18: suminf.    0.51510 (3) obj. 4.71472e+07 iterations 100
Cbc0038I Pass  19: suminf.    0.51510 (3) obj. 4.71472e+07 iterations 2
Cbc0038I Pass  20: suminf.    0.00000 (0) obj. 4.71472e+07 iterations 169
Cbc0038I Solution found of 4.71472e+07
Cbc0038I Relaxing continuous gives 4.70476e+07
Cbc0038I Before mini branch and bound, 22 integers at bound fixed and 1404 continuous
Cbc0038I Full problem 1599 rows 1560 columns, reduced to 135 rows 119 columns
Cbc0038I Mini branch and bound improved solution from 4.70476e+07 to 4.70164e+07 (0.28 seconds)
Cbc0038I Round again with cutoff of 4.68127e+07
Cbc0038I Reduced cost fixing fixed 2 variables on major pass 3
Cbc0038I Pass  21: suminf.    0.14650 (1) obj. 4.68127e+07 iterations 0
Cbc0038I Pass  22: suminf.    0.31732 (1) obj. 4.68127e+07 iterations 78
Cbc0038I Pass  23: suminf.    1.83201 (10) obj. 4.68127e+07 iterations 237
Cbc0038I Pass  24: suminf.    0.97747 (5) obj. 4.68127e+07 iterations 37
Cbc0038I Pass  25: suminf.    0.52176 (2) obj. 4.68127e+07 iterations 373
Cbc0038I Pass  26: suminf.    0.33268 (1) obj. 4.68127e+07 iterations 63
Cbc0038I Pass  27: suminf.    0.43193 (1) obj. 4.68127e+07 iterations 141
Cbc0038I Pass  28: suminf.    0.28221 (2) obj. 4.68127e+07 iterations 147
Cbc0038I Pass  29: suminf.    0.28221 (2) obj. 4.68127e+07 iterations 12
Cbc0038I Pass  30: suminf.    0.27097 (1) obj. 4.68127e+07 iterations 473
Cbc0038I Pass  31: suminf.    0.19464 (1) obj. 4.68127e+07 iterations 459
Cbc0038I Pass  32: suminf.    0.30704 (3) obj. 4.68127e+07 iterations 139
Cbc0038I Pass  33: suminf.    0.08131 (1) obj. 4.68127e+07 iterations 526
Cbc0038I Pass  34: suminf.    0.08752 (1) obj. 4.68127e+07 iterations 430
Cbc0038I Pass  35: suminf.    0.73776 (3) obj. 4.68127e+07 iterations 276
Cbc0038I Pass  36: suminf.    0.35427 (1) obj. 4.68127e+07 iterations 194
Cbc0038I Pass  37: suminf.    0.03626 (1) obj. 4.68127e+07 iterations 318
Cbc0038I Pass  38: suminf.    0.12777 (1) obj. 4.68127e+07 iterations 322
Cbc0038I Pass  39: suminf.    1.27501 (5) obj. 4.68127e+07 iterations 163
Cbc0038I Pass  40: suminf.    0.20822 (1) obj. 4.68127e+07 iterations 200
Cbc0038I Pass  41: suminf.    0.25566 (1) obj. 4.68127e+07 iterations 94
Cbc0038I Pass  42: suminf.    1.12867 (4) obj. 4.68127e+07 iterations 118
Cbc0038I Pass  43: suminf.    0.06779 (1) obj. 4.68127e+07 iterations 77
Cbc0038I Pass  44: suminf.    0.10020 (1) obj. 4.68127e+07 iterations 76
Cbc0038I Pass  45: suminf.    0.67954 (4) obj. 4.68127e+07 iterations 131
Cbc0038I Pass  46: suminf.    0.02947 (1) obj. 4.68127e+07 iterations 735
Cbc0038I Pass  47: suminf.    0.06606 (1) obj. 4.68127e+07 iterations 306
Cbc0038I Pass  48: suminf.    0.95351 (4) obj. 4.68127e+07 iterations 342
Cbc0038I Pass  49: suminf.    0.03638 (1) obj. 4.68127e+07 iterations 335
Cbc0038I Pass  50: suminf.    0.06142 (1) obj. 4.68127e+07 iterations 153
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 15 integers at bound fixed and 1363 continuous
Cbc0038I Full problem 1599 rows 1560 columns, reduced to 203 rows 175 columns
Cbc0038I Mini branch and bound did not improve solution (0.64 seconds)
Cbc0038I After 0.64 seconds - Feasibility pump exiting with objective of 4.70164e+07 - took 0.56 seconds
Cbc0012I Integer solution of 47016432 found by feasibility pump after 0 iterations and 0 nodes (0.64 seconds)
Cbc0038I Full problem 1599 rows 1560 columns, reduced to 286 rows 513 columns
Cbc0013I At root node, 0 cuts changed objective from 45997704 to 45997704 in 1 passes
Cbc0014I Cut generator 0 (Probing) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.001 seconds - new frequency is -100
Cbc0014I Cut generator 1 (Gomory) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100
Cbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.001 seconds - new frequency is -100
Cbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100
Cbc0014I Cut generator 4 (MixedIntegerRounding2) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100
Cbc0014I Cut generator 5 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100
Cbc0010I After 0 nodes, 1 on tree, 47016432 best solution, best possible 45997704 (0.73 seconds)
Cbc0010I After 100 nodes, 17 on tree, 47016432 best solution, best possible 46370591 (1.53 seconds)
Cbc0010I After 200 nodes, 18 on tree, 47016432 best solution, best possible 46376429 (1.67 seconds)
Cbc0012I Integer solution of 46929222 found by heuristic after 6474 iterations and 215 nodes (1.70 seconds)
Cbc0012I Integer solution of 46781406 found by heuristic after 8483 iterations and 272 nodes (1.77 seconds)
Cbc0010I After 300 nodes, 6 on tree, 46781406 best solution, best possible 46409454 (1.86 seconds)
Cbc0010I After 400 nodes, 24 on tree, 46781406 best solution, best possible 46480375 (2.08 seconds)
Cbc0010I After 500 nodes, 27 on tree, 46781406 best solution, best possible 46481059 (2.23 seconds)
Cbc0010I After 600 nodes, 8 on tree, 46781406 best solution, best possible 46481059 (2.33 seconds)
Cbc0010I After 700 nodes, 6 on tree, 46781406 best solution, best possible 46514483 (2.66 seconds)
Cbc0010I After 800 nodes, 6 on tree, 46781406 best solution, best possible 46515911 (2.84 seconds)
Cbc0010I After 900 nodes, 9 on tree, 46781406 best solution, best possible 46517572 (2.98 seconds)
Cbc0010I After 1000 nodes, 4 on tree, 46781406 best solution, best possible 46535315 (3.14 seconds)
Cbc0030I Thread 0 used 99 times,  waiting to start 0.1179831,  463 locks, 0.0030601025 locked, 0.00052118301 waiting for locks
Cbc0030I Thread 1 used 67 times,  waiting to start 0.33498454,  318 locks, 0.0014696121 locked, 0.010473251 waiting for locks
Cbc0030I Thread 2 used 101 times,  waiting to start 0.58761859,  468 locks, 0.0023350716 locked, 0.0004324913 waiting for locks
Cbc0030I Thread 3 used 71 times,  waiting to start 0.62875605,  338 locks, 0.001652956 locked, 0.00018143654 waiting for locks
Cbc0030I Thread 4 used 93 times,  waiting to start 0.71529222,  448 locks, 0.0022935867 locked, 7.557869e-05 waiting for locks
Cbc0030I Thread 5 used 107 times,  waiting to start 0.79186344,  501 locks, 0.0028364658 locked, 0.0004427433 waiting for locks
Cbc0030I Thread 6 used 91 times,  waiting to start 0.83892655,  426 locks, 0.0020525455 locked, 0.00047588348 waiting for locks
Cbc0030I Thread 7 used 65 times,  waiting to start 0.85040712,  313 locks, 0.0018441677 locked, 0.00020694733 waiting for locks
Cbc0030I Thread 8 used 75 times,  waiting to start 0.90788364,  349 locks, 0.0032858849 locked, 0.00023794174 waiting for locks
Cbc0030I Thread 9 used 93 times,  waiting to start 0.92028666,  444 locks, 0.0021615028 locked, 0.0025982857 waiting for locks
Cbc0030I Thread 10 used 103 times,  waiting to start 0.83728981,  493 locks, 0.0021994114 locked, 0.00014305115 waiting for locks
Cbc0030I Thread 11 used 95 times,  waiting to start 0.88860893,  455 locks, 0.002145052 locked, 0.00017952919 waiting for locks
Cbc0030I Main thread 2.1333053 waiting for threads,  2154 locks, 0.0008661747 locked, 0.0021665096 waiting for locks
Cbc0001I Search completed - best objective 46781406.41577461, took 34010 iterations and 1060 nodes (3.30 seconds)
Cbc0032I Strong branching done 1698 times (30191 iterations), fathomed 230 nodes and fixed 146 variables
Cbc0035I Maximum depth 22, 292 variables fixed on reduced cost
Cuts at root node changed objective from 4.59977e+07 to 4.59977e+07
Probing was tried 13 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.009 seconds)
Gomory was tried 13 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.005 seconds)
Knapsack was tried 13 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.013 seconds)
Clique was tried 13 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)
MixedIntegerRounding2 was tried 13 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.003 seconds)
FlowCover was tried 13 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.002 seconds)
TwoMirCuts was tried 13 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.007 seconds)
ZeroHalf was tried 13 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)

Result - Optimal solution found

Objective value:                46781406.41577461
Enumerated nodes:               1060
Total iterations:               34010
Time (CPU seconds):             22.00
Time (Wallclock seconds):       3.33

Option for printingOptions changed from normal to all
Total time (CPU seconds):       22.00   (Wallclock seconds):       3.34

