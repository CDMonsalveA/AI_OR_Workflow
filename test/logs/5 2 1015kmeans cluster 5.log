Welcome to the CBC MILP Solver 
Version: 2.10.3 
Build Date: Dec 15 2019 

command line - /home/cdmonsalvea/tesis/AI_OR_Workflow/.venv/lib/python3.10/site-packages/pulp/solverdir/cbc/linux/64/cbc /tmp/4dcb2544bcb94df5b351b4dc6caa7ebb-pulp.mps -sec 3600 -threads 12 -timeMode elapsed -branch -printingOptions all -solution /tmp/4dcb2544bcb94df5b351b4dc6caa7ebb-pulp.sol (default strategy 1)
At line 2 NAME          MODEL
At line 3 ROWS
At line 104 COLUMNS
At line 528 RHS
At line 628 BOUNDS
At line 719 ENDATA
Problem MODEL has 99 rows, 90 columns and 324 elements
Coin0008I MODEL read with 0 errors
seconds was changed from 1e+100 to 3600
threads was changed from 0 to 12
Option for timeMode changed from cpu to elapsed
Continuous objective value is 8.50197e+06 - 0.00 seconds
Cgl0003I 0 fixed, 0 tightened bounds, 9 strengthened rows, 0 substitutions
Cgl0004I processed model has 99 rows, 90 columns (9 integer (9 of which binary)) and 333 elements
Cbc0038I Initial state - 3 integers unsatisfied sum - 1.38875
Cbc0038I Pass   1: suminf.    0.00000 (0) obj. 1.0073e+07 iterations 18
Cbc0038I Solution found of 1.0073e+07
Cbc0038I Relaxing continuous gives 9.89577e+06
Cbc0038I Before mini branch and bound, 6 integers at bound fixed and 61 continuous
Cbc0038I Full problem 99 rows 90 columns, reduced to 25 rows 16 columns
Cbc0038I Mini branch and bound did not improve solution (0.01 seconds)
Cbc0038I Round again with cutoff of 9.86082e+06
Cbc0038I Reduced cost fixing fixed 2 variables on major pass 2
Cbc0038I Pass   2: suminf.    0.03904 (1) obj. 9.86082e+06 iterations 11
Cbc0038I Pass   3: suminf.    0.53708 (2) obj. 9.86082e+06 iterations 46
Cbc0038I Pass   4: suminf.    0.36621 (1) obj. 9.86082e+06 iterations 30
Cbc0038I Pass   5: suminf.    0.36621 (1) obj. 9.86082e+06 iterations 1
Cbc0038I Pass   6: suminf.    0.46292 (1) obj. 9.86082e+06 iterations 67
Cbc0038I Pass   7: suminf.    0.44327 (1) obj. 9.86082e+06 iterations 24
Cbc0038I Pass   8: suminf.    0.33013 (1) obj. 9.86082e+06 iterations 10
Cbc0038I Pass   9: suminf.    0.33013 (1) obj. 9.86082e+06 iterations 0
Cbc0038I Pass  10: suminf.    0.14428 (1) obj. 9.86082e+06 iterations 8
Cbc0038I Pass  11: suminf.    0.14428 (1) obj. 9.86082e+06 iterations 1
Cbc0038I Pass  12: suminf.    0.12067 (1) obj. 9.86082e+06 iterations 7
Cbc0038I Pass  13: suminf.    0.12067 (1) obj. 9.86082e+06 iterations 2
Cbc0038I Pass  14: suminf.    0.46292 (1) obj. 9.85009e+06 iterations 29
Cbc0038I Pass  15: suminf.    0.44327 (1) obj. 9.86082e+06 iterations 22
Cbc0038I Pass  16: suminf.    0.00538 (1) obj. 9.86082e+06 iterations 31
Cbc0038I Pass  17: suminf.    0.00000 (0) obj. 9.86082e+06 iterations 1
Cbc0038I Solution found of 9.86082e+06
Cbc0038I Relaxing continuous gives 9.84472e+06
Cbc0038I Before mini branch and bound, 3 integers at bound fixed and 43 continuous
Cbc0038I Full problem 99 rows 90 columns, reduced to 53 rows 44 columns
Cbc0038I Mini branch and bound did not improve solution (0.02 seconds)
Cbc0038I Round again with cutoff of 9.78504e+06
Cbc0038I Reduced cost fixing fixed 2 variables on major pass 3
Cbc0038I Pass  18: suminf.    0.12369 (1) obj. 9.78504e+06 iterations 0
Cbc0038I Pass  19: suminf.    0.53708 (2) obj. 9.78504e+06 iterations 50
Cbc0038I Pass  20: suminf.    0.74517 (3) obj. 9.78504e+06 iterations 29
Cbc0038I Pass  21: suminf.    0.32265 (1) obj. 9.78504e+06 iterations 26
Cbc0038I Pass  22: suminf.    0.74517 (3) obj. 9.78504e+06 iterations 20
Cbc0038I Pass  23: suminf.    0.32265 (1) obj. 9.78504e+06 iterations 19
Cbc0038I Pass  24: suminf.    0.32265 (1) obj. 9.78504e+06 iterations 0
Cbc0038I Pass  25: suminf.    0.32265 (1) obj. 9.78504e+06 iterations 0
Cbc0038I Pass  26: suminf.    0.74517 (3) obj. 9.78504e+06 iterations 16
Cbc0038I Pass  27: suminf.    0.32265 (1) obj. 9.78504e+06 iterations 20
Cbc0038I Pass  28: suminf.    0.32265 (1) obj. 9.78504e+06 iterations 0
Cbc0038I Pass  29: suminf.    0.07070 (1) obj. 9.78504e+06 iterations 9
Cbc0038I Pass  30: suminf.    0.07070 (1) obj. 9.78504e+06 iterations 0
Cbc0038I Pass  31: suminf.    0.53708 (2) obj. 9.78504e+06 iterations 48
Cbc0038I Pass  32: suminf.    0.74517 (3) obj. 9.78504e+06 iterations 23
Cbc0038I Pass  33: suminf.    0.12369 (1) obj. 9.78504e+06 iterations 12
Cbc0038I Pass  34: suminf.    0.12369 (1) obj. 9.78504e+06 iterations 0
Cbc0038I Pass  35: suminf.    0.12369 (1) obj. 9.78504e+06 iterations 0
Cbc0038I Pass  36: suminf.    0.12369 (1) obj. 9.78504e+06 iterations 0
Cbc0038I Pass  37: suminf.    0.12369 (1) obj. 9.78504e+06 iterations 0
Cbc0038I Pass  38: suminf.    1.34286 (4) obj. 9.78504e+06 iterations 24
Cbc0038I Pass  39: suminf.    1.12152 (3) obj. 9.78504e+06 iterations 12
Cbc0038I Pass  40: suminf.    1.08972 (3) obj. 9.78504e+06 iterations 8
Cbc0038I Pass  41: suminf.    0.53708 (2) obj. 9.78504e+06 iterations 58
Cbc0038I Pass  42: suminf.    0.37764 (1) obj. 9.78504e+06 iterations 29
Cbc0038I Pass  43: suminf.    0.37764 (1) obj. 9.78504e+06 iterations 1
Cbc0038I Pass  44: suminf.    0.83323 (3) obj. 9.78504e+06 iterations 13
Cbc0038I Pass  45: suminf.    0.37764 (1) obj. 9.78504e+06 iterations 7
Cbc0038I Pass  46: suminf.    0.46728 (4) obj. 9.78504e+06 iterations 12
Cbc0038I Pass  47: suminf.    0.16164 (1) obj. 9.78504e+06 iterations 5
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 2 integers at bound fixed and 29 continuous
Cbc0038I Full problem 99 rows 90 columns, reduced to 68 rows 59 columns
Cbc0038I Mini branch and bound did not improve solution (0.03 seconds)
Cbc0038I After 0.03 seconds - Feasibility pump exiting with objective of 9.84472e+06 - took 0.02 seconds
Cbc0012I Integer solution of 9844718.7 found by feasibility pump after 0 iterations and 0 nodes (0.03 seconds)
Cbc0038I Full problem 99 rows 90 columns, reduced to 49 rows 40 columns
Cbc0031I 11 added rows had average density of 58.454545
Cbc0013I At root node, 11 cuts changed objective from 9546318.8 to 9652812.5 in 100 passes
Cbc0014I Cut generator 0 (Probing) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.007 seconds - new frequency is -100
Cbc0014I Cut generator 1 (Gomory) - 294 row cuts average 70.0 elements, 0 column cuts (0 active)  in 0.013 seconds - new frequency is -100
Cbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.009 seconds - new frequency is -100
Cbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.001 seconds - new frequency is -100
Cbc0014I Cut generator 4 (MixedIntegerRounding2) - 40 row cuts average 26.9 elements, 0 column cuts (0 active)  in 0.008 seconds - new frequency is 1
Cbc0014I Cut generator 5 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.010 seconds - new frequency is -100
Cbc0014I Cut generator 6 (TwoMirCuts) - 34 row cuts average 53.6 elements, 0 column cuts (0 active)  in 0.004 seconds - new frequency is 1
Cbc0010I After 0 nodes, 1 on tree, 9844718.7 best solution, best possible 9652813.9 (0.19 seconds)
Cbc0030I Thread 0 used 3 times,  waiting to start 0.020870686, 0.009237 cpu time, 20 locks, 0.00010418892 locked, 2.8610229e-06 waiting for locks
Cbc0030I Thread 1 used 1 times,  waiting to start 0.027220726, 0.00108 cpu time, 4 locks, 6.5803528e-05 locked, 0 waiting for locks
Cbc0030I Thread 2 used 0 times,  waiting to start 0.026416063, 0 cpu time, 0 locks, 0 locked, 0 waiting for locks
Cbc0030I Thread 3 used 0 times,  waiting to start 0.024707079, 0 cpu time, 0 locks, 0 locked, 0 waiting for locks
Cbc0030I Thread 4 used 0 times,  waiting to start 0.022986889, 0 cpu time, 0 locks, 0 locked, 0 waiting for locks
Cbc0030I Thread 5 used 0 times,  waiting to start 0.021281004, 0 cpu time, 0 locks, 0 locked, 0 waiting for locks
Cbc0030I Thread 6 used 0 times,  waiting to start 0.019457102, 0 cpu time, 0 locks, 0 locked, 0 waiting for locks
Cbc0030I Thread 7 used 0 times,  waiting to start 0.017444849, 0 cpu time, 0 locks, 0 locked, 0 waiting for locks
Cbc0030I Thread 8 used 0 times,  waiting to start 0.015663147, 0 cpu time, 0 locks, 0 locked, 0 waiting for locks
Cbc0030I Thread 9 used 0 times,  waiting to start 0.013945818, 0 cpu time, 0 locks, 0 locked, 0 waiting for locks
Cbc0030I Thread 10 used 0 times,  waiting to start 0.012261868, 0 cpu time, 0 locks, 0 locked, 0 waiting for locks
Cbc0030I Thread 11 used 0 times,  waiting to start 0.010412931, 0 cpu time, 0 locks, 0 locked, 0 waiting for locks
Cbc0030I Main thread 0.0086681843 waiting for threads,  12 locks, 1.0967255e-05 locked, 9.5367432e-07 waiting for locks
Cbc0001I Search completed - best objective 9844718.650000002, took 1746 iterations and 4 nodes (0.21 seconds)
Cbc0032I Strong branching done 166 times (4132 iterations), fathomed 2 nodes and fixed 15 variables
Cbc0035I Maximum depth 1, 3 variables fixed on reduced cost
Cuts at root node changed objective from 9.54632e+06 to 9.65281e+06
Probing was tried 1300 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.085 seconds)
Gomory was tried 1300 times and created 3822 cuts of which 0 were active after adding rounds of cuts (0.165 seconds)
Knapsack was tried 1300 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.119 seconds)
Clique was tried 1300 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.008 seconds)
MixedIntegerRounding2 was tried 1309 times and created 524 cuts of which 0 were active after adding rounds of cuts (0.098 seconds)
FlowCover was tried 1300 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.124 seconds)
TwoMirCuts was tried 1309 times and created 471 cuts of which 0 were active after adding rounds of cuts (0.053 seconds)
ZeroHalf was tried 13 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)

Result - Optimal solution found

Objective value:                9844718.65000000
Enumerated nodes:               4
Total iterations:               1746
Time (CPU seconds):             0.18
Time (Wallclock seconds):       0.21

Option for printingOptions changed from normal to all
Total time (CPU seconds):       0.18   (Wallclock seconds):       0.21

