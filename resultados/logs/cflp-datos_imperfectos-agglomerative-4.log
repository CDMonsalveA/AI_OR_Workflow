Welcome to the CBC MILP Solver 
Version: 2.10.3 
Build Date: Dec 15 2019 

command line - /home/cdmonsalvea/AI_OR_Workflow/.venv/lib/python3.10/site-packages/pulp/solverdir/cbc/linux/64/cbc /tmp/6c8e1cd11fe1422b88ed4560461597ec-pulp.mps -sec 3600 -timeMode elapsed -branch -printingOptions all -solution /tmp/6c8e1cd11fe1422b88ed4560461597ec-pulp.sol (default strategy 1)
At line 2 NAME          MODEL
At line 3 ROWS
At line 149 COLUMNS
At line 15918 RHS
At line 16063 BOUNDS
At line 16136 ENDATA
Problem MODEL has 144 rows, 5256 columns and 10440 elements
Coin0008I MODEL read with 0 errors
seconds was changed from 1e+100 to 3600
Option for timeMode changed from cpu to elapsed
Continuous objective value is 5.5379e+07 - 0.00 seconds
Cgl0004I processed model has 144 rows, 5256 columns (72 integer (72 of which binary)) and 10440 elements
Cbc0038I Initial state - 72 integers unsatisfied sum - 9.05284
Cbc0038I Pass   1: suminf.    0.00000 (0) obj. 6.88679e+08 iterations 72
Cbc0038I Solution found of 6.88679e+08
Cbc0038I Relaxing continuous gives 6.6327e+08
Cbc0038I Before mini branch and bound, 0 integers at bound fixed and 5041 continuous
Cbc0038I Full problem 144 rows 5256 columns, reduced to 140 rows 207 columns
Cbc0038I Mini branch and bound improved solution from 6.6327e+08 to 2.43819e+08 (0.05 seconds)
Cbc0038I Freeing continuous variables gives a solution of 2.27053e+08
Cbc0038I Round again with cutoff of 2.09886e+08
Cbc0038I Pass   2: suminf.    2.94865 (28) obj. 2.09886e+08 iterations 157
Cbc0038I Pass   3: suminf.    2.34449 (25) obj. 2.09886e+08 iterations 22
Cbc0038I Pass   4: suminf.    0.36960 (6) obj. 2.09886e+08 iterations 68
Cbc0038I Pass   5: suminf.    0.17327 (4) obj. 2.09886e+08 iterations 39
Cbc0038I Pass   6: suminf.    0.45187 (1) obj. 2.09886e+08 iterations 21
Cbc0038I Pass   7: suminf.    0.03861 (1) obj. 2.09886e+08 iterations 21
Cbc0038I Pass   8: suminf.    0.53546 (3) obj. 2.09886e+08 iterations 109
Cbc0038I Pass   9: suminf.    0.02772 (1) obj. 2.09886e+08 iterations 11
Cbc0038I Pass  10: suminf.    0.48271 (1) obj. 2.09886e+08 iterations 13
Cbc0038I Pass  11: suminf.    0.47962 (1) obj. 2.09886e+08 iterations 90
Cbc0038I Pass  12: suminf.    0.05461 (1) obj. 2.09886e+08 iterations 22
Cbc0038I Pass  13: suminf.    0.02562 (1) obj. 2.09886e+08 iterations 4
Cbc0038I Pass  14: suminf.    0.45865 (1) obj. 2.09886e+08 iterations 12
Cbc0038I Pass  15: suminf.    0.93205 (3) obj. 2.09886e+08 iterations 65
Cbc0038I Pass  16: suminf.    0.81958 (5) obj. 2.09886e+08 iterations 6
Cbc0038I Pass  17: suminf.    0.44706 (3) obj. 2.09886e+08 iterations 14
Cbc0038I Pass  18: suminf.    0.44290 (3) obj. 2.09886e+08 iterations 1
Cbc0038I Pass  19: suminf.    0.53829 (4) obj. 2.09886e+08 iterations 10
Cbc0038I Pass  20: suminf.    0.53671 (4) obj. 2.09886e+08 iterations 1
Cbc0038I Pass  21: suminf.    0.79568 (4) obj. 2.09886e+08 iterations 15
Cbc0038I Pass  22: suminf.    0.79481 (4) obj. 2.09886e+08 iterations 1
Cbc0038I Pass  23: suminf.    0.86459 (5) obj. 2.09886e+08 iterations 14
Cbc0038I Pass  24: suminf.    0.86459 (5) obj. 2.09886e+08 iterations 0
Cbc0038I Pass  25: suminf.    1.58161 (11) obj. 2.09886e+08 iterations 18
Cbc0038I Pass  26: suminf.    1.58161 (11) obj. 2.09886e+08 iterations 0
Cbc0038I Pass  27: suminf.    2.21918 (14) obj. 2.09886e+08 iterations 22
Cbc0038I Pass  28: suminf.    2.21918 (14) obj. 2.09886e+08 iterations 0
Cbc0038I Pass  29: suminf.    2.44757 (14) obj. 2.09886e+08 iterations 17
Cbc0038I Pass  30: suminf.    2.26842 (13) obj. 2.09886e+08 iterations 5
Cbc0038I Pass  31: suminf.    2.40231 (13) obj. 2.09886e+08 iterations 8
Cbc0038I Rounding solution of 2.10871e+08 is better than previous of 2.27053e+08

Cbc0038I Before mini branch and bound, 0 integers at bound fixed and 4940 continuous
Cbc0038I Full problem 144 rows 5256 columns, reduced to 128 rows 292 columns
Cbc0038I Mini branch and bound improved solution from 2.10871e+08 to 1.97572e+08 (0.16 seconds)
Cbc0038I Freeing continuous variables gives a solution of 1.91404e+08
Cbc0038I Round again with cutoff of 1.64199e+08
Cbc0038I Pass  31: suminf.    3.78302 (40) obj. 1.64199e+08 iterations 17
Cbc0038I Pass  32: suminf.    3.19830 (36) obj. 1.64199e+08 iterations 18
Cbc0038I Pass  33: suminf.    1.40560 (15) obj. 1.64199e+08 iterations 65
Cbc0038I Pass  34: suminf.    1.51479 (16) obj. 1.64199e+08 iterations 69
Cbc0038I Pass  35: suminf.    1.51479 (16) obj. 1.64199e+08 iterations 0
Cbc0038I Pass  36: suminf.    2.13422 (26) obj. 1.64199e+08 iterations 47
Cbc0038I Pass  37: suminf.    2.13422 (26) obj. 1.64199e+08 iterations 0
Cbc0038I Pass  38: suminf.    3.86780 (31) obj. 1.64199e+08 iterations 45
Cbc0038I Pass  39: suminf.    3.82208 (31) obj. 1.64199e+08 iterations 4
Cbc0038I Pass  40: suminf.    3.78985 (30) obj. 1.64199e+08 iterations 7
Cbc0038I Pass  41: suminf.    3.67822 (29) obj. 1.64199e+08 iterations 6
Cbc0038I Pass  42: suminf.    3.75113 (30) obj. 1.64199e+08 iterations 5
Cbc0038I Pass  43: suminf.    3.29031 (26) obj. 1.64199e+08 iterations 54
Cbc0038I Pass  44: suminf.    3.19305 (29) obj. 1.64199e+08 iterations 6
Cbc0038I Pass  45: suminf.    3.71774 (29) obj. 1.64199e+08 iterations 28
Cbc0038I Pass  46: suminf.    3.52999 (29) obj. 1.64199e+08 iterations 10
Cbc0038I Pass  47: suminf.    3.71774 (29) obj. 1.64199e+08 iterations 8
Cbc0038I Pass  48: suminf.    3.08465 (25) obj. 1.64199e+08 iterations 67
Cbc0038I Pass  49: suminf.    3.39625 (30) obj. 1.64199e+08 iterations 50
Cbc0038I Pass  50: suminf.    3.32414 (31) obj. 1.64199e+08 iterations 1
Cbc0038I Pass  51: suminf.    3.66915 (30) obj. 1.64199e+08 iterations 22
Cbc0038I Pass  52: suminf.    2.89704 (29) obj. 1.64199e+08 iterations 4
Cbc0038I Pass  53: suminf.    2.55814 (27) obj. 1.64199e+08 iterations 7
Cbc0038I Pass  54: suminf.    3.22761 (29) obj. 1.64199e+08 iterations 8
Cbc0038I Pass  55: suminf.    2.73838 (28) obj. 1.64199e+08 iterations 11
Cbc0038I Pass  56: suminf.    3.22761 (29) obj. 1.64199e+08 iterations 4
Cbc0038I Pass  57: suminf.    2.98299 (30) obj. 1.64199e+08 iterations 56
Cbc0038I Pass  58: suminf.    2.98299 (30) obj. 1.64199e+08 iterations 0
Cbc0038I Pass  59: suminf.    3.29972 (30) obj. 1.64199e+08 iterations 24
Cbc0038I Pass  60: suminf.    2.72679 (28) obj. 1.64199e+08 iterations 10
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 0 integers at bound fixed and 5017 continuous
Cbc0038I Full problem 144 rows 5256 columns, reduced to 115 rows 203 columns
Cbc0038I Mini branch and bound did not improve solution (0.28 seconds)
Cbc0038I After 0.28 seconds - Feasibility pump exiting with objective of 1.91404e+08 - took 0.26 seconds
Cbc0012I Integer solution of 1.9140425e+08 found by feasibility pump after 0 iterations and 0 nodes (0.28 seconds)
Cbc0012I Integer solution of 1.8709147e+08 found by DiveCoefficient after 196 iterations and 0 nodes (0.48 seconds)
Cbc0031I 110 added rows had average density of 126.98182
Cbc0013I At root node, 110 cuts changed objective from 55378978 to 1.6226647e+08 in 12 passes
Cbc0014I Cut generator 0 (Probing) - 2 row cuts average 72.0 elements, 0 column cuts (0 active)  in 0.036 seconds - new frequency is -100
Cbc0014I Cut generator 1 (Gomory) - 86 row cuts average 100.5 elements, 0 column cuts (0 active)  in 0.015 seconds - new frequency is -100
Cbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.001 seconds - new frequency is -100
Cbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100
Cbc0014I Cut generator 4 (MixedIntegerRounding2) - 3 row cuts average 264.3 elements, 0 column cuts (0 active)  in 0.010 seconds - new frequency is -100
Cbc0014I Cut generator 5 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.042 seconds - new frequency is -100
Cbc0014I Cut generator 6 (TwoMirCuts) - 134 row cuts average 132.2 elements, 0 column cuts (0 active)  in 0.013 seconds - new frequency is 1
Cbc0010I After 0 nodes, 1 on tree, 1.8709147e+08 best solution, best possible 1.6226647e+08 (0.50 seconds)
Cbc0012I Integer solution of 1.8423878e+08 found by DiveCoefficient after 207 iterations and 2 nodes (0.58 seconds)
Cbc0012I Integer solution of 1.8275572e+08 found by DiveCoefficient after 210 iterations and 3 nodes (0.64 seconds)
Cbc0012I Integer solution of 1.81747e+08 found by DiveCoefficient after 217 iterations and 4 nodes (0.69 seconds)
Cbc0012I Integer solution of 1.8138782e+08 found by DiveCoefficient after 219 iterations and 5 nodes (0.75 seconds)
Cbc0012I Integer solution of 1.7913076e+08 found by DiveCoefficient after 232 iterations and 6 nodes (0.80 seconds)
Cbc0012I Integer solution of 1.782936e+08 found by DiveCoefficient after 245 iterations and 9 nodes (0.84 seconds)
Cbc0012I Integer solution of 1.7123935e+08 found by rounding after 327 iterations and 26 nodes (0.94 seconds)
Cbc0012I Integer solution of 1.6887235e+08 found by rounding after 338 iterations and 29 nodes (0.95 seconds)
Cbc0016I Integer solution of 1.6710875e+08 found by strong branching after 346 iterations and 32 nodes (0.96 seconds)
Cbc0038I Full problem 144 rows 5256 columns, reduced to 106 rows 2463 columns - 1 fixed gives 106, 2462 - still too large
Cbc0038I Full problem 144 rows 5256 columns, reduced to 106 rows 2462 columns - too large
Cbc0016I Integer solution of 1.6696321e+08 found by strong branching after 649 iterations and 60 nodes (1.20 seconds)
Cbc0038I Full problem 144 rows 5256 columns, reduced to 100 rows 2025 columns
Cbc0010I After 100 nodes, 15 on tree, 1.6696321e+08 best solution, best possible 1.6226647e+08 (1.46 seconds)
Cbc0038I Full problem 144 rows 5256 columns, reduced to 98 rows 1880 columns
Cbc0010I After 200 nodes, 5 on tree, 1.6696321e+08 best solution, best possible 1.6393672e+08 (2.41 seconds)
Cbc0001I Search completed - best objective 166963211.1101035, took 2390 iterations and 212 nodes (2.53 seconds)
Cbc0032I Strong branching done 1378 times (5020 iterations), fathomed 36 nodes and fixed 255 variables
Cbc0035I Maximum depth 25, 104 variables fixed on reduced cost
Cuts at root node changed objective from 5.5379e+07 to 1.62266e+08
Probing was tried 12 times and created 2 cuts of which 0 were active after adding rounds of cuts (0.036 seconds)
Gomory was tried 12 times and created 86 cuts of which 0 were active after adding rounds of cuts (0.015 seconds)
Knapsack was tried 12 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.001 seconds)
Clique was tried 12 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)
MixedIntegerRounding2 was tried 12 times and created 3 cuts of which 0 were active after adding rounds of cuts (0.010 seconds)
FlowCover was tried 12 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.042 seconds)
TwoMirCuts was tried 175 times and created 136 cuts of which 0 were active after adding rounds of cuts (0.040 seconds)
ZeroHalf was tried 1 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)

Result - Optimal solution found

Objective value:                166963211.11010346
Enumerated nodes:               212
Total iterations:               2390
Time (CPU seconds):             2.48
Time (Wallclock seconds):       2.54

Option for printingOptions changed from normal to all
Total time (CPU seconds):       2.49   (Wallclock seconds):       2.55

