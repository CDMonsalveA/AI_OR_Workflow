Welcome to the CBC MILP Solver 
Version: 2.10.3 
Build Date: Dec 15 2019 

command line - /home/cdmonsalvea/AI_OR_Workflow/.venv/lib/python3.10/site-packages/pulp/solverdir/cbc/linux/64/cbc /tmp/285803edec3745819cd84ced9ce769ec-pulp.mps -sec 3600 -timeMode elapsed -branch -printingOptions all -solution /tmp/285803edec3745819cd84ced9ce769ec-pulp.sol (default strategy 1)
At line 2 NAME          MODEL
At line 3 ROWS
At line 71 COLUMNS
At line 3438 RHS
At line 3505 BOUNDS
At line 3539 ENDATA
Problem MODEL has 66 rows, 1122 columns and 2211 elements
Coin0008I MODEL read with 0 errors
seconds was changed from 1e+100 to 3600
Option for timeMode changed from cpu to elapsed
Continuous objective value is 6.09427e+06 - 0.00 seconds
Cgl0004I processed model has 66 rows, 1122 columns (33 integer (33 of which binary)) and 2211 elements
Cbc0038I Initial state - 33 integers unsatisfied sum - 1.95881
Cbc0038I Pass   1: suminf.    0.04119 (1) obj. 3.72144e+09 iterations 32
Cbc0038I Solution found of 3.72157e+09
Cbc0038I Relaxing continuous gives 3.34292e+09
Cbc0038I Before mini branch and bound, 0 integers at bound fixed and 1024 continuous
Cbc0038I Full problem 66 rows 1122 columns, reduced to 64 rows 94 columns
Cbc0038I Mini branch and bound improved solution from 3.34292e+09 to 8.65599e+07 (0.01 seconds)
Cbc0038I Freeing continuous variables gives a solution of 8.22763e+07
Cbc0038I Round again with cutoff of 7.46581e+07
Cbc0038I Pass   2: suminf.    1.95881 (15) obj. 7.46581e+07 iterations 42
Cbc0038I Pass   3: suminf.    0.51494 (11) obj. 7.46581e+07 iterations 33
Cbc0038I Pass   4: suminf.    0.72810 (10) obj. 7.46581e+07 iterations 32
Cbc0038I Pass   5: suminf.    0.72810 (10) obj. 7.46581e+07 iterations 0
Cbc0038I Pass   6: suminf.    0.93821 (10) obj. 7.46581e+07 iterations 18
Cbc0038I Pass   7: suminf.    0.93821 (10) obj. 7.46581e+07 iterations 0
Cbc0038I Pass   8: suminf.    0.99654 (10) obj. 7.46581e+07 iterations 8
Cbc0038I Pass   9: suminf.    0.48158 (8) obj. 7.46581e+07 iterations 5
Cbc0038I Pass  10: suminf.    0.93821 (10) obj. 7.46581e+07 iterations 6
Cbc0038I Pass  11: suminf.    0.20434 (5) obj. 7.46581e+07 iterations 36
Cbc0038I Pass  12: suminf.    0.48092 (10) obj. 7.46581e+07 iterations 17
Cbc0038I Pass  13: suminf.    0.93821 (10) obj. 7.46581e+07 iterations 17
Cbc0038I Pass  14: suminf.    0.93821 (10) obj. 7.46581e+07 iterations 0
Cbc0038I Pass  15: suminf.    0.99654 (10) obj. 7.46581e+07 iterations 8
Cbc0038I Pass  16: suminf.    0.48158 (8) obj. 7.46581e+07 iterations 5
Cbc0038I Pass  17: suminf.    0.93821 (10) obj. 7.46581e+07 iterations 6
Cbc0038I Pass  18: suminf.    0.46127 (6) obj. 7.46581e+07 iterations 20
Cbc0038I Pass  19: suminf.    0.92125 (10) obj. 7.46581e+07 iterations 19
Cbc0038I Pass  20: suminf.    0.92125 (10) obj. 7.46581e+07 iterations 0
Cbc0038I Pass  21: suminf.    0.93821 (10) obj. 7.46581e+07 iterations 8
Cbc0038I Pass  22: suminf.    0.93821 (10) obj. 7.46581e+07 iterations 0
Cbc0038I Pass  23: suminf.    0.99654 (10) obj. 7.46581e+07 iterations 8
Cbc0038I Pass  24: suminf.    0.48158 (8) obj. 7.46581e+07 iterations 5
Cbc0038I Pass  25: suminf.    0.93821 (10) obj. 7.46581e+07 iterations 6
Cbc0038I Pass  26: suminf.    0.80437 (10) obj. 7.46581e+07 iterations 18
Cbc0038I Pass  27: suminf.    0.80437 (10) obj. 7.46581e+07 iterations 0
Cbc0038I Pass  28: suminf.    0.93821 (10) obj. 7.46581e+07 iterations 8
Cbc0038I Pass  29: suminf.    0.93821 (10) obj. 7.46581e+07 iterations 0
Cbc0038I Pass  30: suminf.    0.99654 (10) obj. 7.46581e+07 iterations 8
Cbc0038I Pass  31: suminf.    0.48158 (8) obj. 7.46581e+07 iterations 5
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 0 integers at bound fixed and 1018 continuous
Cbc0038I Full problem 66 rows 1122 columns, reduced to 55 rows 92 columns
Cbc0038I Mini branch and bound improved solution from 8.22763e+07 to 7.20691e+07 (0.07 seconds)
Cbc0038I Freeing continuous variables gives a solution of 7.19677e+07
Cbc0038I Round again with cutoff of 5.8793e+07
Cbc0038I Pass  31: suminf.    1.95881 (17) obj. 5.8793e+07 iterations 3
Cbc0038I Pass  32: suminf.    0.41547 (10) obj. 5.8793e+07 iterations 33
Cbc0038I Pass  33: suminf.    0.89720 (15) obj. 5.8793e+07 iterations 29
Cbc0038I Pass  34: suminf.    0.64625 (15) obj. 5.8793e+07 iterations 3
Cbc0038I Pass  35: suminf.    1.16453 (16) obj. 5.8793e+07 iterations 10
Cbc0038I Pass  36: suminf.    1.16453 (16) obj. 5.8793e+07 iterations 0
Cbc0038I Pass  37: suminf.    1.08293 (16) obj. 5.8793e+07 iterations 9
Cbc0038I Pass  38: suminf.    1.08293 (16) obj. 5.8793e+07 iterations 0
Cbc0038I Pass  39: suminf.    1.16453 (16) obj. 5.8793e+07 iterations 5
Cbc0038I Pass  40: suminf.    0.89720 (15) obj. 5.8793e+07 iterations 34
Cbc0038I Pass  41: suminf.    0.75974 (15) obj. 5.8793e+07 iterations 2
Cbc0038I Pass  42: suminf.    1.16453 (16) obj. 5.8793e+07 iterations 17
Cbc0038I Pass  43: suminf.    1.16453 (16) obj. 5.8793e+07 iterations 0
Cbc0038I Pass  44: suminf.    1.08293 (16) obj. 5.8793e+07 iterations 10
Cbc0038I Pass  45: suminf.    1.08293 (16) obj. 5.8793e+07 iterations 0
Cbc0038I Pass  46: suminf.    1.04484 (16) obj. 5.8793e+07 iterations 9
Cbc0038I Pass  47: suminf.    1.04484 (16) obj. 5.8793e+07 iterations 0
Cbc0038I Pass  48: suminf.    1.08293 (16) obj. 5.8793e+07 iterations 8
Cbc0038I Pass  49: suminf.    0.89720 (15) obj. 5.8793e+07 iterations 9
Cbc0038I Pass  50: suminf.    0.71298 (15) obj. 5.8793e+07 iterations 2
Cbc0038I Pass  51: suminf.    1.16453 (16) obj. 5.8793e+07 iterations 11
Cbc0038I Pass  52: suminf.    1.16453 (16) obj. 5.8793e+07 iterations 0
Cbc0038I Pass  53: suminf.    1.08293 (16) obj. 5.8793e+07 iterations 10
Cbc0038I Pass  54: suminf.    1.08293 (16) obj. 5.8793e+07 iterations 0
Cbc0038I Pass  55: suminf.    1.16453 (16) obj. 5.8793e+07 iterations 5
Cbc0038I Pass  56: suminf.    1.13872 (16) obj. 5.8793e+07 iterations 17
Cbc0038I Pass  57: suminf.    1.13872 (16) obj. 5.8793e+07 iterations 0
Cbc0038I Pass  58: suminf.    1.16453 (16) obj. 5.8793e+07 iterations 10
Cbc0038I Pass  59: suminf.    1.16453 (16) obj. 5.8793e+07 iterations 0
Cbc0038I Pass  60: suminf.    1.08293 (16) obj. 5.8793e+07 iterations 12
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 0 integers at bound fixed and 1035 continuous
Cbc0038I Full problem 66 rows 1122 columns, reduced to 41 rows 59 columns
Cbc0038I Mini branch and bound did not improve solution (0.10 seconds)
Cbc0038I After 0.10 seconds - Feasibility pump exiting with objective of 7.19677e+07 - took 0.06 seconds
Cbc0012I Integer solution of 71967727 found by feasibility pump after 0 iterations and 0 nodes (0.10 seconds)
Cbc0031I 42 added rows had average density of 70.166667
Cbc0013I At root node, 42 cuts changed objective from 6094269.7 to 65467997 in 100 passes
Cbc0014I Cut generator 0 (Probing) - 14 row cuts average 31.6 elements, 0 column cuts (0 active)  in 0.051 seconds - new frequency is -100
Cbc0014I Cut generator 1 (Gomory) - 278 row cuts average 123.4 elements, 0 column cuts (0 active)  in 0.020 seconds - new frequency is 1
Cbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.007 seconds - new frequency is -100
Cbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.001 seconds - new frequency is -100
Cbc0014I Cut generator 4 (MixedIntegerRounding2) - 10 row cuts average 108.3 elements, 0 column cuts (0 active)  in 0.020 seconds - new frequency is -100
Cbc0014I Cut generator 5 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.068 seconds - new frequency is -100
Cbc0014I Cut generator 6 (TwoMirCuts) - 66 row cuts average 76.5 elements, 0 column cuts (0 active)  in 0.005 seconds - new frequency is 1
Cbc0010I After 0 nodes, 1 on tree, 71967727 best solution, best possible 65467997 (0.40 seconds)
Cbc0012I Integer solution of 69991879 found by DiveCoefficient after 1148 iterations and 6 nodes (0.45 seconds)
Cbc0012I Integer solution of 69985937 found by DiveCoefficient after 1165 iterations and 7 nodes (0.46 seconds)
Cbc0012I Integer solution of 67585659 found by DiveCoefficient after 1170 iterations and 8 nodes (0.47 seconds)
Cbc0016I Integer solution of 67347820 found by strong branching after 1229 iterations and 12 nodes (0.48 seconds)
Cbc0016I Integer solution of 67279956 found by strong branching after 1229 iterations and 12 nodes (0.48 seconds)
Cbc0004I Integer solution of 67141562 found after 1254 iterations and 15 nodes (0.48 seconds)
Cbc0001I Search completed - best objective 67141561.76441395, took 1328 iterations and 24 nodes (0.50 seconds)
Cbc0032I Strong branching done 204 times (1267 iterations), fathomed 3 nodes and fixed 4 variables
Cbc0035I Maximum depth 10, 0 variables fixed on reduced cost
Cuts at root node changed objective from 6.09427e+06 to 6.5468e+07
Probing was tried 100 times and created 14 cuts of which 0 were active after adding rounds of cuts (0.051 seconds)
Gomory was tried 122 times and created 278 cuts of which 0 were active after adding rounds of cuts (0.022 seconds)
Knapsack was tried 100 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.007 seconds)
Clique was tried 100 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.001 seconds)
MixedIntegerRounding2 was tried 100 times and created 10 cuts of which 0 were active after adding rounds of cuts (0.020 seconds)
FlowCover was tried 100 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.068 seconds)
TwoMirCuts was tried 122 times and created 77 cuts of which 0 were active after adding rounds of cuts (0.007 seconds)
ZeroHalf was tried 1 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)

Result - Optimal solution found

Objective value:                67141561.76441395
Enumerated nodes:               24
Total iterations:               1328
Time (CPU seconds):             0.44
Time (Wallclock seconds):       0.51

Option for printingOptions changed from normal to all
Total time (CPU seconds):       0.44   (Wallclock seconds):       0.51

