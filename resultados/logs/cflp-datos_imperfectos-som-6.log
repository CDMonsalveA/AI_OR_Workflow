Welcome to the CBC MILP Solver 
Version: 2.10.3 
Build Date: Dec 15 2019 

command line - /home/cdmonsalvea/AI_OR_Workflow/.venv/lib/python3.10/site-packages/pulp/solverdir/cbc/linux/64/cbc /tmp/7d9f81d370314aabbeccd9f7dbca1c8c-pulp.mps -sec 3600 -timeMode elapsed -branch -printingOptions all -solution /tmp/7d9f81d370314aabbeccd9f7dbca1c8c-pulp.sol (default strategy 1)
At line 2 NAME          MODEL
At line 3 ROWS
At line 85 COLUMNS
At line 5006 RHS
At line 5087 BOUNDS
At line 5128 ENDATA
Problem MODEL has 80 rows, 1640 columns and 3240 elements
Coin0008I MODEL read with 0 errors
seconds was changed from 1e+100 to 3600
Option for timeMode changed from cpu to elapsed
Continuous objective value is 1.33667e+07 - 0.00 seconds
Cgl0004I processed model has 80 rows, 1640 columns (40 integer (40 of which binary)) and 3240 elements
Cbc0038I Initial state - 40 integers unsatisfied sum - 4.38583
Cbc0038I Pass   1: suminf.    0.13878 (1) obj. 5.25287e+08 iterations 39
Cbc0038I Pass   2: suminf.    0.13878 (1) obj. 5.25287e+08 iterations 0
Cbc0038I Solution found of 5.27966e+08
Cbc0038I Relaxing continuous gives 1.75723e+08
Cbc0038I Before mini branch and bound, 0 integers at bound fixed and 1521 continuous
Cbc0038I Full problem 80 rows 1640 columns, reduced to 74 rows 109 columns
Cbc0038I Mini branch and bound improved solution from 1.75723e+08 to 1.14208e+08 (0.02 seconds)
Cbc0038I Freeing continuous variables gives a solution of 1.10391e+08
Cbc0038I Round again with cutoff of 1.00689e+08
Cbc0038I Pass   3: suminf.    2.13878 (11) obj. 1.00689e+08 iterations 83
Cbc0038I Pass   4: suminf.    2.13878 (11) obj. 1.00689e+08 iterations 0
Cbc0038I Pass   5: suminf.    0.42110 (4) obj. 1.00689e+08 iterations 26
Cbc0038I Pass   6: suminf.    0.00000 (0) obj. 1.00689e+08 iterations 9
Cbc0038I Solution found of 1.00689e+08
Cbc0038I Relaxing continuous gives 9.99115e+07
Cbc0038I Before mini branch and bound, 0 integers at bound fixed and 1520 continuous
Cbc0038I Full problem 80 rows 1640 columns, reduced to 63 rows 94 columns
Cbc0038I Mini branch and bound improved solution from 9.99115e+07 to 9.21746e+07 (0.07 seconds)
Cbc0038I Freeing continuous variables gives a solution of 9.15303e+07
Cbc0038I Round again with cutoff of 7.58976e+07
Cbc0038I Pass   7: suminf.    2.31567 (20) obj. 7.58976e+07 iterations 18
Cbc0038I Pass   8: suminf.    2.13878 (19) obj. 7.58976e+07 iterations 4
Cbc0038I Pass   9: suminf.    1.74070 (15) obj. 7.58976e+07 iterations 41
Cbc0038I Pass  10: suminf.    1.76817 (17) obj. 7.58976e+07 iterations 31
Cbc0038I Pass  11: suminf.    1.68152 (17) obj. 7.58976e+07 iterations 3
Cbc0038I Pass  12: suminf.    1.76817 (17) obj. 7.58976e+07 iterations 14
Cbc0038I Pass  13: suminf.    1.43859 (16) obj. 7.58976e+07 iterations 4
Cbc0038I Pass  14: suminf.    1.76817 (17) obj. 7.58976e+07 iterations 3
Cbc0038I Pass  15: suminf.    1.12361 (15) obj. 7.58976e+07 iterations 24
Cbc0038I Pass  16: suminf.    1.99452 (17) obj. 7.58976e+07 iterations 11
Cbc0038I Pass  17: suminf.    1.37894 (15) obj. 7.58976e+07 iterations 5
Cbc0038I Pass  18: suminf.    1.99452 (17) obj. 7.58976e+07 iterations 6
Cbc0038I Pass  19: suminf.    1.35751 (13) obj. 7.58976e+07 iterations 13
Cbc0038I Pass  20: suminf.    1.89981 (17) obj. 7.58976e+07 iterations 17
Cbc0038I Pass  21: suminf.    1.89981 (17) obj. 7.58976e+07 iterations 0
Cbc0038I Pass  22: suminf.    1.99452 (17) obj. 7.58976e+07 iterations 8
Cbc0038I Pass  23: suminf.    1.35448 (15) obj. 7.58976e+07 iterations 5
Cbc0038I Pass  24: suminf.    1.99452 (17) obj. 7.58976e+07 iterations 6
Cbc0038I Pass  25: suminf.    1.75506 (14) obj. 7.58976e+07 iterations 37
Cbc0038I Pass  26: suminf.    2.19908 (18) obj. 7.58976e+07 iterations 26
Cbc0038I Pass  27: suminf.    2.19908 (18) obj. 7.58976e+07 iterations 0
Cbc0038I Pass  28: suminf.    1.76817 (17) obj. 7.58976e+07 iterations 9
Cbc0038I Pass  29: suminf.    1.43859 (16) obj. 7.58976e+07 iterations 4
Cbc0038I Pass  30: suminf.    1.76817 (17) obj. 7.58976e+07 iterations 5
Cbc0038I Pass  31: suminf.    1.74329 (17) obj. 7.58976e+07 iterations 18
Cbc0038I Pass  32: suminf.    1.76817 (17) obj. 7.58976e+07 iterations 10
Cbc0038I Pass  33: suminf.    1.72888 (17) obj. 7.58976e+07 iterations 28
Cbc0038I Pass  34: suminf.    1.72888 (17) obj. 7.58976e+07 iterations 0
Cbc0038I Pass  35: suminf.    1.99452 (17) obj. 7.58976e+07 iterations 11
Cbc0038I Pass  36: suminf.    1.35448 (15) obj. 7.58976e+07 iterations 5
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 0 integers at bound fixed and 1522 continuous
Cbc0038I Full problem 80 rows 1640 columns, reduced to 56 rows 92 columns
Cbc0038I Mini branch and bound did not improve solution (0.10 seconds)
Cbc0038I After 0.10 seconds - Feasibility pump exiting with objective of 9.15303e+07 - took 0.07 seconds
Cbc0012I Integer solution of 91530323 found by feasibility pump after 0 iterations and 0 nodes (0.10 seconds)
Cbc0012I Integer solution of 89436877 found by DiveCoefficient after 115 iterations and 0 nodes (0.16 seconds)
Cbc0031I 64 added rows had average density of 92.5
Cbc0013I At root node, 64 cuts changed objective from 13366708 to 78492727 in 10 passes
Cbc0014I Cut generator 0 (Probing) - 1 row cuts average 40.0 elements, 0 column cuts (0 active)  in 0.008 seconds - new frequency is -100
Cbc0014I Cut generator 1 (Gomory) - 51 row cuts average 65.9 elements, 0 column cuts (0 active)  in 0.004 seconds - new frequency is 1
Cbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.001 seconds - new frequency is -100
Cbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100
Cbc0014I Cut generator 4 (MixedIntegerRounding2) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.003 seconds - new frequency is -100
Cbc0014I Cut generator 5 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.010 seconds - new frequency is -100
Cbc0014I Cut generator 6 (TwoMirCuts) - 82 row cuts average 99.0 elements, 0 column cuts (0 active)  in 0.004 seconds - new frequency is 1
Cbc0010I After 0 nodes, 1 on tree, 89436877 best solution, best possible 78492727 (0.16 seconds)
Cbc0012I Integer solution of 87492904 found by DiveCoefficient after 118 iterations and 1 nodes (0.17 seconds)
Cbc0012I Integer solution of 86468308 found by DiveCoefficient after 120 iterations and 2 nodes (0.18 seconds)
Cbc0012I Integer solution of 85723593 found by DiveCoefficient after 130 iterations and 3 nodes (0.19 seconds)
Cbc0012I Integer solution of 85260166 found by DiveCoefficient after 134 iterations and 3 nodes (0.20 seconds)
Cbc0012I Integer solution of 84659768 found by DiveCoefficient after 138 iterations and 5 nodes (0.21 seconds)
Cbc0012I Integer solution of 83299146 found by DiveCoefficient after 144 iterations and 6 nodes (0.23 seconds)
Cbc0012I Integer solution of 82053667 found by DiveCoefficient after 154 iterations and 7 nodes (0.24 seconds)
Cbc0012I Integer solution of 81900783 found by DiveCoefficient after 176 iterations and 9 nodes (0.26 seconds)
Cbc0012I Integer solution of 80834117 found by DiveCoefficient after 181 iterations and 10 nodes (0.26 seconds)
Cbc0012I Integer solution of 80392909 found by DiveCoefficient after 201 iterations and 12 nodes (0.27 seconds)
Cbc0012I Integer solution of 80011252 found by DiveCoefficient after 229 iterations and 19 nodes (0.28 seconds)
Cbc0012I Integer solution of 79947717 found by rounding after 265 iterations and 21 nodes (0.29 seconds)
Cbc0001I Search completed - best objective 79947717.41820103, took 341 iterations and 28 nodes (0.30 seconds)
Cbc0032I Strong branching done 248 times (1305 iterations), fathomed 1 nodes and fixed 8 variables
Cbc0035I Maximum depth 11, 3 variables fixed on reduced cost
Cuts at root node changed objective from 1.33667e+07 to 7.84927e+07
Probing was tried 10 times and created 1 cuts of which 0 were active after adding rounds of cuts (0.008 seconds)
Gomory was tried 28 times and created 51 cuts of which 0 were active after adding rounds of cuts (0.006 seconds)
Knapsack was tried 10 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.001 seconds)
Clique was tried 10 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)
MixedIntegerRounding2 was tried 10 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.003 seconds)
FlowCover was tried 10 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.010 seconds)
TwoMirCuts was tried 28 times and created 82 cuts of which 0 were active after adding rounds of cuts (0.005 seconds)
ZeroHalf was tried 1 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)

Result - Optimal solution found

Objective value:                79947717.41820103
Enumerated nodes:               28
Total iterations:               341
Time (CPU seconds):             0.28
Time (Wallclock seconds):       0.31

Option for printingOptions changed from normal to all
Total time (CPU seconds):       0.28   (Wallclock seconds):       0.31

