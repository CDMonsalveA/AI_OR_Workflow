Welcome to the CBC MILP Solver 
Version: 2.10.3 
Build Date: Dec 15 2019 

command line - /home/cdmonsalvea/AI_OR_Workflow/.venv/lib/python3.10/site-packages/pulp/solverdir/cbc/linux/64/cbc /tmp/f91fcdcfc7a54ba9a1c31046cf2e93c9-pulp.mps -sec 3600 -timeMode elapsed -branch -printingOptions all -solution /tmp/f91fcdcfc7a54ba9a1c31046cf2e93c9-pulp.sol (default strategy 1)
At line 2 NAME          MODEL
At line 3 ROWS
At line 135 COLUMNS
At line 13006 RHS
At line 13137 BOUNDS
At line 13203 ENDATA
Problem MODEL has 130 rows, 4290 columns and 8515 elements
Coin0008I MODEL read with 0 errors
seconds was changed from 1e+100 to 3600
Option for timeMode changed from cpu to elapsed
Continuous objective value is 3.40999e+07 - 0.00 seconds
Cgl0004I processed model has 130 rows, 4290 columns (65 integer (65 of which binary)) and 8515 elements
Cbc0038I Initial state - 65 integers unsatisfied sum - 9.22805
Cbc0038I Pass   1: suminf.    0.49328 (1) obj. 8.96852e+08 iterations 64
Cbc0038I Pass   2: suminf.    0.49328 (1) obj. 8.96852e+08 iterations 0
Cbc0038I Solution found of 8.99287e+08
Cbc0038I Relaxing continuous gives 4.24216e+08
Cbc0038I Before mini branch and bound, 0 integers at bound fixed and 4096 continuous
Cbc0038I Full problem 130 rows 4290 columns, reduced to 125 rows 186 columns
Cbc0038I Mini branch and bound improved solution from 4.24216e+08 to 2.04098e+08 (0.04 seconds)
Cbc0038I Freeing continuous variables gives a solution of 1.92953e+08
Cbc0038I Round again with cutoff of 1.77068e+08
Cbc0038I Pass   3: suminf.    3.05999 (23) obj. 1.77068e+08 iterations 84
Cbc0038I Pass   4: suminf.    2.28221 (21) obj. 1.77068e+08 iterations 9
Cbc0038I Pass   5: suminf.    0.43815 (8) obj. 1.77068e+08 iterations 65
Cbc0038I Pass   6: suminf.    0.20649 (2) obj. 1.77068e+08 iterations 52
Cbc0038I Pass   7: suminf.    0.11657 (1) obj. 1.77068e+08 iterations 13
Cbc0038I Pass   8: suminf.    0.00000 (0) obj. 1.77068e+08 iterations 2
Cbc0038I Solution found of 1.77068e+08
Cbc0038I Relaxing continuous gives 1.77023e+08
Cbc0038I Before mini branch and bound, 0 integers at bound fixed and 4086 continuous
Cbc0038I Full problem 130 rows 4290 columns, reduced to 103 rows 168 columns
Cbc0038I Mini branch and bound improved solution from 1.77023e+08 to 1.61962e+08 (0.11 seconds)
Cbc0038I Freeing continuous variables gives a solution of 1.60966e+08
Cbc0038I Round again with cutoff of 1.35592e+08
Cbc0038I Pass   9: suminf.    4.60193 (35) obj. 1.35592e+08 iterations 12
Cbc0038I Pass  10: suminf.    3.38703 (30) obj. 1.35592e+08 iterations 12
Cbc0038I Pass  11: suminf.    2.33591 (20) obj. 1.35592e+08 iterations 93
Cbc0038I Pass  12: suminf.    4.77069 (27) obj. 1.35592e+08 iterations 53
Cbc0038I Pass  13: suminf.    4.58781 (26) obj. 1.35592e+08 iterations 3
Cbc0038I Pass  14: suminf.    4.67267 (27) obj. 1.35592e+08 iterations 16
Cbc0038I Pass  15: suminf.    4.67267 (27) obj. 1.35592e+08 iterations 0
Cbc0038I Pass  16: suminf.    4.77069 (27) obj. 1.35592e+08 iterations 13
Cbc0038I Pass  17: suminf.    4.64483 (27) obj. 1.35592e+08 iterations 5
Cbc0038I Pass  18: suminf.    4.77069 (27) obj. 1.35592e+08 iterations 2
Cbc0038I Pass  19: suminf.    4.60666 (27) obj. 1.35592e+08 iterations 41
Cbc0038I Pass  20: suminf.    4.28989 (25) obj. 1.35592e+08 iterations 6
Cbc0038I Pass  21: suminf.    4.60666 (27) obj. 1.35592e+08 iterations 9
Cbc0038I Pass  22: suminf.    4.42479 (27) obj. 1.35592e+08 iterations 5
Cbc0038I Pass  23: suminf.    4.60666 (27) obj. 1.35592e+08 iterations 3
Cbc0038I Pass  24: suminf.    4.29576 (27) obj. 1.35592e+08 iterations 3
Cbc0038I Pass  25: suminf.    4.77694 (28) obj. 1.35592e+08 iterations 9
Cbc0038I Pass  26: suminf.    4.77694 (28) obj. 1.35592e+08 iterations 0
Cbc0038I Pass  27: suminf.    4.77694 (28) obj. 1.35592e+08 iterations 0
Cbc0038I Pass  28: suminf.    4.84969 (28) obj. 1.35592e+08 iterations 49
Cbc0038I Pass  29: suminf.    4.23245 (26) obj. 1.35592e+08 iterations 6
Cbc0038I Pass  30: suminf.    4.84969 (28) obj. 1.35592e+08 iterations 12
Cbc0038I Pass  31: suminf.    4.62890 (27) obj. 1.35592e+08 iterations 4
Cbc0038I Pass  32: suminf.    4.84969 (28) obj. 1.35592e+08 iterations 3
Cbc0038I Pass  33: suminf.    4.82569 (28) obj. 1.35592e+08 iterations 23
Cbc0038I Pass  34: suminf.    4.82569 (28) obj. 1.35592e+08 iterations 0
Cbc0038I Pass  35: suminf.    4.67364 (28) obj. 1.35592e+08 iterations 8
Cbc0038I Pass  36: suminf.    4.67364 (28) obj. 1.35592e+08 iterations 0
Cbc0038I Pass  37: suminf.    4.63525 (28) obj. 1.35592e+08 iterations 15
Cbc0038I Pass  38: suminf.    4.63525 (28) obj. 1.35592e+08 iterations 0
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 0 integers at bound fixed and 4110 continuous
Cbc0038I Full problem 130 rows 4290 columns, reduced to 78 rows 124 columns
Cbc0038I Mini branch and bound did not improve solution (0.17 seconds)
Cbc0038I After 0.17 seconds - Feasibility pump exiting with objective of 1.60966e+08 - took 0.14 seconds
Cbc0012I Integer solution of 1.6096559e+08 found by feasibility pump after 0 iterations and 0 nodes (0.17 seconds)
Cbc0012I Integer solution of 1.509462e+08 found by DiveCoefficient after 246 iterations and 0 nodes (0.50 seconds)
Cbc0031I 89 added rows had average density of 120.65169
Cbc0013I At root node, 89 cuts changed objective from 34099897 to 1.3567787e+08 in 30 passes
Cbc0014I Cut generator 0 (Probing) - 1 row cuts average 65.0 elements, 0 column cuts (0 active)  in 0.077 seconds - new frequency is -100
Cbc0014I Cut generator 1 (Gomory) - 116 row cuts average 147.8 elements, 0 column cuts (0 active)  in 0.025 seconds - new frequency is -100
Cbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.003 seconds - new frequency is -100
Cbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.001 seconds - new frequency is -100
Cbc0014I Cut generator 4 (MixedIntegerRounding2) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.020 seconds - new frequency is -100
Cbc0014I Cut generator 5 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.082 seconds - new frequency is -100
Cbc0014I Cut generator 6 (TwoMirCuts) - 120 row cuts average 142.0 elements, 0 column cuts (0 active)  in 0.013 seconds - new frequency is 1
Cbc0010I After 0 nodes, 1 on tree, 1.509462e+08 best solution, best possible 1.3567787e+08 (0.52 seconds)
Cbc0012I Integer solution of 1.4906535e+08 found by DiveCoefficient after 249 iterations and 1 nodes (0.53 seconds)
Cbc0012I Integer solution of 1.486351e+08 found by DiveCoefficient after 262 iterations and 2 nodes (0.57 seconds)
Cbc0012I Integer solution of 1.4805626e+08 found by DiveCoefficient after 277 iterations and 6 nodes (0.76 seconds)
Cbc0012I Integer solution of 1.4749089e+08 found by DiveCoefficient after 298 iterations and 9 nodes (0.82 seconds)
Cbc0012I Integer solution of 1.4688802e+08 found by DiveCoefficient after 300 iterations and 10 nodes (0.83 seconds)
Cbc0012I Integer solution of 1.4638658e+08 found by DiveCoefficient after 306 iterations and 11 nodes (0.85 seconds)
Cbc0012I Integer solution of 1.4587103e+08 found by DiveCoefficient after 325 iterations and 16 nodes (0.89 seconds)
Cbc0012I Integer solution of 1.4544909e+08 found by DiveCoefficient after 351 iterations and 21 nodes (0.92 seconds)
Cbc0012I Integer solution of 1.4544579e+08 found by DiveCoefficient after 364 iterations and 24 nodes (0.95 seconds)
Cbc0004I Integer solution of 1.4373978e+08 found after 393 iterations and 32 nodes (0.97 seconds)
Cbc0038I Full problem 130 rows 4290 columns, reduced to 92 rows 1758 columns
Cbc0004I Integer solution of 1.4351055e+08 found after 457 iterations and 44 nodes (1.01 seconds)
Cbc0012I Integer solution of 1.4337989e+08 found by DiveCoefficient after 484 iterations and 46 nodes (1.04 seconds)
Cbc0004I Integer solution of 1.4315065e+08 found after 756 iterations and 61 nodes (1.17 seconds)
Cbc0038I Full problem 130 rows 4290 columns, reduced to 104 rows 2553 columns - 1 fixed gives 104, 2552 - still too large
Cbc0038I Full problem 130 rows 4290 columns, reduced to 104 rows 2552 columns - too large
Cbc0010I After 100 nodes, 6 on tree, 1.4315065e+08 best solution, best possible 1.3567787e+08 (1.45 seconds)
Cbc0038I Full problem 130 rows 4290 columns, reduced to 105 rows 2619 columns - 1 fixed gives 105, 2618 - still too large
Cbc0038I Full problem 130 rows 4290 columns, reduced to 105 rows 2618 columns - too large
Cbc0010I After 200 nodes, 4 on tree, 1.4315065e+08 best solution, best possible 1.3567787e+08 (2.15 seconds)
Cbc0012I Integer solution of 1.4289276e+08 found by DiveCoefficient after 2346 iterations and 231 nodes (2.37 seconds)
Cbc0012I Integer solution of 1.4266249e+08 found by DiveCoefficient after 2475 iterations and 247 nodes (2.63 seconds)
Cbc0012I Integer solution of 1.4243316e+08 found by DiveCoefficient after 2485 iterations and 248 nodes (2.64 seconds)
Cbc0012I Integer solution of 1.4220393e+08 found by DiveCoefficient after 2569 iterations and 267 nodes (2.71 seconds)
Cbc0038I Full problem 130 rows 4290 columns, reduced to 103 rows 2486 columns - 1 fixed gives 103, 2485 - still too large
Cbc0038I Full problem 130 rows 4290 columns, reduced to 103 rows 2485 columns - too large
Cbc0010I After 300 nodes, 2 on tree, 1.4220393e+08 best solution, best possible 1.3742883e+08 (2.97 seconds)
Cbc0001I Search completed - best objective 142203928.6616679, took 3315 iterations and 335 nodes (3.23 seconds)
Cbc0032I Strong branching done 1992 times (8460 iterations), fathomed 28 nodes and fixed 349 variables
Cbc0035I Maximum depth 19, 10 variables fixed on reduced cost
Cuts at root node changed objective from 3.40999e+07 to 1.35678e+08
Probing was tried 30 times and created 1 cuts of which 0 were active after adding rounds of cuts (0.077 seconds)
Gomory was tried 30 times and created 116 cuts of which 0 were active after adding rounds of cuts (0.025 seconds)
Knapsack was tried 30 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.003 seconds)
Clique was tried 30 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.001 seconds)
MixedIntegerRounding2 was tried 30 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.020 seconds)
FlowCover was tried 30 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.082 seconds)
TwoMirCuts was tried 261 times and created 121 cuts of which 0 were active after adding rounds of cuts (0.043 seconds)
ZeroHalf was tried 1 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)

Result - Optimal solution found

Objective value:                142203928.66166788
Enumerated nodes:               335
Total iterations:               3315
Time (CPU seconds):             3.22
Time (Wallclock seconds):       3.23

Option for printingOptions changed from normal to all
Total time (CPU seconds):       3.23   (Wallclock seconds):       3.24

