Welcome to the CBC MILP Solver 
Version: 2.10.3 
Build Date: Dec 15 2019 

command line - /home/cdmonsalvea/AI_OR_Workflow/.venv/lib/python3.10/site-packages/pulp/solverdir/cbc/linux/64/cbc /tmp/1a990d77b32b4880b5083835d198a8c4-pulp.mps -sec 3600 -timeMode elapsed -branch -printingOptions all -solution /tmp/1a990d77b32b4880b5083835d198a8c4-pulp.sol (default strategy 1)
At line 2 NAME          MODEL
At line 3 ROWS
At line 33 COLUMNS
At line 664 RHS
At line 693 BOUNDS
At line 708 ENDATA
Problem MODEL has 28 rows, 210 columns and 406 elements
Coin0008I MODEL read with 0 errors
seconds was changed from 1e+100 to 3600
Option for timeMode changed from cpu to elapsed
Continuous objective value is 2.21323e+06 - 0.00 seconds
Cgl0004I processed model has 28 rows, 210 columns (14 integer (14 of which binary)) and 406 elements
Cbc0038I Initial state - 14 integers unsatisfied sum - 0.711376
Cbc0038I Pass   1: suminf.    0.28862 (1) obj. 5.83514e+08 iterations 13
Cbc0038I Solution found of 5.84412e+08
Cbc0038I Relaxing continuous gives 5.84412e+08
Cbc0038I Before mini branch and bound, 0 integers at bound fixed and 169 continuous
Cbc0038I Full problem 28 rows 210 columns, reduced to 27 rows 39 columns
Cbc0038I Mini branch and bound improved solution from 5.84412e+08 to 4.102e+07 (0.00 seconds)
Cbc0038I Freeing continuous variables gives a solution of 3.56735e+07
Cbc0038I Round again with cutoff of 3.23274e+07
Cbc0038I Pass   2: suminf.    0.71138 (6) obj. 3.23274e+07 iterations 14
Cbc0038I Pass   3: suminf.    0.00000 (0) obj. 3.23274e+07 iterations 8
Cbc0038I Solution found of 3.23274e+07
Cbc0038I Relaxing continuous gives 3.04223e+07
Cbc0038I Before mini branch and bound, 0 integers at bound fixed and 171 continuous
Cbc0038I Full problem 28 rows 210 columns, reduced to 21 rows 29 columns
Cbc0038I Mini branch and bound improved solution from 3.04223e+07 to 2.97375e+07 (0.01 seconds)
Cbc0038I Round again with cutoff of 2.42326e+07
Cbc0038I Pass   4: suminf.    0.71138 (6) obj. 2.42326e+07 iterations 0
Cbc0038I Pass   5: suminf.    0.07578 (5) obj. 2.42326e+07 iterations 13
Cbc0038I Pass   6: suminf.    0.78882 (7) obj. 2.42326e+07 iterations 16
Cbc0038I Pass   7: suminf.    0.40359 (5) obj. 2.42326e+07 iterations 3
Cbc0038I Pass   8: suminf.    0.78882 (7) obj. 2.42326e+07 iterations 6
Cbc0038I Pass   9: suminf.    0.36888 (6) obj. 2.42326e+07 iterations 2
Cbc0038I Pass  10: suminf.    0.78882 (7) obj. 2.42326e+07 iterations 3
Cbc0038I Pass  11: suminf.    0.36139 (5) obj. 2.42326e+07 iterations 3
Cbc0038I Pass  12: suminf.    0.78882 (7) obj. 2.42326e+07 iterations 4
Cbc0038I Pass  13: suminf.    0.22971 (4) obj. 2.42326e+07 iterations 10
Cbc0038I Pass  14: suminf.    0.78882 (7) obj. 2.42326e+07 iterations 9
Cbc0038I Pass  15: suminf.    0.36888 (6) obj. 2.42326e+07 iterations 2
Cbc0038I Pass  16: suminf.    0.78882 (7) obj. 2.42326e+07 iterations 3
Cbc0038I Pass  17: suminf.    0.36139 (5) obj. 2.42326e+07 iterations 3
Cbc0038I Pass  18: suminf.    0.78882 (7) obj. 2.42326e+07 iterations 4
Cbc0038I Pass  19: suminf.    0.55099 (4) obj. 2.42326e+07 iterations 9
Cbc0038I Pass  20: suminf.    0.78882 (7) obj. 2.42326e+07 iterations 9
Cbc0038I Pass  21: suminf.    0.38494 (7) obj. 2.42326e+07 iterations 3
Cbc0038I Pass  22: suminf.    0.78882 (7) obj. 2.42326e+07 iterations 3
Cbc0038I Pass  23: suminf.    0.78882 (7) obj. 2.42326e+07 iterations 8
Cbc0038I Pass  24: suminf.    0.36889 (6) obj. 2.42326e+07 iterations 2
Cbc0038I Pass  25: suminf.    0.78882 (7) obj. 2.42326e+07 iterations 8
Cbc0038I Pass  26: suminf.    0.36139 (5) obj. 2.42326e+07 iterations 3
Cbc0038I Pass  27: suminf.    0.78882 (7) obj. 2.42326e+07 iterations 4
Cbc0038I Pass  28: suminf.    0.43322 (7) obj. 2.42326e+07 iterations 8
Cbc0038I Pass  29: suminf.    0.78882 (7) obj. 2.42326e+07 iterations 8
Cbc0038I Pass  30: suminf.    0.25835 (6) obj. 2.42326e+07 iterations 9
Cbc0038I Pass  31: suminf.    0.78882 (7) obj. 2.42326e+07 iterations 8
Cbc0038I Pass  32: suminf.    0.41167 (5) obj. 2.42326e+07 iterations 3
Cbc0038I Pass  33: suminf.    0.59389 (6) obj. 2.42326e+07 iterations 4
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 0 integers at bound fixed and 162 continuous
Cbc0038I Full problem 28 rows 210 columns, reduced to 26 rows 46 columns
Cbc0038I Mini branch and bound did not improve solution (0.03 seconds)
Cbc0038I After 0.03 seconds - Feasibility pump exiting with objective of 2.97375e+07 - took 0.03 seconds
Cbc0012I Integer solution of 29737456 found by feasibility pump after 0 iterations and 0 nodes (0.03 seconds)
Cbc0012I Integer solution of 29413351 found by DiveCoefficient after 925 iterations and 0 nodes (0.14 seconds)
Cbc0031I 26 added rows had average density of 33.730769
Cbc0013I At root node, 26 cuts changed objective from 2213234.4 to 26269008 in 100 passes
Cbc0014I Cut generator 0 (Probing) - 46 row cuts average 17.9 elements, 0 column cuts (0 active)  in 0.014 seconds - new frequency is 1
Cbc0014I Cut generator 1 (Gomory) - 206 row cuts average 53.5 elements, 0 column cuts (0 active)  in 0.006 seconds - new frequency is 1
Cbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.004 seconds - new frequency is -100
Cbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100
Cbc0014I Cut generator 4 (MixedIntegerRounding2) - 59 row cuts average 40.3 elements, 0 column cuts (0 active)  in 0.005 seconds - new frequency is 1
Cbc0014I Cut generator 5 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.013 seconds - new frequency is -100
Cbc0014I Cut generator 6 (TwoMirCuts) - 29 row cuts average 32.7 elements, 0 column cuts (0 active)  in 0.001 seconds - new frequency is 1
Cbc0010I After 0 nodes, 1 on tree, 29413351 best solution, best possible 26269008 (0.14 seconds)
Cbc0012I Integer solution of 27485342 found by DiveCoefficient after 962 iterations and 3 nodes (0.15 seconds)
Cbc0016I Integer solution of 27385193 found by strong branching after 966 iterations and 3 nodes (0.15 seconds)
Cbc0012I Integer solution of 26918192 found by DiveCoefficient after 981 iterations and 4 nodes (0.15 seconds)
Cbc0001I Search completed - best objective 26918192.16384128, took 1018 iterations and 6 nodes (0.15 seconds)
Cbc0032I Strong branching done 30 times (314 iterations), fathomed 2 nodes and fixed 0 variables
Cbc0035I Maximum depth 2, 0 variables fixed on reduced cost
Cuts at root node changed objective from 2.21323e+06 to 2.6269e+07
Probing was tried 109 times and created 51 cuts of which 0 were active after adding rounds of cuts (0.015 seconds)
Gomory was tried 109 times and created 206 cuts of which 0 were active after adding rounds of cuts (0.007 seconds)
Knapsack was tried 100 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.004 seconds)
Clique was tried 100 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)
MixedIntegerRounding2 was tried 109 times and created 62 cuts of which 0 were active after adding rounds of cuts (0.006 seconds)
FlowCover was tried 100 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.013 seconds)
TwoMirCuts was tried 109 times and created 33 cuts of which 0 were active after adding rounds of cuts (0.002 seconds)
ZeroHalf was tried 1 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)

Result - Optimal solution found

Objective value:                26918192.16384128
Enumerated nodes:               6
Total iterations:               1018
Time (CPU seconds):             0.12
Time (Wallclock seconds):       0.16

Option for printingOptions changed from normal to all
Total time (CPU seconds):       0.12   (Wallclock seconds):       0.16

