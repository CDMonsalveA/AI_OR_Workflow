Welcome to the CBC MILP Solver 
Version: 2.10.3 
Build Date: Dec 15 2019 

command line - /home/cdmonsalvea/AI_OR_Workflow/.venv/lib/python3.10/site-packages/pulp/solverdir/cbc/linux/64/cbc /tmp/c89e8870ce3f455ead3fe2d6eade5d98-pulp.mps -sec 3600 -timeMode elapsed -branch -printingOptions all -solution /tmp/c89e8870ce3f455ead3fe2d6eade5d98-pulp.sol (default strategy 1)
At line 2 NAME          MODEL
At line 3 ROWS
At line 105 COLUMNS
At line 7756 RHS
At line 7857 BOUNDS
At line 7908 ENDATA
Problem MODEL has 100 rows, 2550 columns and 5050 elements
Coin0008I MODEL read with 0 errors
seconds was changed from 1e+100 to 3600
Option for timeMode changed from cpu to elapsed
Continuous objective value is 6.41201e+07 - 0.00 seconds
Cgl0004I processed model has 100 rows, 2550 columns (50 integer (50 of which binary)) and 5050 elements
Cbc0038I Initial state - 50 integers unsatisfied sum - 9.39807
Cbc0038I Pass   1: suminf.    0.00000 (0) obj. 6.25708e+08 iterations 50
Cbc0038I Solution found of 6.25708e+08
Cbc0038I Relaxing continuous gives 4.46387e+08
Cbc0038I Before mini branch and bound, 0 integers at bound fixed and 2401 continuous
Cbc0038I Full problem 100 rows 2550 columns, reduced to 95 rows 139 columns
Cbc0038I Mini branch and bound improved solution from 4.46387e+08 to 1.99073e+08 (0.03 seconds)
Cbc0038I Freeing continuous variables gives a solution of 1.88787e+08
Cbc0038I Round again with cutoff of 1.7632e+08
Cbc0038I Pass   2: suminf.    2.05523 (14) obj. 1.7632e+08 iterations 87
Cbc0038I Pass   3: suminf.    0.33889 (2) obj. 1.7632e+08 iterations 46
Cbc0038I Pass   4: suminf.    0.27200 (2) obj. 1.7632e+08 iterations 4
Cbc0038I Pass   5: suminf.    0.27200 (2) obj. 1.7632e+08 iterations 0
Cbc0038I Pass   6: suminf.    0.34516 (1) obj. 1.7632e+08 iterations 15
Cbc0038I Pass   7: suminf.    0.14583 (1) obj. 1.7632e+08 iterations 16
Cbc0038I Pass   8: suminf.    0.21124 (2) obj. 1.7632e+08 iterations 22
Cbc0038I Pass   9: suminf.    0.36561 (1) obj. 1.7632e+08 iterations 10
Cbc0038I Pass  10: suminf.    0.13806 (1) obj. 1.7632e+08 iterations 13
Cbc0038I Pass  11: suminf.    0.26396 (1) obj. 1.7632e+08 iterations 33
Cbc0038I Pass  12: suminf.    0.35522 (1) obj. 1.7632e+08 iterations 7
Cbc0038I Pass  13: suminf.    0.26396 (1) obj. 1.7632e+08 iterations 9
Cbc0038I Pass  14: suminf.    0.61419 (4) obj. 1.7632e+08 iterations 30
Cbc0038I Pass  15: suminf.    0.40726 (4) obj. 1.7632e+08 iterations 12
Cbc0038I Pass  16: suminf.    0.40726 (4) obj. 1.7632e+08 iterations 0
Cbc0038I Pass  17: suminf.    0.44614 (2) obj. 1.7632e+08 iterations 17
Cbc0038I Pass  18: suminf.    0.44614 (2) obj. 1.7632e+08 iterations 0
Cbc0038I Pass  19: suminf.    0.34627 (1) obj. 1.7632e+08 iterations 4
Cbc0038I Pass  20: suminf.    0.32583 (1) obj. 1.7632e+08 iterations 2
Cbc0038I Pass  21: suminf.    1.05287 (7) obj. 1.7632e+08 iterations 42
Cbc0038I Pass  22: suminf.    0.36654 (1) obj. 1.7632e+08 iterations 27
Cbc0038I Pass  23: suminf.    0.20431 (1) obj. 1.7632e+08 iterations 11
Cbc0038I Pass  24: suminf.    0.61324 (5) obj. 1.7632e+08 iterations 45
Cbc0038I Pass  25: suminf.    0.33220 (3) obj. 1.7632e+08 iterations 4
Cbc0038I Pass  26: suminf.    0.34939 (1) obj. 1.7632e+08 iterations 9
Cbc0038I Pass  27: suminf.    0.30524 (1) obj. 1.7632e+08 iterations 4
Cbc0038I Pass  28: suminf.    0.55713 (4) obj. 1.7632e+08 iterations 49
Cbc0038I Pass  29: suminf.    0.36314 (2) obj. 1.7632e+08 iterations 9
Cbc0038I Pass  30: suminf.    0.33303 (2) obj. 1.7632e+08 iterations 2
Cbc0038I Pass  31: suminf.    0.34972 (1) obj. 1.7632e+08 iterations 9
Cbc0038I Rounding solution of 1.81627e+08 is better than previous of 1.88787e+08

Cbc0038I Before mini branch and bound, 0 integers at bound fixed and 2341 continuous
Cbc0038I Full problem 100 rows 2550 columns, reduced to 83 rows 188 columns
Cbc0038I Mini branch and bound improved solution from 1.81627e+08 to 1.6393e+08 (0.11 seconds)
Cbc0038I Freeing continuous variables gives a solution of 1.62514e+08
Cbc0038I Round again with cutoff of 1.42835e+08
Cbc0038I Pass  31: suminf.    2.91406 (18) obj. 1.42835e+08 iterations 10
Cbc0038I Pass  32: suminf.    1.52573 (9) obj. 1.42835e+08 iterations 53
Cbc0038I Pass  33: suminf.    1.51800 (9) obj. 1.42835e+08 iterations 1
Cbc0038I Pass  34: suminf.    2.05496 (11) obj. 1.42835e+08 iterations 32
Cbc0038I Pass  35: suminf.    2.05496 (11) obj. 1.42835e+08 iterations 0
Cbc0038I Pass  36: suminf.    3.74137 (15) obj. 1.42835e+08 iterations 28
Cbc0038I Pass  37: suminf.    3.70656 (15) obj. 1.42835e+08 iterations 2
Cbc0038I Pass  38: suminf.    4.05368 (16) obj. 1.42835e+08 iterations 17
Cbc0038I Pass  39: suminf.    3.78587 (15) obj. 1.42835e+08 iterations 4
Cbc0038I Pass  40: suminf.    3.97909 (15) obj. 1.42835e+08 iterations 6
Cbc0038I Pass  41: suminf.    3.87773 (15) obj. 1.42835e+08 iterations 32
Cbc0038I Pass  42: suminf.    3.73248 (15) obj. 1.42835e+08 iterations 5
Cbc0038I Pass  43: suminf.    4.43466 (16) obj. 1.42835e+08 iterations 14
Cbc0038I Pass  44: suminf.    4.03193 (15) obj. 1.42835e+08 iterations 2
Cbc0038I Pass  45: suminf.    3.66117 (14) obj. 1.42835e+08 iterations 5
Cbc0038I Pass  46: suminf.    3.70087 (14) obj. 1.42835e+08 iterations 4
Cbc0038I Pass  47: suminf.    3.60593 (14) obj. 1.42835e+08 iterations 2
Cbc0038I Pass  48: suminf.    2.54838 (11) obj. 1.42835e+08 iterations 17
Cbc0038I Pass  49: suminf.    3.89674 (14) obj. 1.42835e+08 iterations 12
Cbc0038I Pass  50: suminf.    3.56892 (14) obj. 1.42835e+08 iterations 3
Cbc0038I Pass  51: suminf.    3.89674 (14) obj. 1.42835e+08 iterations 8
Cbc0038I Pass  52: suminf.    3.51783 (14) obj. 1.42835e+08 iterations 4
Cbc0038I Pass  53: suminf.    3.97408 (17) obj. 1.42835e+08 iterations 14
Cbc0038I Pass  54: suminf.    4.23419 (16) obj. 1.42835e+08 iterations 10
Cbc0038I Pass  55: suminf.    3.70087 (14) obj. 1.42835e+08 iterations 2
Cbc0038I Pass  56: suminf.    3.60593 (14) obj. 1.42835e+08 iterations 2
Cbc0038I Pass  57: suminf.    3.70087 (14) obj. 1.42835e+08 iterations 3
Cbc0038I Pass  58: suminf.    3.00100 (12) obj. 1.42835e+08 iterations 25
Cbc0038I Pass  59: suminf.    2.90858 (12) obj. 1.42835e+08 iterations 4
Cbc0038I Pass  60: suminf.    3.83031 (14) obj. 1.42835e+08 iterations 14
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 0 integers at bound fixed and 2391 continuous
Cbc0038I Full problem 100 rows 2550 columns, reduced to 69 rows 124 columns
Cbc0038I Mini branch and bound did not improve solution (0.20 seconds)
Cbc0038I After 0.20 seconds - Feasibility pump exiting with objective of 1.62514e+08 - took 0.19 seconds
Cbc0012I Integer solution of 1.6251355e+08 found by feasibility pump after 0 iterations and 0 nodes (0.20 seconds)
Cbc0012I Integer solution of 1.6067752e+08 found by DiveCoefficient after 110 iterations and 0 nodes (0.27 seconds)
Cbc0031I 64 added rows had average density of 75.859375
Cbc0013I At root node, 64 cuts changed objective from 64120086 to 1.5903486e+08 in 9 passes
Cbc0014I Cut generator 0 (Probing) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.013 seconds - new frequency is -100
Cbc0014I Cut generator 1 (Gomory) - 79 row cuts average 87.4 elements, 0 column cuts (0 active)  in 0.003 seconds - new frequency is 1
Cbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.002 seconds - new frequency is -100
Cbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.000 seconds - new frequency is -100
Cbc0014I Cut generator 4 (MixedIntegerRounding2) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.004 seconds - new frequency is -100
Cbc0014I Cut generator 5 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.011 seconds - new frequency is -100
Cbc0014I Cut generator 6 (TwoMirCuts) - 91 row cuts average 100.0 elements, 0 column cuts (0 active)  in 0.005 seconds - new frequency is 1
Cbc0010I After 0 nodes, 1 on tree, 1.6067752e+08 best solution, best possible 1.5903486e+08 (0.27 seconds)
Cbc0012I Integer solution of 1.6059978e+08 found by DiveCoefficient after 111 iterations and 1 nodes (0.27 seconds)
Cbc0012I Integer solution of 1.5903554e+08 found by DiveCoefficient after 112 iterations and 2 nodes (0.28 seconds)
Cbc0001I Search completed - best objective 159035538.0936544, took 121 iterations and 4 nodes (0.28 seconds)
Cbc0032I Strong branching done 24 times (148 iterations), fathomed 1 nodes and fixed 0 variables
Cbc0035I Maximum depth 1, 0 variables fixed on reduced cost
Cuts at root node changed objective from 6.41201e+07 to 1.59035e+08
Probing was tried 9 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.013 seconds)
Gomory was tried 11 times and created 79 cuts of which 0 were active after adding rounds of cuts (0.003 seconds)
Knapsack was tried 9 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.002 seconds)
Clique was tried 9 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)
MixedIntegerRounding2 was tried 9 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.004 seconds)
FlowCover was tried 9 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.011 seconds)
TwoMirCuts was tried 11 times and created 91 cuts of which 0 were active after adding rounds of cuts (0.005 seconds)
ZeroHalf was tried 1 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)

Result - Optimal solution found

Objective value:                159035538.09365436
Enumerated nodes:               4
Total iterations:               121
Time (CPU seconds):             0.28
Time (Wallclock seconds):       0.29

Option for printingOptions changed from normal to all
Total time (CPU seconds):       0.28   (Wallclock seconds):       0.29

